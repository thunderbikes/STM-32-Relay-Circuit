/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "stdio.h"
#include "stm32f0xx_hal_gpio.h"
#include "stm32f0xx_it.h"
#include "stdlib.h"
#include "stm32f0xx_hal.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

#define RL1_Pin GPIO_PIN_0
#define RL1_GPIO_Port GPIOA
#define RL2_Pin GPIO_PIN_1
#define RL2_GPIO_Port GPIOA
#define RL3_Pin GPIO_PIN_2
#define RL3_GPIO_Port GPIOA
#define RL4_Pin GPIO_PIN_3
#define RL4_GPIO_Port GPIOA
#define RL5_Pin GPIO_PIN_4
#define RL5_GPIO_Port GPIOA
#define RL6_Pin GPIO_PIN_5
#define RL6_GPIO_Port GPIOA

#define CHARGE_INPUT_Pin GPIO_PIN_1
#define CHARGE_INPUT_GPIO_Port GPIOB
#define MAIN_INPUT_Pin GPIO_PIN_8
#define MAIN_INPUT_GPIO_Port GPIOA
#define FORWARD_INPUT_Pin GPIO_PIN_7
#define FORWARD_INPUT_GPIO_Port GPIOA
#define REVERSE_INPUT_Pin GPIO_PIN_0
#define REVERSE_INPUT_GPIO_Port GPIOB

#define BMS_Input1_Pin GPIO_PIN_4
#define BMS_Input1_GPIO_Port GPIOB
#define BMS_Input2_Pin GPIO_PIN_3
#define BMS_Input2_GPIO_Port GPIOB
#define BMS_Input3_Pin GPIO_PIN_15
#define BMS_Input3_GPIO_Port GPIOA
#define PUMP_OUTPUT_Pin GPIO_PIN_8
#define PUMP_OUTPUT_GPIO_Port GPIOA

#define R1_AUX_Pin GPIO_PIN_8
#define R1_AUX_GPIO_Port GPIOB
#define R2_AUX_Pin GPIO_PIN_7
#define R2_AUX_GPIO_Port GPIOB
#define R3_AUX_Pin GPIO_PIN_6
#define R3_AUX_GPIO_Port GPIOB
#define R6_AUX_Pin GPIO_PIN_5
#define R6_AUX_GPIO_Port GPIOB

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
CAN_HandleTypeDef hcan;

TIM_HandleTypeDef htim3;

/* USER CODE BEGIN PV */

int charge_state = GPIO_PIN_RESET;
int main_state = GPIO_PIN_RESET;
int forward_state = GPIO_PIN_RESET;
int reverse_state = GPIO_PIN_RESET;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_CAN_Init(void);
static void MX_TIM3_Init(void);

/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

CAN_TxHeaderTypeDef TxHeader1, TxHeader2, TxHeader3;
uint8_t TxData1[8], TxData2[8], TxData3[8];
uint32_t TxMailbox;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
    if (htim->Instance == TIM3) {
        // Prepare CAN messages
        // Message 1 -> Relay output Status
        TxHeader1.StdId = 0x321;
        TxHeader1.IDE = CAN_ID_STD;
        TxHeader1.RTR = CAN_RTR_DATA;
        TxHeader1.DLC = 6;

        TxData1[0] = HAL_GPIO_ReadPin(RL1_GPIO_Port, RL1_Pin) == GPIO_PIN_SET ? 1 : 0;
        TxData1[1] = HAL_GPIO_ReadPin(RL2_GPIO_Port, RL2_Pin) == GPIO_PIN_SET ? 1 : 0;
        TxData1[2] = HAL_GPIO_ReadPin(RL3_GPIO_Port, RL3_Pin) == GPIO_PIN_SET ? 1 : 0;
        TxData1[3] = HAL_GPIO_ReadPin(RL4_GPIO_Port, RL4_Pin) == GPIO_PIN_SET ? 1 : 0;
        TxData1[4] = HAL_GPIO_ReadPin(RL5_GPIO_Port, RL4_Pin) == GPIO_PIN_SET ? 1 : 0;
        TxData1[5] = HAL_GPIO_ReadPin(RL6_GPIO_Port, RL6_Pin) == GPIO_PIN_SET ? 1 : 0;

        // Message 2 -> Aux status + BMS inputs
        TxHeader2.StdId = 0x322;
        TxHeader2.IDE = CAN_ID_STD;
        TxHeader2.RTR = CAN_RTR_DATA;
        TxHeader2.DLC = 7;

        TxData2[0] = HAL_GPIO_ReadPin(R1_AUX_GPIO_Port, R1_AUX_Pin) == GPIO_PIN_SET ? 1 : 0;
        TxData2[1] = HAL_GPIO_ReadPin(R2_AUX_GPIO_Port, R2_AUX_Pin) == GPIO_PIN_SET ? 1 : 0;
        TxData2[2] = HAL_GPIO_ReadPin(R3_AUX_GPIO_Port, R3_AUX_Pin) == GPIO_PIN_SET ? 1 : 0;
        TxData2[3] = HAL_GPIO_ReadPin(R6_AUX_GPIO_Port, R6_AUX_Pin) == GPIO_PIN_SET ? 1 : 0;
        TxData2[4] = HAL_GPIO_ReadPin(BMS_Input1_GPIO_Port, RL1_Pin) == GPIO_PIN_SET ? 1 : 0;
        TxData2[5] = HAL_GPIO_ReadPin(BMS_Input2_GPIO_Port, RL1_Pin) == GPIO_PIN_SET ? 1 : 0;
        TxData2[6] = HAL_GPIO_ReadPin(BMS_Input3_GPIO_Port, RL1_Pin) == GPIO_PIN_SET ? 1 : 0;

        // Message 3 -> Input Switch Status + Pump Output
        TxHeader3.StdId = 0x323;
        TxHeader3.IDE = CAN_ID_STD;
        TxHeader3.RTR = CAN_RTR_DATA;
        TxHeader3.DLC = 5;

        TxData3[0] = HAL_GPIO_ReadPin(MAIN_INPUT_GPIO_Port, MAIN_INPUT_Pin) == GPIO_PIN_SET ? 1 : 0;
        TxData3[1] = HAL_GPIO_ReadPin(FORWARD_INPUT_GPIO_Port, FORWARD_INPUT_Pin) == GPIO_PIN_SET ? 1 : 0;
        TxData3[2] = HAL_GPIO_ReadPin(REVERSE_INPUT_GPIO_Port, REVERSE_INPUT_Pin) == GPIO_PIN_SET ? 1 : 0;
        TxData3[3] = HAL_GPIO_ReadPin(CHARGE_INPUT_GPIO_Port, CHARGE_INPUT_Pin) == GPIO_PIN_SET ? 1 : 0;
        TxData3[4] = HAL_GPIO_ReadPin(PUMP_OUTPUT_GPIO_Port, PUMP_OUTPUT_Pin) == GPIO_PIN_SET ? 1 : 0;

        // Send CAN messages
        HAL_CAN_AddTxMessage(&hcan, &TxHeader1, TxData1, &TxMailbox);
        HAL_CAN_AddTxMessage(&hcan, &TxHeader2, TxData2, &TxMailbox);
        HAL_CAN_AddTxMessage(&hcan, &TxHeader3, TxData3, &TxMailbox);
    }
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_CAN_Init();
  MX_TIM3_Init();

  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    // Your main application logic goes here

  }
  /* USER CODE END 3 */
}
