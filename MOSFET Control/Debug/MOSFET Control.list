
MOSFET Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d64  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002eec  08002eec  00003eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002efc  08002efc  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002efc  08002efc  00003efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f04  08002f04  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f04  08002f04  00003f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f08  08002f08  00003f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002f0c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  2000000c  08002f18  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08002f18  000040f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000084bc  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018bb  00000000  00000000  0000c4f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000860  00000000  00000000  0000ddb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000649  00000000  00000000  0000e610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d230  00000000  00000000  0000ec59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009519  00000000  00000000  0002be89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2953  00000000  00000000  000353a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7cf5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002338  00000000  00000000  000e7d38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000ea070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002ed4 	.word	0x08002ed4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002ed4 	.word	0x08002ed4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b968 	b.w	8000cec <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	460c      	mov	r4, r1
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d14e      	bne.n	8000ade <__udivmoddi4+0xaa>
 8000a40:	4694      	mov	ip, r2
 8000a42:	458c      	cmp	ip, r1
 8000a44:	4686      	mov	lr, r0
 8000a46:	fab2 f282 	clz	r2, r2
 8000a4a:	d962      	bls.n	8000b12 <__udivmoddi4+0xde>
 8000a4c:	b14a      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a4e:	f1c2 0320 	rsb	r3, r2, #32
 8000a52:	4091      	lsls	r1, r2
 8000a54:	fa20 f303 	lsr.w	r3, r0, r3
 8000a58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a5c:	4319      	orrs	r1, r3
 8000a5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a66:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a6a:	fb07 1114 	mls	r1, r7, r4, r1
 8000a6e:	fa1f f68c 	uxth.w	r6, ip
 8000a72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a7a:	fb04 f106 	mul.w	r1, r4, r6
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	d90a      	bls.n	8000a98 <__udivmoddi4+0x64>
 8000a82:	eb1c 0303 	adds.w	r3, ip, r3
 8000a86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a8a:	f080 8110 	bcs.w	8000cae <__udivmoddi4+0x27a>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 810d 	bls.w	8000cae <__udivmoddi4+0x27a>
 8000a94:	3c02      	subs	r4, #2
 8000a96:	4463      	add	r3, ip
 8000a98:	1a59      	subs	r1, r3, r1
 8000a9a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a9e:	fb07 1110 	mls	r1, r7, r0, r1
 8000aa2:	fb00 f606 	mul.w	r6, r0, r6
 8000aa6:	fa1f f38e 	uxth.w	r3, lr
 8000aaa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aae:	429e      	cmp	r6, r3
 8000ab0:	d90a      	bls.n	8000ac8 <__udivmoddi4+0x94>
 8000ab2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aba:	f080 80fa 	bcs.w	8000cb2 <__udivmoddi4+0x27e>
 8000abe:	429e      	cmp	r6, r3
 8000ac0:	f240 80f7 	bls.w	8000cb2 <__udivmoddi4+0x27e>
 8000ac4:	4463      	add	r3, ip
 8000ac6:	3802      	subs	r0, #2
 8000ac8:	2100      	movs	r1, #0
 8000aca:	1b9b      	subs	r3, r3, r6
 8000acc:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ad0:	b11d      	cbz	r5, 8000ada <__udivmoddi4+0xa6>
 8000ad2:	40d3      	lsrs	r3, r2
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	e9c5 3200 	strd	r3, r2, [r5]
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d905      	bls.n	8000aee <__udivmoddi4+0xba>
 8000ae2:	b10d      	cbz	r5, 8000ae8 <__udivmoddi4+0xb4>
 8000ae4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4608      	mov	r0, r1
 8000aec:	e7f5      	b.n	8000ada <__udivmoddi4+0xa6>
 8000aee:	fab3 f183 	clz	r1, r3
 8000af2:	2900      	cmp	r1, #0
 8000af4:	d146      	bne.n	8000b84 <__udivmoddi4+0x150>
 8000af6:	42a3      	cmp	r3, r4
 8000af8:	d302      	bcc.n	8000b00 <__udivmoddi4+0xcc>
 8000afa:	4290      	cmp	r0, r2
 8000afc:	f0c0 80ee 	bcc.w	8000cdc <__udivmoddi4+0x2a8>
 8000b00:	1a86      	subs	r6, r0, r2
 8000b02:	eb64 0303 	sbc.w	r3, r4, r3
 8000b06:	2001      	movs	r0, #1
 8000b08:	2d00      	cmp	r5, #0
 8000b0a:	d0e6      	beq.n	8000ada <__udivmoddi4+0xa6>
 8000b0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b10:	e7e3      	b.n	8000ada <__udivmoddi4+0xa6>
 8000b12:	2a00      	cmp	r2, #0
 8000b14:	f040 808f 	bne.w	8000c36 <__udivmoddi4+0x202>
 8000b18:	eba1 040c 	sub.w	r4, r1, ip
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b22:	fa1f f78c 	uxth.w	r7, ip
 8000b26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b2a:	fb08 4416 	mls	r4, r8, r6, r4
 8000b2e:	fb07 f006 	mul.w	r0, r7, r6
 8000b32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b3a:	4298      	cmp	r0, r3
 8000b3c:	d908      	bls.n	8000b50 <__udivmoddi4+0x11c>
 8000b3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x11a>
 8000b48:	4298      	cmp	r0, r3
 8000b4a:	f200 80cb 	bhi.w	8000ce4 <__udivmoddi4+0x2b0>
 8000b4e:	4626      	mov	r6, r4
 8000b50:	1a1c      	subs	r4, r3, r0
 8000b52:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b56:	fb08 4410 	mls	r4, r8, r0, r4
 8000b5a:	fb00 f707 	mul.w	r7, r0, r7
 8000b5e:	fa1f f38e 	uxth.w	r3, lr
 8000b62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b66:	429f      	cmp	r7, r3
 8000b68:	d908      	bls.n	8000b7c <__udivmoddi4+0x148>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b72:	d202      	bcs.n	8000b7a <__udivmoddi4+0x146>
 8000b74:	429f      	cmp	r7, r3
 8000b76:	f200 80ae 	bhi.w	8000cd6 <__udivmoddi4+0x2a2>
 8000b7a:	4620      	mov	r0, r4
 8000b7c:	1bdb      	subs	r3, r3, r7
 8000b7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b82:	e7a5      	b.n	8000ad0 <__udivmoddi4+0x9c>
 8000b84:	f1c1 0720 	rsb	r7, r1, #32
 8000b88:	408b      	lsls	r3, r1
 8000b8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b92:	fa24 f607 	lsr.w	r6, r4, r7
 8000b96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b9a:	fbb6 f8f9 	udiv	r8, r6, r9
 8000b9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ba2:	fb09 6618 	mls	r6, r9, r8, r6
 8000ba6:	fa20 f307 	lsr.w	r3, r0, r7
 8000baa:	408c      	lsls	r4, r1
 8000bac:	fa00 fa01 	lsl.w	sl, r0, r1
 8000bb0:	fb08 f00e 	mul.w	r0, r8, lr
 8000bb4:	431c      	orrs	r4, r3
 8000bb6:	0c23      	lsrs	r3, r4, #16
 8000bb8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000bbc:	4298      	cmp	r0, r3
 8000bbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000bc2:	d90a      	bls.n	8000bda <__udivmoddi4+0x1a6>
 8000bc4:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc8:	f108 36ff 	add.w	r6, r8, #4294967295
 8000bcc:	f080 8081 	bcs.w	8000cd2 <__udivmoddi4+0x29e>
 8000bd0:	4298      	cmp	r0, r3
 8000bd2:	d97e      	bls.n	8000cd2 <__udivmoddi4+0x29e>
 8000bd4:	f1a8 0802 	sub.w	r8, r8, #2
 8000bd8:	4463      	add	r3, ip
 8000bda:	1a1e      	subs	r6, r3, r0
 8000bdc:	fbb6 f3f9 	udiv	r3, r6, r9
 8000be0:	fb09 6613 	mls	r6, r9, r3, r6
 8000be4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000be8:	b2a4      	uxth	r4, r4
 8000bea:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000bee:	45a6      	cmp	lr, r4
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x1d0>
 8000bf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf6:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bfa:	d266      	bcs.n	8000cca <__udivmoddi4+0x296>
 8000bfc:	45a6      	cmp	lr, r4
 8000bfe:	d964      	bls.n	8000cca <__udivmoddi4+0x296>
 8000c00:	3b02      	subs	r3, #2
 8000c02:	4464      	add	r4, ip
 8000c04:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000c08:	fba0 8302 	umull	r8, r3, r0, r2
 8000c0c:	eba4 040e 	sub.w	r4, r4, lr
 8000c10:	429c      	cmp	r4, r3
 8000c12:	46c6      	mov	lr, r8
 8000c14:	461e      	mov	r6, r3
 8000c16:	d350      	bcc.n	8000cba <__udivmoddi4+0x286>
 8000c18:	d04d      	beq.n	8000cb6 <__udivmoddi4+0x282>
 8000c1a:	b155      	cbz	r5, 8000c32 <__udivmoddi4+0x1fe>
 8000c1c:	ebba 030e 	subs.w	r3, sl, lr
 8000c20:	eb64 0406 	sbc.w	r4, r4, r6
 8000c24:	fa04 f707 	lsl.w	r7, r4, r7
 8000c28:	40cb      	lsrs	r3, r1
 8000c2a:	431f      	orrs	r7, r3
 8000c2c:	40cc      	lsrs	r4, r1
 8000c2e:	e9c5 7400 	strd	r7, r4, [r5]
 8000c32:	2100      	movs	r1, #0
 8000c34:	e751      	b.n	8000ada <__udivmoddi4+0xa6>
 8000c36:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c3a:	f1c2 0320 	rsb	r3, r2, #32
 8000c3e:	40d9      	lsrs	r1, r3
 8000c40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c44:	fa20 f303 	lsr.w	r3, r0, r3
 8000c48:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c4c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000c50:	fb08 1110 	mls	r1, r8, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	431c      	orrs	r4, r3
 8000c58:	fa1f f78c 	uxth.w	r7, ip
 8000c5c:	0c23      	lsrs	r3, r4, #16
 8000c5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c62:	fb00 f107 	mul.w	r1, r0, r7
 8000c66:	4299      	cmp	r1, r3
 8000c68:	d908      	bls.n	8000c7c <__udivmoddi4+0x248>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c72:	d22c      	bcs.n	8000cce <__udivmoddi4+0x29a>
 8000c74:	4299      	cmp	r1, r3
 8000c76:	d92a      	bls.n	8000cce <__udivmoddi4+0x29a>
 8000c78:	3802      	subs	r0, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c82:	fb08 3311 	mls	r3, r8, r1, r3
 8000c86:	b2a4      	uxth	r4, r4
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb01 f307 	mul.w	r3, r1, r7
 8000c90:	42a3      	cmp	r3, r4
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x272>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c9c:	d213      	bcs.n	8000cc6 <__udivmoddi4+0x292>
 8000c9e:	42a3      	cmp	r3, r4
 8000ca0:	d911      	bls.n	8000cc6 <__udivmoddi4+0x292>
 8000ca2:	3902      	subs	r1, #2
 8000ca4:	4464      	add	r4, ip
 8000ca6:	1ae4      	subs	r4, r4, r3
 8000ca8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cac:	e73b      	b.n	8000b26 <__udivmoddi4+0xf2>
 8000cae:	4604      	mov	r4, r0
 8000cb0:	e6f2      	b.n	8000a98 <__udivmoddi4+0x64>
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e708      	b.n	8000ac8 <__udivmoddi4+0x94>
 8000cb6:	45c2      	cmp	sl, r8
 8000cb8:	d2af      	bcs.n	8000c1a <__udivmoddi4+0x1e6>
 8000cba:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cbe:	eb63 060c 	sbc.w	r6, r3, ip
 8000cc2:	3801      	subs	r0, #1
 8000cc4:	e7a9      	b.n	8000c1a <__udivmoddi4+0x1e6>
 8000cc6:	4631      	mov	r1, r6
 8000cc8:	e7ed      	b.n	8000ca6 <__udivmoddi4+0x272>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	e79a      	b.n	8000c04 <__udivmoddi4+0x1d0>
 8000cce:	4630      	mov	r0, r6
 8000cd0:	e7d4      	b.n	8000c7c <__udivmoddi4+0x248>
 8000cd2:	46b0      	mov	r8, r6
 8000cd4:	e781      	b.n	8000bda <__udivmoddi4+0x1a6>
 8000cd6:	4463      	add	r3, ip
 8000cd8:	3802      	subs	r0, #2
 8000cda:	e74f      	b.n	8000b7c <__udivmoddi4+0x148>
 8000cdc:	4606      	mov	r6, r0
 8000cde:	4623      	mov	r3, r4
 8000ce0:	4608      	mov	r0, r1
 8000ce2:	e711      	b.n	8000b08 <__udivmoddi4+0xd4>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	e732      	b.n	8000b50 <__udivmoddi4+0x11c>
 8000cea:	bf00      	nop

08000cec <__aeabi_idiv0>:
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop

08000cf0 <allRelaysOpen>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void allRelaysOpen() {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(HVC_POS_PORT, HVC_POS_Pin, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	4810      	ldr	r0, [pc, #64]	@ (8000d3c <allRelaysOpen+0x4c>)
 8000cfa:	f001 fc16 	bl	800252a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(HVC_NEG_PORT, HVC_NEG_Pin, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2102      	movs	r1, #2
 8000d02:	480e      	ldr	r0, [pc, #56]	@ (8000d3c <allRelaysOpen+0x4c>)
 8000d04:	f001 fc11 	bl	800252a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(HVC_POS_PORT, HVC_POS_Pin, GPIO_PIN_RESET);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	480b      	ldr	r0, [pc, #44]	@ (8000d3c <allRelaysOpen+0x4c>)
 8000d0e:	f001 fc0c 	bl	800252a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CHARGE_NEG_PORT, CHARGE_NEG_Pin, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2110      	movs	r1, #16
 8000d16:	4809      	ldr	r0, [pc, #36]	@ (8000d3c <allRelaysOpen+0x4c>)
 8000d18:	f001 fc07 	bl	800252a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CHARGE_POS_PORT, CHARGE_POS_Pin, GPIO_PIN_RESET);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2108      	movs	r1, #8
 8000d20:	4806      	ldr	r0, [pc, #24]	@ (8000d3c <allRelaysOpen+0x4c>)
 8000d22:	f001 fc02 	bl	800252a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PUMP_ENABLE_PORT, PUMP_ENABLE_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2180      	movs	r1, #128	@ 0x80
 8000d2a:	4804      	ldr	r0, [pc, #16]	@ (8000d3c <allRelaysOpen+0x4c>)
 8000d2c:	f001 fbfd 	bl	800252a <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000d30:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d34:	f000 fc96 	bl	8001664 <HAL_Delay>
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40020800 	.word	0x40020800

08000d40 <Reading_Pin>:
	 HAL_GPIO_ReadPin(R1_AUX_PORT, R1_AUX_Pin);
	 HAL_GPIO_ReadPin(R2_AUX_PORT, R2_AUX_Pin);
	HAL_GPIO_ReadPin(R3_AUX_PORT, R3_AUX_Pin);
}

int Reading_Pin(char aux_number){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
    int state = 0; // Default state
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
    switch(aux_number){
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	2b68      	cmp	r3, #104	@ 0x68
 8000d52:	d063      	beq.n	8000e1c <Reading_Pin+0xdc>
 8000d54:	2b68      	cmp	r3, #104	@ 0x68
 8000d56:	dc68      	bgt.n	8000e2a <Reading_Pin+0xea>
 8000d58:	2b49      	cmp	r3, #73	@ 0x49
 8000d5a:	dc39      	bgt.n	8000dd0 <Reading_Pin+0x90>
 8000d5c:	2b31      	cmp	r3, #49	@ 0x31
 8000d5e:	db64      	blt.n	8000e2a <Reading_Pin+0xea>
 8000d60:	3b31      	subs	r3, #49	@ 0x31
 8000d62:	2b18      	cmp	r3, #24
 8000d64:	d861      	bhi.n	8000e2a <Reading_Pin+0xea>
 8000d66:	a201      	add	r2, pc, #4	@ (adr r2, 8000d6c <Reading_Pin+0x2c>)
 8000d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d6c:	08000dd7 	.word	0x08000dd7
 8000d70:	08000de5 	.word	0x08000de5
 8000d74:	08000df3 	.word	0x08000df3
 8000d78:	08000e2b 	.word	0x08000e2b
 8000d7c:	08000e2b 	.word	0x08000e2b
 8000d80:	08000e2b 	.word	0x08000e2b
 8000d84:	08000e2b 	.word	0x08000e2b
 8000d88:	08000e2b 	.word	0x08000e2b
 8000d8c:	08000e2b 	.word	0x08000e2b
 8000d90:	08000e2b 	.word	0x08000e2b
 8000d94:	08000e2b 	.word	0x08000e2b
 8000d98:	08000e2b 	.word	0x08000e2b
 8000d9c:	08000e2b 	.word	0x08000e2b
 8000da0:	08000e2b 	.word	0x08000e2b
 8000da4:	08000e2b 	.word	0x08000e2b
 8000da8:	08000e2b 	.word	0x08000e2b
 8000dac:	08000e2b 	.word	0x08000e2b
 8000db0:	08000e2b 	.word	0x08000e2b
 8000db4:	08000e2b 	.word	0x08000e2b
 8000db8:	08000e2b 	.word	0x08000e2b
 8000dbc:	08000e2b 	.word	0x08000e2b
 8000dc0:	08000e2b 	.word	0x08000e2b
 8000dc4:	08000e2b 	.word	0x08000e2b
 8000dc8:	08000e2b 	.word	0x08000e2b
 8000dcc:	08000e01 	.word	0x08000e01
 8000dd0:	2b63      	cmp	r3, #99	@ 0x63
 8000dd2:	d01c      	beq.n	8000e0e <Reading_Pin+0xce>
 8000dd4:	e029      	b.n	8000e2a <Reading_Pin+0xea>
        case '1':
            state = HAL_GPIO_ReadPin(R1_AUX_PORT, R1_AUX_Pin);
 8000dd6:	2110      	movs	r1, #16
 8000dd8:	4818      	ldr	r0, [pc, #96]	@ (8000e3c <Reading_Pin+0xfc>)
 8000dda:	f001 fb8f 	bl	80024fc <HAL_GPIO_ReadPin>
 8000dde:	4603      	mov	r3, r0
 8000de0:	60fb      	str	r3, [r7, #12]
            break;
 8000de2:	e026      	b.n	8000e32 <Reading_Pin+0xf2>
        case '2':
            state = HAL_GPIO_ReadPin(R2_AUX_PORT, R2_AUX_Pin);
 8000de4:	2120      	movs	r1, #32
 8000de6:	4815      	ldr	r0, [pc, #84]	@ (8000e3c <Reading_Pin+0xfc>)
 8000de8:	f001 fb88 	bl	80024fc <HAL_GPIO_ReadPin>
 8000dec:	4603      	mov	r3, r0
 8000dee:	60fb      	str	r3, [r7, #12]
            break;
 8000df0:	e01f      	b.n	8000e32 <Reading_Pin+0xf2>
        case '3':
            state = HAL_GPIO_ReadPin(R3_AUX_PORT, R3_AUX_Pin);
 8000df2:	2140      	movs	r1, #64	@ 0x40
 8000df4:	4811      	ldr	r0, [pc, #68]	@ (8000e3c <Reading_Pin+0xfc>)
 8000df6:	f001 fb81 	bl	80024fc <HAL_GPIO_ReadPin>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	60fb      	str	r3, [r7, #12]
            break;
 8000dfe:	e018      	b.n	8000e32 <Reading_Pin+0xf2>
        case 'I':
            state =HAL_GPIO_ReadPin(IGNITION_PORT, IGNITION_Pin);
 8000e00:	2120      	movs	r1, #32
 8000e02:	480f      	ldr	r0, [pc, #60]	@ (8000e40 <Reading_Pin+0x100>)
 8000e04:	f001 fb7a 	bl	80024fc <HAL_GPIO_ReadPin>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	60fb      	str	r3, [r7, #12]
            break;
 8000e0c:	e011      	b.n	8000e32 <Reading_Pin+0xf2>
        case 'c':
            state = HAL_GPIO_ReadPin(CHARGE_ENABLE_PORT, CHARGE_ENABLE_Pin);
 8000e0e:	2140      	movs	r1, #64	@ 0x40
 8000e10:	480b      	ldr	r0, [pc, #44]	@ (8000e40 <Reading_Pin+0x100>)
 8000e12:	f001 fb73 	bl	80024fc <HAL_GPIO_ReadPin>
 8000e16:	4603      	mov	r3, r0
 8000e18:	60fb      	str	r3, [r7, #12]
            break;
 8000e1a:	e00a      	b.n	8000e32 <Reading_Pin+0xf2>
        case 'h':
            state = HAL_GPIO_ReadPin(HV_SENSE_GPIO_Port, HV_SENSE_Pin);
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	4809      	ldr	r0, [pc, #36]	@ (8000e44 <Reading_Pin+0x104>)
 8000e20:	f001 fb6c 	bl	80024fc <HAL_GPIO_ReadPin>
 8000e24:	4603      	mov	r3, r0
 8000e26:	60fb      	str	r3, [r7, #12]
            break;
 8000e28:	e003      	b.n	8000e32 <Reading_Pin+0xf2>
        default:
            state = -1; // Indicate an invalid aux_number
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2e:	60fb      	str	r3, [r7, #12]
            break;
 8000e30:	bf00      	nop
    }
    return state;
 8000e32:	68fb      	ldr	r3, [r7, #12]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40020400 	.word	0x40020400
 8000e40:	40020800 	.word	0x40020800
 8000e44:	40020000 	.word	0x40020000

08000e48 <Read_ADC_Voltage.0>:
int main(void)
{

  /* USER CODE BEGIN 1 */
	//
	float Read_ADC_Voltage(void) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	f8c7 c004 	str.w	ip, [r7, #4]
		uint32_t hv_sense_value;
		float hv_sense_voltage;
	    // Start the ADC
	    HAL_ADC_Start(&hadc1);
 8000e52:	481b      	ldr	r0, [pc, #108]	@ (8000ec0 <Read_ADC_Voltage.0+0x78>)
 8000e54:	f000 fc6e 	bl	8001734 <HAL_ADC_Start>

	    // Poll for conversion completion with a timeout of 10ms
	    if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 8000e58:	2164      	movs	r1, #100	@ 0x64
 8000e5a:	4819      	ldr	r0, [pc, #100]	@ (8000ec0 <Read_ADC_Voltage.0+0x78>)
 8000e5c:	f000 fd1a 	bl	8001894 <HAL_ADC_PollForConversion>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d11e      	bne.n	8000ea4 <Read_ADC_Voltage.0+0x5c>
	        // Get the converted value
	    	hv_sense_value = HAL_ADC_GetValue(&hadc1);
 8000e66:	4816      	ldr	r0, [pc, #88]	@ (8000ec0 <Read_ADC_Voltage.0+0x78>)
 8000e68:	f000 fd98 	bl	800199c <HAL_ADC_GetValue>
 8000e6c:	60f8      	str	r0, [r7, #12]
	    	hv_sense_voltage = (hv_sense_value / 4095.0) * 103.6;
 8000e6e:	68f8      	ldr	r0, [r7, #12]
 8000e70:	f7ff faec 	bl	800044c <__aeabi_ui2d>
 8000e74:	a30e      	add	r3, pc, #56	@ (adr r3, 8000eb0 <Read_ADC_Voltage.0+0x68>)
 8000e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7a:	f7ff fc8b 	bl	8000794 <__aeabi_ddiv>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	460b      	mov	r3, r1
 8000e82:	4610      	mov	r0, r2
 8000e84:	4619      	mov	r1, r3
 8000e86:	a30c      	add	r3, pc, #48	@ (adr r3, 8000eb8 <Read_ADC_Voltage.0+0x70>)
 8000e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8c:	f7ff fb58 	bl	8000540 <__aeabi_dmul>
 8000e90:	4602      	mov	r2, r0
 8000e92:	460b      	mov	r3, r1
 8000e94:	4610      	mov	r0, r2
 8000e96:	4619      	mov	r1, r3
 8000e98:	f7ff fd64 	bl	8000964 <__aeabi_d2f>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	60bb      	str	r3, [r7, #8]
	    	return hv_sense_voltage;
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	e001      	b.n	8000ea8 <Read_ADC_Voltage.0+0x60>
	    }

	    // Return 0 or some error code if reading fails
	    return 0;
 8000ea4:	f04f 0300 	mov.w	r3, #0
	}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	00000000 	.word	0x00000000
 8000eb4:	40affe00 	.word	0x40affe00
 8000eb8:	66666666 	.word	0x66666666
 8000ebc:	4059e666 	.word	0x4059e666
 8000ec0:	20000028 	.word	0x20000028

08000ec4 <main>:
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
int main(void)
 8000eca:	f107 0318 	add.w	r3, r7, #24
 8000ece:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed0:	f000 fb5a 	bl	8001588 <HAL_Init>
  //voltage = (adc_value / 4095.0) * 3.3
  //printf("HV Sense Voltage: %lu\r\n", hv_sense_value)
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed4:	f000 f868 	bl	8000fa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed8:	f000 f96a 	bl	80011b0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000edc:	f000 f932 	bl	8001144 <MX_SPI1_Init>
  MX_CAN1_Init();
 8000ee0:	f000 f8fc 	bl	80010dc <MX_CAN1_Init>
  MX_ADC1_Init();
 8000ee4:	f000 f8a8 	bl	8001038 <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //voltage = (adc_value / 4095.0) * 3.3
	  float hv_sense_voltage = Read_ADC_Voltage();
 8000ee8:	1d3b      	adds	r3, r7, #4
 8000eea:	469c      	mov	ip, r3
 8000eec:	f7ff ffac 	bl	8000e48 <Read_ADC_Voltage.0>
 8000ef0:	60b8      	str	r0, [r7, #8]
	  int operation = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (Reading_Pin('I') == 1 && operation == 0)
 8000ef6:	2049      	movs	r0, #73	@ 0x49
 8000ef8:	f7ff ff22 	bl	8000d40 <Reading_Pin>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d123      	bne.n	8000f4a <main+0x86>
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d120      	bne.n	8000f4a <main+0x86>
	  {
		  allRelaysOpen();
 8000f08:	f7ff fef2 	bl	8000cf0 <allRelaysOpen>
		  operation = 1;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	60fb      	str	r3, [r7, #12]
		  HAL_GPIO_WritePin(HVC_NEG_PORT, HVC_NEG_Pin, GPIO_PIN_SET);
 8000f10:	2201      	movs	r2, #1
 8000f12:	2102      	movs	r1, #2
 8000f14:	4822      	ldr	r0, [pc, #136]	@ (8000fa0 <main+0xdc>)
 8000f16:	f001 fb08 	bl	800252a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(P_CHARGE_PORT, P_CHARGE_Pin, GPIO_PIN_SET);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	2104      	movs	r1, #4
 8000f1e:	4820      	ldr	r0, [pc, #128]	@ (8000fa0 <main+0xdc>)
 8000f20:	f001 fb03 	bl	800252a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(PUMP_ENABLE_PORT, PUMP_ENABLE_Pin, GPIO_PIN_SET);
 8000f24:	2201      	movs	r2, #1
 8000f26:	2180      	movs	r1, #128	@ 0x80
 8000f28:	481d      	ldr	r0, [pc, #116]	@ (8000fa0 <main+0xdc>)
 8000f2a:	f001 fafe 	bl	800252a <HAL_GPIO_WritePin>
		   * voltage from canbus and if it is greater that 90 PERCENT
		  */


		  //Operation Mode
		  HAL_GPIO_WritePin(HVC_POS_PORT, HVC_POS_Pin, GPIO_PIN_SET);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	2101      	movs	r1, #1
 8000f32:	481b      	ldr	r0, [pc, #108]	@ (8000fa0 <main+0xdc>)
 8000f34:	f001 faf9 	bl	800252a <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 8000f38:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f3c:	f000 fb92 	bl	8001664 <HAL_Delay>
		  //NEED TO DO CHECKING AUX
		  HAL_GPIO_WritePin(P_CHARGE_PORT, P_CHARGE_Pin, GPIO_PIN_RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2104      	movs	r1, #4
 8000f44:	4816      	ldr	r0, [pc, #88]	@ (8000fa0 <main+0xdc>)
 8000f46:	f001 faf0 	bl	800252a <HAL_GPIO_WritePin>
	  }
	  //Discharge
	  if (Reading_Pin('I') == 0 && operation == 1 )
 8000f4a:	2049      	movs	r0, #73	@ 0x49
 8000f4c:	f7ff fef8 	bl	8000d40 <Reading_Pin>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d110      	bne.n	8000f78 <main+0xb4>
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d10d      	bne.n	8000f78 <main+0xb4>
		  {
		  HAL_Delay(30000); // 30 second delay
 8000f5c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8000f60:	f000 fb80 	bl	8001664 <HAL_Delay>
		  HAL_GPIO_WritePin(CTRL_OK_GPIO_Port, CTRL_OK_Pin, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f6a:	480e      	ldr	r0, [pc, #56]	@ (8000fa4 <main+0xe0>)
 8000f6c:	f001 fadd 	bl	800252a <HAL_GPIO_WritePin>
		  allRelaysOpen();
 8000f70:	f7ff febe 	bl	8000cf0 <allRelaysOpen>
		  operation = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60fb      	str	r3, [r7, #12]

		  }
	  //Charging
	  if (Reading_Pin('c') == 1 )
 8000f78:	2063      	movs	r0, #99	@ 0x63
 8000f7a:	f7ff fee1 	bl	8000d40 <Reading_Pin>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d1b1      	bne.n	8000ee8 <main+0x24>
	  {
		  allRelaysOpen();
 8000f84:	f7ff feb4 	bl	8000cf0 <allRelaysOpen>
		  HAL_GPIO_WritePin(CHARGE_NEG_PORT, CHARGE_NEG_Pin, GPIO_PIN_SET);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2110      	movs	r1, #16
 8000f8c:	4804      	ldr	r0, [pc, #16]	@ (8000fa0 <main+0xdc>)
 8000f8e:	f001 facc 	bl	800252a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(CHARGE_POS_PORT, CHARGE_POS_Pin, GPIO_PIN_SET);
 8000f92:	2201      	movs	r2, #1
 8000f94:	2108      	movs	r1, #8
 8000f96:	4802      	ldr	r0, [pc, #8]	@ (8000fa0 <main+0xdc>)
 8000f98:	f001 fac7 	bl	800252a <HAL_GPIO_WritePin>
  {
 8000f9c:	e7a4      	b.n	8000ee8 <main+0x24>
 8000f9e:	bf00      	nop
 8000fa0:	40020800 	.word	0x40020800
 8000fa4:	40020000 	.word	0x40020000

08000fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b092      	sub	sp, #72	@ 0x48
 8000fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fae:	f107 0318 	add.w	r3, r7, #24
 8000fb2:	2230      	movs	r2, #48	@ 0x30
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 ff5f 	bl	8002e7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
 8000fc8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fd2:	2310      	movs	r3, #16
 8000fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fde:	2308      	movs	r3, #8
 8000fe0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000fe2:	23c0      	movs	r3, #192	@ 0xc0
 8000fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fe6:	2304      	movs	r3, #4
 8000fe8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fea:	2304      	movs	r3, #4
 8000fec:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fee:	f107 0318 	add.w	r3, r7, #24
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f001 fab2 	bl	800255c <HAL_RCC_OscConfig>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000ffe:	f000 f967 	bl	80012d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001002:	230f      	movs	r3, #15
 8001004:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001006:	2302      	movs	r3, #2
 8001008:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800100e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001012:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001014:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001018:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	2103      	movs	r1, #3
 800101e:	4618      	mov	r0, r3
 8001020:	f001 fcf0 	bl	8002a04 <HAL_RCC_ClockConfig>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800102a:	f000 f951 	bl	80012d0 <Error_Handler>
  }
}
 800102e:	bf00      	nop
 8001030:	3748      	adds	r7, #72	@ 0x48
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800103e:	463b      	mov	r3, r7
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800104a:	4b21      	ldr	r3, [pc, #132]	@ (80010d0 <MX_ADC1_Init+0x98>)
 800104c:	4a21      	ldr	r2, [pc, #132]	@ (80010d4 <MX_ADC1_Init+0x9c>)
 800104e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001050:	4b1f      	ldr	r3, [pc, #124]	@ (80010d0 <MX_ADC1_Init+0x98>)
 8001052:	2200      	movs	r2, #0
 8001054:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001056:	4b1e      	ldr	r3, [pc, #120]	@ (80010d0 <MX_ADC1_Init+0x98>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800105c:	4b1c      	ldr	r3, [pc, #112]	@ (80010d0 <MX_ADC1_Init+0x98>)
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001062:	4b1b      	ldr	r3, [pc, #108]	@ (80010d0 <MX_ADC1_Init+0x98>)
 8001064:	2200      	movs	r2, #0
 8001066:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001068:	4b19      	ldr	r3, [pc, #100]	@ (80010d0 <MX_ADC1_Init+0x98>)
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001070:	4b17      	ldr	r3, [pc, #92]	@ (80010d0 <MX_ADC1_Init+0x98>)
 8001072:	2200      	movs	r2, #0
 8001074:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001076:	4b16      	ldr	r3, [pc, #88]	@ (80010d0 <MX_ADC1_Init+0x98>)
 8001078:	4a17      	ldr	r2, [pc, #92]	@ (80010d8 <MX_ADC1_Init+0xa0>)
 800107a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800107c:	4b14      	ldr	r3, [pc, #80]	@ (80010d0 <MX_ADC1_Init+0x98>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001082:	4b13      	ldr	r3, [pc, #76]	@ (80010d0 <MX_ADC1_Init+0x98>)
 8001084:	2201      	movs	r2, #1
 8001086:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001088:	4b11      	ldr	r3, [pc, #68]	@ (80010d0 <MX_ADC1_Init+0x98>)
 800108a:	2200      	movs	r2, #0
 800108c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001090:	4b0f      	ldr	r3, [pc, #60]	@ (80010d0 <MX_ADC1_Init+0x98>)
 8001092:	2201      	movs	r2, #1
 8001094:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001096:	480e      	ldr	r0, [pc, #56]	@ (80010d0 <MX_ADC1_Init+0x98>)
 8001098:	f000 fb08 	bl	80016ac <HAL_ADC_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80010a2:	f000 f915 	bl	80012d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010aa:	2301      	movs	r3, #1
 80010ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b2:	463b      	mov	r3, r7
 80010b4:	4619      	mov	r1, r3
 80010b6:	4806      	ldr	r0, [pc, #24]	@ (80010d0 <MX_ADC1_Init+0x98>)
 80010b8:	f000 fc7c 	bl	80019b4 <HAL_ADC_ConfigChannel>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80010c2:	f000 f905 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000028 	.word	0x20000028
 80010d4:	40012000 	.word	0x40012000
 80010d8:	0f000001 	.word	0x0f000001

080010dc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80010e0:	4b16      	ldr	r3, [pc, #88]	@ (800113c <MX_CAN1_Init+0x60>)
 80010e2:	4a17      	ldr	r2, [pc, #92]	@ (8001140 <MX_CAN1_Init+0x64>)
 80010e4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80010e6:	4b15      	ldr	r3, [pc, #84]	@ (800113c <MX_CAN1_Init+0x60>)
 80010e8:	2210      	movs	r2, #16
 80010ea:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80010ec:	4b13      	ldr	r3, [pc, #76]	@ (800113c <MX_CAN1_Init+0x60>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010f2:	4b12      	ldr	r3, [pc, #72]	@ (800113c <MX_CAN1_Init+0x60>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80010f8:	4b10      	ldr	r3, [pc, #64]	@ (800113c <MX_CAN1_Init+0x60>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80010fe:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <MX_CAN1_Init+0x60>)
 8001100:	2200      	movs	r2, #0
 8001102:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001104:	4b0d      	ldr	r3, [pc, #52]	@ (800113c <MX_CAN1_Init+0x60>)
 8001106:	2200      	movs	r2, #0
 8001108:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800110a:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <MX_CAN1_Init+0x60>)
 800110c:	2200      	movs	r2, #0
 800110e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001110:	4b0a      	ldr	r3, [pc, #40]	@ (800113c <MX_CAN1_Init+0x60>)
 8001112:	2200      	movs	r2, #0
 8001114:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001116:	4b09      	ldr	r3, [pc, #36]	@ (800113c <MX_CAN1_Init+0x60>)
 8001118:	2200      	movs	r2, #0
 800111a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800111c:	4b07      	ldr	r3, [pc, #28]	@ (800113c <MX_CAN1_Init+0x60>)
 800111e:	2200      	movs	r2, #0
 8001120:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001122:	4b06      	ldr	r3, [pc, #24]	@ (800113c <MX_CAN1_Init+0x60>)
 8001124:	2200      	movs	r2, #0
 8001126:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001128:	4804      	ldr	r0, [pc, #16]	@ (800113c <MX_CAN1_Init+0x60>)
 800112a:	f000 fe69 	bl	8001e00 <HAL_CAN_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001134:	f000 f8cc 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000070 	.word	0x20000070
 8001140:	40006400 	.word	0x40006400

08001144 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001148:	4b17      	ldr	r3, [pc, #92]	@ (80011a8 <MX_SPI1_Init+0x64>)
 800114a:	4a18      	ldr	r2, [pc, #96]	@ (80011ac <MX_SPI1_Init+0x68>)
 800114c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800114e:	4b16      	ldr	r3, [pc, #88]	@ (80011a8 <MX_SPI1_Init+0x64>)
 8001150:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001154:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001156:	4b14      	ldr	r3, [pc, #80]	@ (80011a8 <MX_SPI1_Init+0x64>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800115c:	4b12      	ldr	r3, [pc, #72]	@ (80011a8 <MX_SPI1_Init+0x64>)
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001162:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <MX_SPI1_Init+0x64>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001168:	4b0f      	ldr	r3, [pc, #60]	@ (80011a8 <MX_SPI1_Init+0x64>)
 800116a:	2200      	movs	r2, #0
 800116c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800116e:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <MX_SPI1_Init+0x64>)
 8001170:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001174:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001176:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <MX_SPI1_Init+0x64>)
 8001178:	2200      	movs	r2, #0
 800117a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800117c:	4b0a      	ldr	r3, [pc, #40]	@ (80011a8 <MX_SPI1_Init+0x64>)
 800117e:	2200      	movs	r2, #0
 8001180:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001182:	4b09      	ldr	r3, [pc, #36]	@ (80011a8 <MX_SPI1_Init+0x64>)
 8001184:	2200      	movs	r2, #0
 8001186:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001188:	4b07      	ldr	r3, [pc, #28]	@ (80011a8 <MX_SPI1_Init+0x64>)
 800118a:	2200      	movs	r2, #0
 800118c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800118e:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <MX_SPI1_Init+0x64>)
 8001190:	220a      	movs	r2, #10
 8001192:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001194:	4804      	ldr	r0, [pc, #16]	@ (80011a8 <MX_SPI1_Init+0x64>)
 8001196:	f001 fde7 	bl	8002d68 <HAL_SPI_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011a0:	f000 f896 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000098 	.word	0x20000098
 80011ac:	40013000 	.word	0x40013000

080011b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b6:	f107 030c 	add.w	r3, r7, #12
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	4b3d      	ldr	r3, [pc, #244]	@ (80012c0 <MX_GPIO_Init+0x110>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	4a3c      	ldr	r2, [pc, #240]	@ (80012c0 <MX_GPIO_Init+0x110>)
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d6:	4b3a      	ldr	r3, [pc, #232]	@ (80012c0 <MX_GPIO_Init+0x110>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	f003 0304 	and.w	r3, r3, #4
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	4b36      	ldr	r3, [pc, #216]	@ (80012c0 <MX_GPIO_Init+0x110>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	4a35      	ldr	r2, [pc, #212]	@ (80012c0 <MX_GPIO_Init+0x110>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f2:	4b33      	ldr	r3, [pc, #204]	@ (80012c0 <MX_GPIO_Init+0x110>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	603b      	str	r3, [r7, #0]
 8001202:	4b2f      	ldr	r3, [pc, #188]	@ (80012c0 <MX_GPIO_Init+0x110>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	4a2e      	ldr	r2, [pc, #184]	@ (80012c0 <MX_GPIO_Init+0x110>)
 8001208:	f043 0302 	orr.w	r3, r3, #2
 800120c:	6313      	str	r3, [r2, #48]	@ 0x30
 800120e:	4b2c      	ldr	r3, [pc, #176]	@ (80012c0 <MX_GPIO_Init+0x110>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, HVC_POS_Pin|HVC_NEG_Pin|P_CHARGE_Pin|CHARGE_POS_Pin
 800121a:	2200      	movs	r2, #0
 800121c:	219f      	movs	r1, #159	@ 0x9f
 800121e:	4829      	ldr	r0, [pc, #164]	@ (80012c4 <MX_GPIO_Init+0x114>)
 8001220:	f001 f983 	bl	800252a <HAL_GPIO_WritePin>
                          |CHARGE_NEG_Pin|PUMP_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTRL_OK_GPIO_Port, CTRL_OK_Pin, GPIO_PIN_RESET);
 8001224:	2200      	movs	r2, #0
 8001226:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800122a:	4827      	ldr	r0, [pc, #156]	@ (80012c8 <MX_GPIO_Init+0x118>)
 800122c:	f001 f97d 	bl	800252a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IMD_IO_L_Pin IGNITION_Pin CHARGE_ENABLE_Pin IMD_IO_H_Pin */
  GPIO_InitStruct.Pin = IMD_IO_L_Pin|IGNITION_Pin|CHARGE_ENABLE_Pin|IMD_IO_H_Pin;
 8001230:	f243 0360 	movw	r3, #12384	@ 0x3060
 8001234:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800123e:	f107 030c 	add.w	r3, r7, #12
 8001242:	4619      	mov	r1, r3
 8001244:	481f      	ldr	r0, [pc, #124]	@ (80012c4 <MX_GPIO_Init+0x114>)
 8001246:	f000 ffbb 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HVC_POS_Pin HVC_NEG_Pin P_CHARGE_Pin CHARGE_POS_Pin
                           CHARGE_NEG_Pin PUMP_ENABLE_Pin */
  GPIO_InitStruct.Pin = HVC_POS_Pin|HVC_NEG_Pin|P_CHARGE_Pin|CHARGE_POS_Pin
 800124a:	239f      	movs	r3, #159	@ 0x9f
 800124c:	60fb      	str	r3, [r7, #12]
                          |CHARGE_NEG_Pin|PUMP_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124e:	2301      	movs	r3, #1
 8001250:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800125a:	f107 030c 	add.w	r3, r7, #12
 800125e:	4619      	mov	r1, r3
 8001260:	4818      	ldr	r0, [pc, #96]	@ (80012c4 <MX_GPIO_Init+0x114>)
 8001262:	f000 ffad 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BMS_INPUT1_Pin BMS_INPUT2_Pin BMS_INPUT3_Pin SHDWN_ST_Pin */
  GPIO_InitStruct.Pin = BMS_INPUT1_Pin|BMS_INPUT2_Pin|BMS_INPUT3_Pin|SHDWN_ST_Pin;
 8001266:	f240 230e 	movw	r3, #526	@ 0x20e
 800126a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800126c:	2300      	movs	r3, #0
 800126e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	4619      	mov	r1, r3
 800127a:	4813      	ldr	r0, [pc, #76]	@ (80012c8 <MX_GPIO_Init+0x118>)
 800127c:	f000 ffa0 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BMS_OK_L_Pin IMD_OK_L_Pin R1_AUX_Pin R2_AUX_Pin
                           R3_AUX_Pin R4_AUX_Pin */
  GPIO_InitStruct.Pin = BMS_OK_L_Pin|IMD_OK_L_Pin|R1_AUX_Pin|R2_AUX_Pin
 8001280:	23f3      	movs	r3, #243	@ 0xf3
 8001282:	60fb      	str	r3, [r7, #12]
                          |R3_AUX_Pin|R4_AUX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001284:	2300      	movs	r3, #0
 8001286:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	4619      	mov	r1, r3
 8001292:	480e      	ldr	r0, [pc, #56]	@ (80012cc <MX_GPIO_Init+0x11c>)
 8001294:	f000 ff94 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTRL_OK_Pin */
  GPIO_InitStruct.Pin = CTRL_OK_Pin;
 8001298:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800129c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129e:	2301      	movs	r3, #1
 80012a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CTRL_OK_GPIO_Port, &GPIO_InitStruct);
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	4619      	mov	r1, r3
 80012b0:	4805      	ldr	r0, [pc, #20]	@ (80012c8 <MX_GPIO_Init+0x118>)
 80012b2:	f000 ff85 	bl	80021c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012b6:	bf00      	nop
 80012b8:	3720      	adds	r7, #32
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40020800 	.word	0x40020800
 80012c8:	40020000 	.word	0x40020000
 80012cc:	40020400 	.word	0x40020400

080012d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d4:	b672      	cpsid	i
}
 80012d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <Error_Handler+0x8>

080012dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001324 <HAL_MspInit+0x48>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001324 <HAL_MspInit+0x48>)
 80012ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001324 <HAL_MspInit+0x48>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	603b      	str	r3, [r7, #0]
 8001302:	4b08      	ldr	r3, [pc, #32]	@ (8001324 <HAL_MspInit+0x48>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001306:	4a07      	ldr	r2, [pc, #28]	@ (8001324 <HAL_MspInit+0x48>)
 8001308:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800130c:	6413      	str	r3, [r2, #64]	@ 0x40
 800130e:	4b05      	ldr	r3, [pc, #20]	@ (8001324 <HAL_MspInit+0x48>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001316:	603b      	str	r3, [r7, #0]
 8001318:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	40023800 	.word	0x40023800

08001328 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	@ 0x28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a17      	ldr	r2, [pc, #92]	@ (80013a4 <HAL_ADC_MspInit+0x7c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d127      	bne.n	800139a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <HAL_ADC_MspInit+0x80>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001352:	4a15      	ldr	r2, [pc, #84]	@ (80013a8 <HAL_ADC_MspInit+0x80>)
 8001354:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001358:	6453      	str	r3, [r2, #68]	@ 0x44
 800135a:	4b13      	ldr	r3, [pc, #76]	@ (80013a8 <HAL_ADC_MspInit+0x80>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800135e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	4b0f      	ldr	r3, [pc, #60]	@ (80013a8 <HAL_ADC_MspInit+0x80>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	4a0e      	ldr	r2, [pc, #56]	@ (80013a8 <HAL_ADC_MspInit+0x80>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6313      	str	r3, [r2, #48]	@ 0x30
 8001376:	4b0c      	ldr	r3, [pc, #48]	@ (80013a8 <HAL_ADC_MspInit+0x80>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = HV_SENSE_Pin;
 8001382:	2301      	movs	r3, #1
 8001384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001386:	2303      	movs	r3, #3
 8001388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(HV_SENSE_GPIO_Port, &GPIO_InitStruct);
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4619      	mov	r1, r3
 8001394:	4805      	ldr	r0, [pc, #20]	@ (80013ac <HAL_ADC_MspInit+0x84>)
 8001396:	f000 ff13 	bl	80021c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800139a:	bf00      	nop
 800139c:	3728      	adds	r7, #40	@ 0x28
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40012000 	.word	0x40012000
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40020000 	.word	0x40020000

080013b0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08a      	sub	sp, #40	@ 0x28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a19      	ldr	r2, [pc, #100]	@ (8001434 <HAL_CAN_MspInit+0x84>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d12c      	bne.n	800142c <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	4b18      	ldr	r3, [pc, #96]	@ (8001438 <HAL_CAN_MspInit+0x88>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013da:	4a17      	ldr	r2, [pc, #92]	@ (8001438 <HAL_CAN_MspInit+0x88>)
 80013dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013e2:	4b15      	ldr	r3, [pc, #84]	@ (8001438 <HAL_CAN_MspInit+0x88>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	4b11      	ldr	r3, [pc, #68]	@ (8001438 <HAL_CAN_MspInit+0x88>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	4a10      	ldr	r2, [pc, #64]	@ (8001438 <HAL_CAN_MspInit+0x88>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001438 <HAL_CAN_MspInit+0x88>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800140a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800140e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001410:	2302      	movs	r3, #2
 8001412:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001418:	2303      	movs	r3, #3
 800141a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800141c:	2309      	movs	r3, #9
 800141e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4619      	mov	r1, r3
 8001426:	4805      	ldr	r0, [pc, #20]	@ (800143c <HAL_CAN_MspInit+0x8c>)
 8001428:	f000 feca 	bl	80021c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800142c:	bf00      	nop
 800142e:	3728      	adds	r7, #40	@ 0x28
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40006400 	.word	0x40006400
 8001438:	40023800 	.word	0x40023800
 800143c:	40020000 	.word	0x40020000

08001440 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08a      	sub	sp, #40	@ 0x28
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a19      	ldr	r2, [pc, #100]	@ (80014c4 <HAL_SPI_MspInit+0x84>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d12b      	bne.n	80014ba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	4b18      	ldr	r3, [pc, #96]	@ (80014c8 <HAL_SPI_MspInit+0x88>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146a:	4a17      	ldr	r2, [pc, #92]	@ (80014c8 <HAL_SPI_MspInit+0x88>)
 800146c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001470:	6453      	str	r3, [r2, #68]	@ 0x44
 8001472:	4b15      	ldr	r3, [pc, #84]	@ (80014c8 <HAL_SPI_MspInit+0x88>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001476:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	4b11      	ldr	r3, [pc, #68]	@ (80014c8 <HAL_SPI_MspInit+0x88>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	4a10      	ldr	r2, [pc, #64]	@ (80014c8 <HAL_SPI_MspInit+0x88>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6313      	str	r3, [r2, #48]	@ 0x30
 800148e:	4b0e      	ldr	r3, [pc, #56]	@ (80014c8 <HAL_SPI_MspInit+0x88>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800149a:	23f0      	movs	r3, #240	@ 0xf0
 800149c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149e:	2302      	movs	r3, #2
 80014a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a6:	2303      	movs	r3, #3
 80014a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014aa:	2305      	movs	r3, #5
 80014ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	@ (80014cc <HAL_SPI_MspInit+0x8c>)
 80014b6:	f000 fe83 	bl	80021c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014ba:	bf00      	nop
 80014bc:	3728      	adds	r7, #40	@ 0x28
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40013000 	.word	0x40013000
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40020000 	.word	0x40020000

080014d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <NMI_Handler+0x4>

080014d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <HardFault_Handler+0x4>

080014e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <MemManage_Handler+0x4>

080014e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ec:	bf00      	nop
 80014ee:	e7fd      	b.n	80014ec <BusFault_Handler+0x4>

080014f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <UsageFault_Handler+0x4>

080014f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr

08001504 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr

08001510 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr

0800151c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001520:	f000 f884 	bl	800162c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}

08001528 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr

08001534 <Reset_Handler>:
 8001534:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800156c <LoopFillZerobss+0xe>
 8001538:	f7ff fff6 	bl	8001528 <SystemInit>
 800153c:	480c      	ldr	r0, [pc, #48]	@ (8001570 <LoopFillZerobss+0x12>)
 800153e:	490d      	ldr	r1, [pc, #52]	@ (8001574 <LoopFillZerobss+0x16>)
 8001540:	4a0d      	ldr	r2, [pc, #52]	@ (8001578 <LoopFillZerobss+0x1a>)
 8001542:	2300      	movs	r3, #0
 8001544:	e002      	b.n	800154c <LoopCopyDataInit>

08001546 <CopyDataInit>:
 8001546:	58d4      	ldr	r4, [r2, r3]
 8001548:	50c4      	str	r4, [r0, r3]
 800154a:	3304      	adds	r3, #4

0800154c <LoopCopyDataInit>:
 800154c:	18c4      	adds	r4, r0, r3
 800154e:	428c      	cmp	r4, r1
 8001550:	d3f9      	bcc.n	8001546 <CopyDataInit>
 8001552:	4a0a      	ldr	r2, [pc, #40]	@ (800157c <LoopFillZerobss+0x1e>)
 8001554:	4c0a      	ldr	r4, [pc, #40]	@ (8001580 <LoopFillZerobss+0x22>)
 8001556:	2300      	movs	r3, #0
 8001558:	e001      	b.n	800155e <LoopFillZerobss>

0800155a <FillZerobss>:
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	3204      	adds	r2, #4

0800155e <LoopFillZerobss>:
 800155e:	42a2      	cmp	r2, r4
 8001560:	d3fb      	bcc.n	800155a <FillZerobss>
 8001562:	f001 fc93 	bl	8002e8c <__libc_init_array>
 8001566:	f7ff fcad 	bl	8000ec4 <main>
 800156a:	4770      	bx	lr
 800156c:	2000c000 	.word	0x2000c000
 8001570:	20000000 	.word	0x20000000
 8001574:	2000000c 	.word	0x2000000c
 8001578:	08002f0c 	.word	0x08002f0c
 800157c:	2000000c 	.word	0x2000000c
 8001580:	200000f4 	.word	0x200000f4

08001584 <ADC_IRQHandler>:
 8001584:	e7fe      	b.n	8001584 <ADC_IRQHandler>
	...

08001588 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800158c:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <HAL_Init+0x40>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a0d      	ldr	r2, [pc, #52]	@ (80015c8 <HAL_Init+0x40>)
 8001592:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001596:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001598:	4b0b      	ldr	r3, [pc, #44]	@ (80015c8 <HAL_Init+0x40>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a0a      	ldr	r2, [pc, #40]	@ (80015c8 <HAL_Init+0x40>)
 800159e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015a4:	4b08      	ldr	r3, [pc, #32]	@ (80015c8 <HAL_Init+0x40>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a07      	ldr	r2, [pc, #28]	@ (80015c8 <HAL_Init+0x40>)
 80015aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b0:	2003      	movs	r0, #3
 80015b2:	f000 fdd1 	bl	8002158 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015b6:	200f      	movs	r0, #15
 80015b8:	f000 f808 	bl	80015cc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80015bc:	f7ff fe8e 	bl	80012dc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40023c00 	.word	0x40023c00

080015cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015d4:	4b12      	ldr	r3, [pc, #72]	@ (8001620 <HAL_InitTick+0x54>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b12      	ldr	r3, [pc, #72]	@ (8001624 <HAL_InitTick+0x58>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4619      	mov	r1, r3
 80015de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 fddb 	bl	80021a6 <HAL_SYSTICK_Config>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e00e      	b.n	8001618 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b0f      	cmp	r3, #15
 80015fe:	d80a      	bhi.n	8001616 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001600:	2200      	movs	r2, #0
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	f04f 30ff 	mov.w	r0, #4294967295
 8001608:	f000 fdb1 	bl	800216e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800160c:	4a06      	ldr	r2, [pc, #24]	@ (8001628 <HAL_InitTick+0x5c>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	e000      	b.n	8001618 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
}
 8001618:	4618      	mov	r0, r3
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000000 	.word	0x20000000
 8001624:	20000008 	.word	0x20000008
 8001628:	20000004 	.word	0x20000004

0800162c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001630:	4b05      	ldr	r3, [pc, #20]	@ (8001648 <HAL_IncTick+0x1c>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	461a      	mov	r2, r3
 8001636:	4b05      	ldr	r3, [pc, #20]	@ (800164c <HAL_IncTick+0x20>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4413      	add	r3, r2
 800163c:	4a03      	ldr	r2, [pc, #12]	@ (800164c <HAL_IncTick+0x20>)
 800163e:	6013      	str	r3, [r2, #0]
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	20000008 	.word	0x20000008
 800164c:	200000f0 	.word	0x200000f0

08001650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return uwTick;
 8001654:	4b02      	ldr	r3, [pc, #8]	@ (8001660 <HAL_GetTick+0x10>)
 8001656:	681b      	ldr	r3, [r3, #0]
}
 8001658:	4618      	mov	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr
 8001660:	200000f0 	.word	0x200000f0

08001664 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800166c:	f7ff fff0 	bl	8001650 <HAL_GetTick>
 8001670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800167c:	d005      	beq.n	800168a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800167e:	4b0a      	ldr	r3, [pc, #40]	@ (80016a8 <HAL_Delay+0x44>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4413      	add	r3, r2
 8001688:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800168a:	bf00      	nop
 800168c:	f7ff ffe0 	bl	8001650 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	429a      	cmp	r2, r3
 800169a:	d8f7      	bhi.n	800168c <HAL_Delay+0x28>
  {
  }
}
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000008 	.word	0x20000008

080016ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016b4:	2300      	movs	r3, #0
 80016b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e033      	b.n	800172a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d109      	bne.n	80016de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff fe2c 	bl	8001328 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e2:	f003 0310 	and.w	r3, r3, #16
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d118      	bne.n	800171c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ee:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80016f2:	f023 0302 	bic.w	r3, r3, #2
 80016f6:	f043 0202 	orr.w	r2, r3, #2
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 fa78 	bl	8001bf4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170e:	f023 0303 	bic.w	r3, r3, #3
 8001712:	f043 0201 	orr.w	r2, r3, #1
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	641a      	str	r2, [r3, #64]	@ 0x40
 800171a:	e001      	b.n	8001720 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001728:	7bfb      	ldrb	r3, [r7, #15]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001746:	2b01      	cmp	r3, #1
 8001748:	d101      	bne.n	800174e <HAL_ADC_Start+0x1a>
 800174a:	2302      	movs	r3, #2
 800174c:	e095      	b.n	800187a <HAL_ADC_Start+0x146>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2201      	movs	r2, #1
 8001752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	2b01      	cmp	r3, #1
 8001762:	d018      	beq.n	8001796 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f042 0201 	orr.w	r2, r2, #1
 8001772:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001774:	4b43      	ldr	r3, [pc, #268]	@ (8001884 <HAL_ADC_Start+0x150>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a43      	ldr	r2, [pc, #268]	@ (8001888 <HAL_ADC_Start+0x154>)
 800177a:	fba2 2303 	umull	r2, r3, r2, r3
 800177e:	0c9a      	lsrs	r2, r3, #18
 8001780:	4613      	mov	r3, r2
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	4413      	add	r3, r2
 8001786:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8001788:	e002      	b.n	8001790 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	3b01      	subs	r3, #1
 800178e:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f9      	bne.n	800178a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d15d      	bne.n	8001860 <HAL_ADC_Start+0x12c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80017ac:	f023 0301 	bic.w	r3, r3, #1
 80017b0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d007      	beq.n	80017d6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ca:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017ce:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017e2:	d106      	bne.n	80017f2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e8:	f023 0206 	bic.w	r2, r3, #6
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	645a      	str	r2, [r3, #68]	@ 0x44
 80017f0:	e002      	b.n	80017f8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001808:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800180a:	4b20      	ldr	r3, [pc, #128]	@ (800188c <HAL_ADC_Start+0x158>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f003 031f 	and.w	r3, r3, #31
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10f      	bne.n	8001836 <HAL_ADC_Start+0x102>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d129      	bne.n	8001878 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	e020      	b.n	8001878 <HAL_ADC_Start+0x144>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a15      	ldr	r2, [pc, #84]	@ (8001890 <HAL_ADC_Start+0x15c>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d11b      	bne.n	8001878 <HAL_ADC_Start+0x144>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d114      	bne.n	8001878 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	e00b      	b.n	8001878 <HAL_ADC_Start+0x144>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001864:	f043 0210 	orr.w	r2, r3, #16
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001870:	f043 0201 	orr.w	r2, r3, #1
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr
 8001884:	20000000 	.word	0x20000000
 8001888:	431bde83 	.word	0x431bde83
 800188c:	40012300 	.word	0x40012300
 8001890:	40012000 	.word	0x40012000

08001894 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018b0:	d113      	bne.n	80018da <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80018bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018c0:	d10b      	bne.n	80018da <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c6:	f043 0220 	orr.w	r2, r3, #32
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e05c      	b.n	8001994 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80018da:	f7ff feb9 	bl	8001650 <HAL_GetTick>
 80018de:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80018e0:	e01a      	b.n	8001918 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e8:	d016      	beq.n	8001918 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d007      	beq.n	8001900 <HAL_ADC_PollForConversion+0x6c>
 80018f0:	f7ff feae 	bl	8001650 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d20b      	bcs.n	8001918 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001904:	f043 0204 	orr.w	r2, r3, #4
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e03d      	b.n	8001994 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b02      	cmp	r3, #2
 8001924:	d1dd      	bne.n	80018e2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f06f 0212 	mvn.w	r2, #18
 800192e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001934:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F2, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d123      	bne.n	8001992 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800194e:	2b00      	cmp	r3, #0
 8001950:	d11f      	bne.n	8001992 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001958:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800195c:	2b00      	cmp	r3, #0
 800195e:	d006      	beq.n	800196e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800196a:	2b00      	cmp	r3, #0
 800196c:	d111      	bne.n	8001992 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001972:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d105      	bne.n	8001992 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198a:	f043 0201 	orr.w	r2, r3, #1
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr

080019b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d101      	bne.n	80019d0 <HAL_ADC_ConfigChannel+0x1c>
 80019cc:	2302      	movs	r3, #2
 80019ce:	e103      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x224>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b09      	cmp	r3, #9
 80019de:	d925      	bls.n	8001a2c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68d9      	ldr	r1, [r3, #12]
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	461a      	mov	r2, r3
 80019ee:	4613      	mov	r3, r2
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	4413      	add	r3, r2
 80019f4:	3b1e      	subs	r3, #30
 80019f6:	2207      	movs	r2, #7
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43da      	mvns	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	400a      	ands	r2, r1
 8001a04:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68d9      	ldr	r1, [r3, #12]
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	4618      	mov	r0, r3
 8001a18:	4603      	mov	r3, r0
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	4403      	add	r3, r0
 8001a1e:	3b1e      	subs	r3, #30
 8001a20:	409a      	lsls	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	e022      	b.n	8001a72 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6919      	ldr	r1, [r3, #16]
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	4413      	add	r3, r2
 8001a40:	2207      	movs	r2, #7
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43da      	mvns	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	400a      	ands	r2, r1
 8001a4e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6919      	ldr	r1, [r3, #16]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	689a      	ldr	r2, [r3, #8]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	4618      	mov	r0, r3
 8001a62:	4603      	mov	r3, r0
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	4403      	add	r3, r0
 8001a68:	409a      	lsls	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b06      	cmp	r3, #6
 8001a78:	d824      	bhi.n	8001ac4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	3b05      	subs	r3, #5
 8001a8c:	221f      	movs	r2, #31
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43da      	mvns	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	400a      	ands	r2, r1
 8001a9a:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	3b05      	subs	r3, #5
 8001ab6:	fa00 f203 	lsl.w	r2, r0, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ac2:	e04c      	b.n	8001b5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b0c      	cmp	r3, #12
 8001aca:	d824      	bhi.n	8001b16 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4413      	add	r3, r2
 8001adc:	3b23      	subs	r3, #35	@ 0x23
 8001ade:	221f      	movs	r2, #31
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43da      	mvns	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	400a      	ands	r2, r1
 8001aec:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	4618      	mov	r0, r3
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	3b23      	subs	r3, #35	@ 0x23
 8001b08:	fa00 f203 	lsl.w	r2, r0, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b14:	e023      	b.n	8001b5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	4613      	mov	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	3b41      	subs	r3, #65	@ 0x41
 8001b28:	221f      	movs	r2, #31
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43da      	mvns	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	400a      	ands	r2, r1
 8001b36:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	4618      	mov	r0, r3
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	3b41      	subs	r3, #65	@ 0x41
 8001b52:	fa00 f203 	lsl.w	r2, r0, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a20      	ldr	r2, [pc, #128]	@ (8001be4 <HAL_ADC_ConfigChannel+0x230>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d109      	bne.n	8001b7c <HAL_ADC_ConfigChannel+0x1c8>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b12      	cmp	r3, #18
 8001b6e:	d105      	bne.n	8001b7c <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001b70:	4b1d      	ldr	r3, [pc, #116]	@ (8001be8 <HAL_ADC_ConfigChannel+0x234>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	4a1c      	ldr	r2, [pc, #112]	@ (8001be8 <HAL_ADC_ConfigChannel+0x234>)
 8001b76:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b7a:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a18      	ldr	r2, [pc, #96]	@ (8001be4 <HAL_ADC_ConfigChannel+0x230>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d123      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x21a>
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2b10      	cmp	r3, #16
 8001b8c:	d003      	beq.n	8001b96 <HAL_ADC_ConfigChannel+0x1e2>
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2b11      	cmp	r3, #17
 8001b94:	d11b      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001b96:	4b14      	ldr	r3, [pc, #80]	@ (8001be8 <HAL_ADC_ConfigChannel+0x234>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	4a13      	ldr	r2, [pc, #76]	@ (8001be8 <HAL_ADC_ConfigChannel+0x234>)
 8001b9c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ba0:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2b10      	cmp	r3, #16
 8001ba8:	d111      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001baa:	4b10      	ldr	r3, [pc, #64]	@ (8001bec <HAL_ADC_ConfigChannel+0x238>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a10      	ldr	r2, [pc, #64]	@ (8001bf0 <HAL_ADC_ConfigChannel+0x23c>)
 8001bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb4:	0c9a      	lsrs	r2, r3, #18
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8001bc0:	e002      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f9      	bne.n	8001bc2 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	40012000 	.word	0x40012000
 8001be8:	40012300 	.word	0x40012300
 8001bec:	20000000 	.word	0x20000000
 8001bf0:	431bde83 	.word	0x431bde83

08001bf4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001bfc:	4b7e      	ldr	r3, [pc, #504]	@ (8001df8 <ADC_Init+0x204>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	4a7d      	ldr	r2, [pc, #500]	@ (8001df8 <ADC_Init+0x204>)
 8001c02:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001c06:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001c08:	4b7b      	ldr	r3, [pc, #492]	@ (8001df8 <ADC_Init+0x204>)
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	4979      	ldr	r1, [pc, #484]	@ (8001df8 <ADC_Init+0x204>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6859      	ldr	r1, [r3, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	021a      	lsls	r2, r3, #8
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	430a      	orrs	r2, r1
 8001c38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001c48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6859      	ldr	r1, [r3, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6899      	ldr	r1, [r3, #8]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68da      	ldr	r2, [r3, #12]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c82:	4a5e      	ldr	r2, [pc, #376]	@ (8001dfc <ADC_Init+0x208>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d022      	beq.n	8001cce <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	689a      	ldr	r2, [r3, #8]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c96:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6899      	ldr	r1, [r3, #8]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001cb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6899      	ldr	r1, [r3, #8]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	e00f      	b.n	8001cee <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001cdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001cec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 0202 	bic.w	r2, r2, #2
 8001cfc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6899      	ldr	r1, [r3, #8]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	7e1b      	ldrb	r3, [r3, #24]
 8001d08:	005a      	lsls	r2, r3, #1
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d027      	beq.n	8001d6c <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d2a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001d3a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d40:	3b01      	subs	r3, #1
 8001d42:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8001d46:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	fa92 f2a2 	rbit	r2, r2
 8001d4e:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d50:	68ba      	ldr	r2, [r7, #8]
 8001d52:	fab2 f282 	clz	r2, r2
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	fa03 f102 	lsl.w	r1, r3, r2
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	e007      	b.n	8001d7c <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d7a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001d8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	051a      	lsls	r2, r3, #20
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001db0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6899      	ldr	r1, [r3, #8]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001dbe:	025a      	lsls	r2, r3, #9
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6899      	ldr	r1, [r3, #8]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	029a      	lsls	r2, r3, #10
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	609a      	str	r2, [r3, #8]
}
 8001dec:	bf00      	nop
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40012300 	.word	0x40012300
 8001dfc:	0f000001 	.word	0x0f000001

08001e00 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e0ed      	b.n	8001fee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d102      	bne.n	8001e24 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff fac6 	bl	80013b0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0201 	orr.w	r2, r2, #1
 8001e32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e34:	f7ff fc0c 	bl	8001650 <HAL_GetTick>
 8001e38:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e3a:	e012      	b.n	8001e62 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e3c:	f7ff fc08 	bl	8001650 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b0a      	cmp	r3, #10
 8001e48:	d90b      	bls.n	8001e62 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2205      	movs	r2, #5
 8001e5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e0c5      	b.n	8001fee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0e5      	beq.n	8001e3c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0202 	bic.w	r2, r2, #2
 8001e7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e80:	f7ff fbe6 	bl	8001650 <HAL_GetTick>
 8001e84:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e86:	e012      	b.n	8001eae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e88:	f7ff fbe2 	bl	8001650 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b0a      	cmp	r3, #10
 8001e94:	d90b      	bls.n	8001eae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2205      	movs	r2, #5
 8001ea6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e09f      	b.n	8001fee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1e5      	bne.n	8001e88 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	7e1b      	ldrb	r3, [r3, #24]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d108      	bne.n	8001ed6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	e007      	b.n	8001ee6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ee4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	7e5b      	ldrb	r3, [r3, #25]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d108      	bne.n	8001f00 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	e007      	b.n	8001f10 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	7e9b      	ldrb	r3, [r3, #26]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d108      	bne.n	8001f2a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0220 	orr.w	r2, r2, #32
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	e007      	b.n	8001f3a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 0220 	bic.w	r2, r2, #32
 8001f38:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	7edb      	ldrb	r3, [r3, #27]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d108      	bne.n	8001f54 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0210 	bic.w	r2, r2, #16
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	e007      	b.n	8001f64 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 0210 	orr.w	r2, r2, #16
 8001f62:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	7f1b      	ldrb	r3, [r3, #28]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d108      	bne.n	8001f7e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 0208 	orr.w	r2, r2, #8
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	e007      	b.n	8001f8e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 0208 	bic.w	r2, r2, #8
 8001f8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	7f5b      	ldrb	r3, [r3, #29]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d108      	bne.n	8001fa8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f042 0204 	orr.w	r2, r2, #4
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	e007      	b.n	8001fb8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f022 0204 	bic.w	r2, r2, #4
 8001fb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	ea42 0103 	orr.w	r1, r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	1e5a      	subs	r2, r3, #1
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002008:	4b0c      	ldr	r3, [pc, #48]	@ (800203c <__NVIC_SetPriorityGrouping+0x44>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800200e:	68ba      	ldr	r2, [r7, #8]
 8002010:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002014:	4013      	ands	r3, r2
 8002016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002020:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002024:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800202a:	4a04      	ldr	r2, [pc, #16]	@ (800203c <__NVIC_SetPriorityGrouping+0x44>)
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	60d3      	str	r3, [r2, #12]
}
 8002030:	bf00      	nop
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002044:	4b04      	ldr	r3, [pc, #16]	@ (8002058 <__NVIC_GetPriorityGrouping+0x18>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	0a1b      	lsrs	r3, r3, #8
 800204a:	f003 0307 	and.w	r3, r3, #7
}
 800204e:	4618      	mov	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	6039      	str	r1, [r7, #0]
 8002066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206c:	2b00      	cmp	r3, #0
 800206e:	db0a      	blt.n	8002086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	b2da      	uxtb	r2, r3
 8002074:	490c      	ldr	r1, [pc, #48]	@ (80020a8 <__NVIC_SetPriority+0x4c>)
 8002076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207a:	0112      	lsls	r2, r2, #4
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	440b      	add	r3, r1
 8002080:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002084:	e00a      	b.n	800209c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	b2da      	uxtb	r2, r3
 800208a:	4908      	ldr	r1, [pc, #32]	@ (80020ac <__NVIC_SetPriority+0x50>)
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	f003 030f 	and.w	r3, r3, #15
 8002092:	3b04      	subs	r3, #4
 8002094:	0112      	lsls	r2, r2, #4
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	440b      	add	r3, r1
 800209a:	761a      	strb	r2, [r3, #24]
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bc80      	pop	{r7}
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	e000e100 	.word	0xe000e100
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b089      	sub	sp, #36	@ 0x24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f1c3 0307 	rsb	r3, r3, #7
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	bf28      	it	cs
 80020ce:	2304      	movcs	r3, #4
 80020d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	3304      	adds	r3, #4
 80020d6:	2b06      	cmp	r3, #6
 80020d8:	d902      	bls.n	80020e0 <NVIC_EncodePriority+0x30>
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	3b03      	subs	r3, #3
 80020de:	e000      	b.n	80020e2 <NVIC_EncodePriority+0x32>
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e4:	f04f 32ff 	mov.w	r2, #4294967295
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43da      	mvns	r2, r3
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	401a      	ands	r2, r3
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020f8:	f04f 31ff 	mov.w	r1, #4294967295
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002102:	43d9      	mvns	r1, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002108:	4313      	orrs	r3, r2
         );
}
 800210a:	4618      	mov	r0, r3
 800210c:	3724      	adds	r7, #36	@ 0x24
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr

08002114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3b01      	subs	r3, #1
 8002120:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002124:	d301      	bcc.n	800212a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002126:	2301      	movs	r3, #1
 8002128:	e00f      	b.n	800214a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800212a:	4a0a      	ldr	r2, [pc, #40]	@ (8002154 <SysTick_Config+0x40>)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3b01      	subs	r3, #1
 8002130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002132:	210f      	movs	r1, #15
 8002134:	f04f 30ff 	mov.w	r0, #4294967295
 8002138:	f7ff ff90 	bl	800205c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800213c:	4b05      	ldr	r3, [pc, #20]	@ (8002154 <SysTick_Config+0x40>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002142:	4b04      	ldr	r3, [pc, #16]	@ (8002154 <SysTick_Config+0x40>)
 8002144:	2207      	movs	r2, #7
 8002146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	e000e010 	.word	0xe000e010

08002158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff ff49 	bl	8001ff8 <__NVIC_SetPriorityGrouping>
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800216e:	b580      	push	{r7, lr}
 8002170:	b086      	sub	sp, #24
 8002172:	af00      	add	r7, sp, #0
 8002174:	4603      	mov	r3, r0
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
 800217a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002180:	f7ff ff5e 	bl	8002040 <__NVIC_GetPriorityGrouping>
 8002184:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68b9      	ldr	r1, [r7, #8]
 800218a:	6978      	ldr	r0, [r7, #20]
 800218c:	f7ff ff90 	bl	80020b0 <NVIC_EncodePriority>
 8002190:	4602      	mov	r2, r0
 8002192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff5f 	bl	800205c <__NVIC_SetPriority>
}
 800219e:	bf00      	nop
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff ffb0 	bl	8002114 <SysTick_Config>
 80021b4:	4603      	mov	r3, r0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
	...

080021c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b087      	sub	sp, #28
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ce:	e16f      	b.n	80024b0 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	2101      	movs	r1, #1
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	fa01 f303 	lsl.w	r3, r1, r3
 80021dc:	4013      	ands	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 8161 	beq.w	80024aa <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 0303 	and.w	r3, r3, #3
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d005      	beq.n	8002200 <HAL_GPIO_Init+0x40>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d130      	bne.n	8002262 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	2203      	movs	r2, #3
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	4013      	ands	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4313      	orrs	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002236:	2201      	movs	r2, #1
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4013      	ands	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	091b      	lsrs	r3, r3, #4
 800224c:	f003 0201 	and.w	r2, r3, #1
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	4313      	orrs	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	2b03      	cmp	r3, #3
 800226c:	d017      	beq.n	800229e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	2203      	movs	r2, #3
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4013      	ands	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4313      	orrs	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d123      	bne.n	80022f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	08da      	lsrs	r2, r3, #3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3208      	adds	r2, #8
 80022b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	220f      	movs	r2, #15
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43db      	mvns	r3, r3
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4013      	ands	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	691a      	ldr	r2, [r3, #16]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	08da      	lsrs	r2, r3, #3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3208      	adds	r2, #8
 80022ec:	6939      	ldr	r1, [r7, #16]
 80022ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	2203      	movs	r2, #3
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43db      	mvns	r3, r3
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4013      	ands	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f003 0203 	and.w	r2, r3, #3
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 80bb 	beq.w	80024aa <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002334:	2300      	movs	r3, #0
 8002336:	60bb      	str	r3, [r7, #8]
 8002338:	4b64      	ldr	r3, [pc, #400]	@ (80024cc <HAL_GPIO_Init+0x30c>)
 800233a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233c:	4a63      	ldr	r2, [pc, #396]	@ (80024cc <HAL_GPIO_Init+0x30c>)
 800233e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002342:	6453      	str	r3, [r2, #68]	@ 0x44
 8002344:	4b61      	ldr	r3, [pc, #388]	@ (80024cc <HAL_GPIO_Init+0x30c>)
 8002346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002348:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800234c:	60bb      	str	r3, [r7, #8]
 800234e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002350:	4a5f      	ldr	r2, [pc, #380]	@ (80024d0 <HAL_GPIO_Init+0x310>)
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	089b      	lsrs	r3, r3, #2
 8002356:	3302      	adds	r3, #2
 8002358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800235c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f003 0303 	and.w	r3, r3, #3
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	220f      	movs	r2, #15
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4013      	ands	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a57      	ldr	r2, [pc, #348]	@ (80024d4 <HAL_GPIO_Init+0x314>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d031      	beq.n	80023e0 <HAL_GPIO_Init+0x220>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a56      	ldr	r2, [pc, #344]	@ (80024d8 <HAL_GPIO_Init+0x318>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d02b      	beq.n	80023dc <HAL_GPIO_Init+0x21c>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a55      	ldr	r2, [pc, #340]	@ (80024dc <HAL_GPIO_Init+0x31c>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d025      	beq.n	80023d8 <HAL_GPIO_Init+0x218>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a54      	ldr	r2, [pc, #336]	@ (80024e0 <HAL_GPIO_Init+0x320>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d01f      	beq.n	80023d4 <HAL_GPIO_Init+0x214>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a53      	ldr	r2, [pc, #332]	@ (80024e4 <HAL_GPIO_Init+0x324>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d019      	beq.n	80023d0 <HAL_GPIO_Init+0x210>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a52      	ldr	r2, [pc, #328]	@ (80024e8 <HAL_GPIO_Init+0x328>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d013      	beq.n	80023cc <HAL_GPIO_Init+0x20c>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a51      	ldr	r2, [pc, #324]	@ (80024ec <HAL_GPIO_Init+0x32c>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d00d      	beq.n	80023c8 <HAL_GPIO_Init+0x208>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a50      	ldr	r2, [pc, #320]	@ (80024f0 <HAL_GPIO_Init+0x330>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d007      	beq.n	80023c4 <HAL_GPIO_Init+0x204>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a4f      	ldr	r2, [pc, #316]	@ (80024f4 <HAL_GPIO_Init+0x334>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d101      	bne.n	80023c0 <HAL_GPIO_Init+0x200>
 80023bc:	2308      	movs	r3, #8
 80023be:	e010      	b.n	80023e2 <HAL_GPIO_Init+0x222>
 80023c0:	2309      	movs	r3, #9
 80023c2:	e00e      	b.n	80023e2 <HAL_GPIO_Init+0x222>
 80023c4:	2307      	movs	r3, #7
 80023c6:	e00c      	b.n	80023e2 <HAL_GPIO_Init+0x222>
 80023c8:	2306      	movs	r3, #6
 80023ca:	e00a      	b.n	80023e2 <HAL_GPIO_Init+0x222>
 80023cc:	2305      	movs	r3, #5
 80023ce:	e008      	b.n	80023e2 <HAL_GPIO_Init+0x222>
 80023d0:	2304      	movs	r3, #4
 80023d2:	e006      	b.n	80023e2 <HAL_GPIO_Init+0x222>
 80023d4:	2303      	movs	r3, #3
 80023d6:	e004      	b.n	80023e2 <HAL_GPIO_Init+0x222>
 80023d8:	2302      	movs	r3, #2
 80023da:	e002      	b.n	80023e2 <HAL_GPIO_Init+0x222>
 80023dc:	2301      	movs	r3, #1
 80023de:	e000      	b.n	80023e2 <HAL_GPIO_Init+0x222>
 80023e0:	2300      	movs	r3, #0
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	f002 0203 	and.w	r2, r2, #3
 80023e8:	0092      	lsls	r2, r2, #2
 80023ea:	4093      	lsls	r3, r2
 80023ec:	461a      	mov	r2, r3
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023f4:	4936      	ldr	r1, [pc, #216]	@ (80024d0 <HAL_GPIO_Init+0x310>)
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	089b      	lsrs	r3, r3, #2
 80023fa:	3302      	adds	r3, #2
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002402:	4b3d      	ldr	r3, [pc, #244]	@ (80024f8 <HAL_GPIO_Init+0x338>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	43db      	mvns	r3, r3
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	4013      	ands	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4313      	orrs	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002426:	4a34      	ldr	r2, [pc, #208]	@ (80024f8 <HAL_GPIO_Init+0x338>)
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800242c:	4b32      	ldr	r3, [pc, #200]	@ (80024f8 <HAL_GPIO_Init+0x338>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	43db      	mvns	r3, r3
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4313      	orrs	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002450:	4a29      	ldr	r2, [pc, #164]	@ (80024f8 <HAL_GPIO_Init+0x338>)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002456:	4b28      	ldr	r3, [pc, #160]	@ (80024f8 <HAL_GPIO_Init+0x338>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	43db      	mvns	r3, r3
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4013      	ands	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4313      	orrs	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800247a:	4a1f      	ldr	r2, [pc, #124]	@ (80024f8 <HAL_GPIO_Init+0x338>)
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002480:	4b1d      	ldr	r3, [pc, #116]	@ (80024f8 <HAL_GPIO_Init+0x338>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	43db      	mvns	r3, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4013      	ands	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024a4:	4a14      	ldr	r2, [pc, #80]	@ (80024f8 <HAL_GPIO_Init+0x338>)
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	3301      	adds	r3, #1
 80024ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f47f ae88 	bne.w	80021d0 <HAL_GPIO_Init+0x10>
  }
}
 80024c0:	bf00      	nop
 80024c2:	bf00      	nop
 80024c4:	371c      	adds	r7, #28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr
 80024cc:	40023800 	.word	0x40023800
 80024d0:	40013800 	.word	0x40013800
 80024d4:	40020000 	.word	0x40020000
 80024d8:	40020400 	.word	0x40020400
 80024dc:	40020800 	.word	0x40020800
 80024e0:	40020c00 	.word	0x40020c00
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40021400 	.word	0x40021400
 80024ec:	40021800 	.word	0x40021800
 80024f0:	40021c00 	.word	0x40021c00
 80024f4:	40022000 	.word	0x40022000
 80024f8:	40013c00 	.word	0x40013c00

080024fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	460b      	mov	r3, r1
 8002506:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	887b      	ldrh	r3, [r7, #2]
 800250e:	4013      	ands	r3, r2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d002      	beq.n	800251a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002514:	2301      	movs	r3, #1
 8002516:	73fb      	strb	r3, [r7, #15]
 8002518:	e001      	b.n	800251e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800251a:	2300      	movs	r3, #0
 800251c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800251e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr

0800252a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	460b      	mov	r3, r1
 8002534:	807b      	strh	r3, [r7, #2]
 8002536:	4613      	mov	r3, r2
 8002538:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800253a:	787b      	ldrb	r3, [r7, #1]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002540:	887a      	ldrh	r2, [r7, #2]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002546:	e003      	b.n	8002550 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002548:	887b      	ldrh	r3, [r7, #2]
 800254a:	041a      	lsls	r2, r3, #16
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	619a      	str	r2, [r3, #24]
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr
	...

0800255c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08a      	sub	sp, #40	@ 0x28
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e23b      	b.n	80029e6 <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d050      	beq.n	800261c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800257a:	4b9e      	ldr	r3, [pc, #632]	@ (80027f4 <HAL_RCC_OscConfig+0x298>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 030c 	and.w	r3, r3, #12
 8002582:	2b04      	cmp	r3, #4
 8002584:	d00c      	beq.n	80025a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002586:	4b9b      	ldr	r3, [pc, #620]	@ (80027f4 <HAL_RCC_OscConfig+0x298>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800258e:	2b08      	cmp	r3, #8
 8002590:	d112      	bne.n	80025b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002592:	4b98      	ldr	r3, [pc, #608]	@ (80027f4 <HAL_RCC_OscConfig+0x298>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800259a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800259e:	d10b      	bne.n	80025b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a0:	4b94      	ldr	r3, [pc, #592]	@ (80027f4 <HAL_RCC_OscConfig+0x298>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d036      	beq.n	800261a <HAL_RCC_OscConfig+0xbe>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d132      	bne.n	800261a <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e216      	b.n	80029e6 <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	4b8e      	ldr	r3, [pc, #568]	@ (80027f8 <HAL_RCC_OscConfig+0x29c>)
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d013      	beq.n	80025f2 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ca:	f7ff f841 	bl	8001650 <HAL_GetTick>
 80025ce:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025d2:	f7ff f83d 	bl	8001650 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b64      	cmp	r3, #100	@ 0x64
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e200      	b.n	80029e6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e4:	4b83      	ldr	r3, [pc, #524]	@ (80027f4 <HAL_RCC_OscConfig+0x298>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0f0      	beq.n	80025d2 <HAL_RCC_OscConfig+0x76>
 80025f0:	e014      	b.n	800261c <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f2:	f7ff f82d 	bl	8001650 <HAL_GetTick>
 80025f6:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025fa:	f7ff f829 	bl	8001650 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b64      	cmp	r3, #100	@ 0x64
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e1ec      	b.n	80029e6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800260c:	4b79      	ldr	r3, [pc, #484]	@ (80027f4 <HAL_RCC_OscConfig+0x298>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1f0      	bne.n	80025fa <HAL_RCC_OscConfig+0x9e>
 8002618:	e000      	b.n	800261c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800261a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d077      	beq.n	8002718 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002628:	4b72      	ldr	r3, [pc, #456]	@ (80027f4 <HAL_RCC_OscConfig+0x298>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 030c 	and.w	r3, r3, #12
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00b      	beq.n	800264c <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002634:	4b6f      	ldr	r3, [pc, #444]	@ (80027f4 <HAL_RCC_OscConfig+0x298>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800263c:	2b08      	cmp	r3, #8
 800263e:	d126      	bne.n	800268e <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002640:	4b6c      	ldr	r3, [pc, #432]	@ (80027f4 <HAL_RCC_OscConfig+0x298>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d120      	bne.n	800268e <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800264c:	4b69      	ldr	r3, [pc, #420]	@ (80027f4 <HAL_RCC_OscConfig+0x298>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d005      	beq.n	8002664 <HAL_RCC_OscConfig+0x108>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d001      	beq.n	8002664 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e1c0      	b.n	80029e6 <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002664:	4b63      	ldr	r3, [pc, #396]	@ (80027f4 <HAL_RCC_OscConfig+0x298>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	21f8      	movs	r1, #248	@ 0xf8
 8002672:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002674:	69b9      	ldr	r1, [r7, #24]
 8002676:	fa91 f1a1 	rbit	r1, r1
 800267a:	6179      	str	r1, [r7, #20]
  return result;
 800267c:	6979      	ldr	r1, [r7, #20]
 800267e:	fab1 f181 	clz	r1, r1
 8002682:	b2c9      	uxtb	r1, r1
 8002684:	408b      	lsls	r3, r1
 8002686:	495b      	ldr	r1, [pc, #364]	@ (80027f4 <HAL_RCC_OscConfig+0x298>)
 8002688:	4313      	orrs	r3, r2
 800268a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800268c:	e044      	b.n	8002718 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d02a      	beq.n	80026ec <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002696:	4b59      	ldr	r3, [pc, #356]	@ (80027fc <HAL_RCC_OscConfig+0x2a0>)
 8002698:	2201      	movs	r2, #1
 800269a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269c:	f7fe ffd8 	bl	8001650 <HAL_GetTick>
 80026a0:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026a4:	f7fe ffd4 	bl	8001650 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e197      	b.n	80029e6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b6:	4b4f      	ldr	r3, [pc, #316]	@ (80027f4 <HAL_RCC_OscConfig+0x298>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0f0      	beq.n	80026a4 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c2:	4b4c      	ldr	r3, [pc, #304]	@ (80027f4 <HAL_RCC_OscConfig+0x298>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	21f8      	movs	r1, #248	@ 0xf8
 80026d0:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d2:	6939      	ldr	r1, [r7, #16]
 80026d4:	fa91 f1a1 	rbit	r1, r1
 80026d8:	60f9      	str	r1, [r7, #12]
  return result;
 80026da:	68f9      	ldr	r1, [r7, #12]
 80026dc:	fab1 f181 	clz	r1, r1
 80026e0:	b2c9      	uxtb	r1, r1
 80026e2:	408b      	lsls	r3, r1
 80026e4:	4943      	ldr	r1, [pc, #268]	@ (80027f4 <HAL_RCC_OscConfig+0x298>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	600b      	str	r3, [r1, #0]
 80026ea:	e015      	b.n	8002718 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ec:	4b43      	ldr	r3, [pc, #268]	@ (80027fc <HAL_RCC_OscConfig+0x2a0>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f2:	f7fe ffad 	bl	8001650 <HAL_GetTick>
 80026f6:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026fa:	f7fe ffa9 	bl	8001650 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e16c      	b.n	80029e6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800270c:	4b39      	ldr	r3, [pc, #228]	@ (80027f4 <HAL_RCC_OscConfig+0x298>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1f0      	bne.n	80026fa <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0308 	and.w	r3, r3, #8
 8002720:	2b00      	cmp	r3, #0
 8002722:	d030      	beq.n	8002786 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d016      	beq.n	800275a <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800272c:	4b34      	ldr	r3, [pc, #208]	@ (8002800 <HAL_RCC_OscConfig+0x2a4>)
 800272e:	2201      	movs	r2, #1
 8002730:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002732:	f7fe ff8d 	bl	8001650 <HAL_GetTick>
 8002736:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800273a:	f7fe ff89 	bl	8001650 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	6a3b      	ldr	r3, [r7, #32]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e14c      	b.n	80029e6 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274c:	4b29      	ldr	r3, [pc, #164]	@ (80027f4 <HAL_RCC_OscConfig+0x298>)
 800274e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0f0      	beq.n	800273a <HAL_RCC_OscConfig+0x1de>
 8002758:	e015      	b.n	8002786 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800275a:	4b29      	ldr	r3, [pc, #164]	@ (8002800 <HAL_RCC_OscConfig+0x2a4>)
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002760:	f7fe ff76 	bl	8001650 <HAL_GetTick>
 8002764:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002768:	f7fe ff72 	bl	8001650 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e135      	b.n	80029e6 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800277a:	4b1e      	ldr	r3, [pc, #120]	@ (80027f4 <HAL_RCC_OscConfig+0x298>)
 800277c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f0      	bne.n	8002768 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	2b00      	cmp	r3, #0
 8002790:	f000 8087 	beq.w	80028a2 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002794:	2300      	movs	r3, #0
 8002796:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800279a:	4b16      	ldr	r3, [pc, #88]	@ (80027f4 <HAL_RCC_OscConfig+0x298>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d110      	bne.n	80027c8 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	4b12      	ldr	r3, [pc, #72]	@ (80027f4 <HAL_RCC_OscConfig+0x298>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ae:	4a11      	ldr	r2, [pc, #68]	@ (80027f4 <HAL_RCC_OscConfig+0x298>)
 80027b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027b6:	4b0f      	ldr	r3, [pc, #60]	@ (80027f4 <HAL_RCC_OscConfig+0x298>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027c2:	2301      	movs	r3, #1
 80027c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80027c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002804 <HAL_RCC_OscConfig+0x2a8>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002804 <HAL_RCC_OscConfig+0x2a8>)
 80027ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027d2:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002804 <HAL_RCC_OscConfig+0x2a8>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d122      	bne.n	8002826 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027e0:	4b08      	ldr	r3, [pc, #32]	@ (8002804 <HAL_RCC_OscConfig+0x2a8>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a07      	ldr	r2, [pc, #28]	@ (8002804 <HAL_RCC_OscConfig+0x2a8>)
 80027e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ec:	f7fe ff30 	bl	8001650 <HAL_GetTick>
 80027f0:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f2:	e012      	b.n	800281a <HAL_RCC_OscConfig+0x2be>
 80027f4:	40023800 	.word	0x40023800
 80027f8:	40023802 	.word	0x40023802
 80027fc:	42470000 	.word	0x42470000
 8002800:	42470e80 	.word	0x42470e80
 8002804:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002808:	f7fe ff22 	bl	8001650 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e0e5      	b.n	80029e6 <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281a:	4b75      	ldr	r3, [pc, #468]	@ (80029f0 <HAL_RCC_OscConfig+0x494>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0f0      	beq.n	8002808 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	4b72      	ldr	r3, [pc, #456]	@ (80029f4 <HAL_RCC_OscConfig+0x498>)
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d015      	beq.n	8002864 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002838:	f7fe ff0a 	bl	8001650 <HAL_GetTick>
 800283c:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800283e:	e00a      	b.n	8002856 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002840:	f7fe ff06 	bl	8001650 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800284e:	4293      	cmp	r3, r2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e0c7      	b.n	80029e6 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002856:	4b68      	ldr	r3, [pc, #416]	@ (80029f8 <HAL_RCC_OscConfig+0x49c>)
 8002858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0ee      	beq.n	8002840 <HAL_RCC_OscConfig+0x2e4>
 8002862:	e014      	b.n	800288e <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002864:	f7fe fef4 	bl	8001650 <HAL_GetTick>
 8002868:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800286a:	e00a      	b.n	8002882 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800286c:	f7fe fef0 	bl	8001650 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	6a3b      	ldr	r3, [r7, #32]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800287a:	4293      	cmp	r3, r2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e0b1      	b.n	80029e6 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002882:	4b5d      	ldr	r3, [pc, #372]	@ (80029f8 <HAL_RCC_OscConfig+0x49c>)
 8002884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1ee      	bne.n	800286c <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800288e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002892:	2b01      	cmp	r3, #1
 8002894:	d105      	bne.n	80028a2 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002896:	4b58      	ldr	r3, [pc, #352]	@ (80029f8 <HAL_RCC_OscConfig+0x49c>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289a:	4a57      	ldr	r2, [pc, #348]	@ (80029f8 <HAL_RCC_OscConfig+0x49c>)
 800289c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028a0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 809c 	beq.w	80029e4 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028ac:	4b52      	ldr	r3, [pc, #328]	@ (80029f8 <HAL_RCC_OscConfig+0x49c>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 030c 	and.w	r3, r3, #12
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d061      	beq.n	800297c <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d146      	bne.n	800294e <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c0:	4b4e      	ldr	r3, [pc, #312]	@ (80029fc <HAL_RCC_OscConfig+0x4a0>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c6:	f7fe fec3 	bl	8001650 <HAL_GetTick>
 80028ca:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ce:	f7fe febf 	bl	8001650 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	6a3b      	ldr	r3, [r7, #32]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b64      	cmp	r3, #100	@ 0x64
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e082      	b.n	80029e6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e0:	4b45      	ldr	r3, [pc, #276]	@ (80029f8 <HAL_RCC_OscConfig+0x49c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1f0      	bne.n	80028ce <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028ec:	4b42      	ldr	r3, [pc, #264]	@ (80029f8 <HAL_RCC_OscConfig+0x49c>)
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	4b43      	ldr	r3, [pc, #268]	@ (8002a00 <HAL_RCC_OscConfig+0x4a4>)
 80028f2:	4013      	ands	r3, r2
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	69d1      	ldr	r1, [r2, #28]
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6a12      	ldr	r2, [r2, #32]
 80028fc:	4311      	orrs	r1, r2
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002902:	0192      	lsls	r2, r2, #6
 8002904:	4311      	orrs	r1, r2
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800290a:	0612      	lsls	r2, r2, #24
 800290c:	4311      	orrs	r1, r2
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002912:	0852      	lsrs	r2, r2, #1
 8002914:	3a01      	subs	r2, #1
 8002916:	0412      	lsls	r2, r2, #16
 8002918:	430a      	orrs	r2, r1
 800291a:	4937      	ldr	r1, [pc, #220]	@ (80029f8 <HAL_RCC_OscConfig+0x49c>)
 800291c:	4313      	orrs	r3, r2
 800291e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002920:	4b36      	ldr	r3, [pc, #216]	@ (80029fc <HAL_RCC_OscConfig+0x4a0>)
 8002922:	2201      	movs	r2, #1
 8002924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002926:	f7fe fe93 	bl	8001650 <HAL_GetTick>
 800292a:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800292c:	e008      	b.n	8002940 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800292e:	f7fe fe8f 	bl	8001650 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	6a3b      	ldr	r3, [r7, #32]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b64      	cmp	r3, #100	@ 0x64
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e052      	b.n	80029e6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002940:	4b2d      	ldr	r3, [pc, #180]	@ (80029f8 <HAL_RCC_OscConfig+0x49c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0f0      	beq.n	800292e <HAL_RCC_OscConfig+0x3d2>
 800294c:	e04a      	b.n	80029e4 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800294e:	4b2b      	ldr	r3, [pc, #172]	@ (80029fc <HAL_RCC_OscConfig+0x4a0>)
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7fe fe7c 	bl	8001650 <HAL_GetTick>
 8002958:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800295c:	f7fe fe78 	bl	8001650 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b64      	cmp	r3, #100	@ 0x64
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e03b      	b.n	80029e6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296e:	4b22      	ldr	r3, [pc, #136]	@ (80029f8 <HAL_RCC_OscConfig+0x49c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f0      	bne.n	800295c <HAL_RCC_OscConfig+0x400>
 800297a:	e033      	b.n	80029e4 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d101      	bne.n	8002988 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e02e      	b.n	80029e6 <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8002988:	4b1b      	ldr	r3, [pc, #108]	@ (80029f8 <HAL_RCC_OscConfig+0x49c>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	429a      	cmp	r2, r3
 800299a:	d121      	bne.n	80029e0 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d11a      	bne.n	80029e0 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029aa:	69fa      	ldr	r2, [r7, #28]
 80029ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80029b0:	4013      	ands	r3, r2
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029b6:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d111      	bne.n	80029e0 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c6:	085b      	lsrs	r3, r3, #1
 80029c8:	3b01      	subs	r3, #1
 80029ca:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d107      	bne.n	80029e0 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029da:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029dc:	429a      	cmp	r2, r3
 80029de:	d001      	beq.n	80029e4 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e000      	b.n	80029e6 <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3728      	adds	r7, #40	@ 0x28
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40007000 	.word	0x40007000
 80029f4:	40023870 	.word	0x40023870
 80029f8:	40023800 	.word	0x40023800
 80029fc:	42470060 	.word	0x42470060
 8002a00:	f0bc8000 	.word	0xf0bc8000

08002a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e0d2      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a18:	4b6b      	ldr	r3, [pc, #428]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 030f 	and.w	r3, r3, #15
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d90c      	bls.n	8002a40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a26:	4b68      	ldr	r3, [pc, #416]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2e:	4b66      	ldr	r3, [pc, #408]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d001      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e0be      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d020      	beq.n	8002a8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d005      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a58:	4b5c      	ldr	r3, [pc, #368]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	4a5b      	ldr	r2, [pc, #364]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002a5e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0308 	and.w	r3, r3, #8
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8002a70:	4b56      	ldr	r3, [pc, #344]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	4a55      	ldr	r2, [pc, #340]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002a76:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a7a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a7c:	4b53      	ldr	r3, [pc, #332]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	4950      	ldr	r1, [pc, #320]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d040      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d107      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa2:	4b4a      	ldr	r3, [pc, #296]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d115      	bne.n	8002ada <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e085      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d107      	bne.n	8002aca <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aba:	4b44      	ldr	r3, [pc, #272]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d109      	bne.n	8002ada <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e079      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aca:	4b40      	ldr	r3, [pc, #256]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e071      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ada:	4b3c      	ldr	r3, [pc, #240]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f023 0203 	bic.w	r2, r3, #3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	4939      	ldr	r1, [pc, #228]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aec:	f7fe fdb0 	bl	8001650 <HAL_GetTick>
 8002af0:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af2:	e00a      	b.n	8002b0a <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af4:	f7fe fdac 	bl	8001650 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e059      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0a:	4b30      	ldr	r3, [pc, #192]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 020c 	and.w	r2, r3, #12
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d1eb      	bne.n	8002af4 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b1c:	4b2a      	ldr	r3, [pc, #168]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 030f 	and.w	r3, r3, #15
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d20c      	bcs.n	8002b44 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2a:	4b27      	ldr	r3, [pc, #156]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b32:	4b25      	ldr	r3, [pc, #148]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d001      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e03c      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b50:	4b1e      	ldr	r3, [pc, #120]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	491b      	ldr	r1, [pc, #108]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d009      	beq.n	8002b82 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b6e:	4b17      	ldr	r3, [pc, #92]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	4913      	ldr	r1, [pc, #76]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002b82:	f000 f82b 	bl	8002bdc <HAL_RCC_GetSysClockFreq>
 8002b86:	4601      	mov	r1, r0
 8002b88:	4b10      	ldr	r3, [pc, #64]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b90:	22f0      	movs	r2, #240	@ 0xf0
 8002b92:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	fa92 f2a2 	rbit	r2, r2
 8002b9a:	60fa      	str	r2, [r7, #12]
  return result;
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	fab2 f282 	clz	r2, r2
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	40d3      	lsrs	r3, r2
 8002ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1cc>)
 8002ba8:	5cd3      	ldrb	r3, [r2, r3]
 8002baa:	fa21 f303 	lsr.w	r3, r1, r3
 8002bae:	4a09      	ldr	r2, [pc, #36]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1d0>)
 8002bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bb2:	4b09      	ldr	r3, [pc, #36]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1d4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fe fd08 	bl	80015cc <HAL_InitTick>

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40023c00 	.word	0x40023c00
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	08002eec 	.word	0x08002eec
 8002bd4:	20000000 	.word	0x20000000
 8002bd8:	20000004 	.word	0x20000004

08002bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002be0:	b090      	sub	sp, #64	@ 0x40
 8002be2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002be8:	2300      	movs	r3, #0
 8002bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bec:	2300      	movs	r3, #0
 8002bee:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bf4:	4b59      	ldr	r3, [pc, #356]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 030c 	and.w	r3, r3, #12
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d00d      	beq.n	8002c1c <HAL_RCC_GetSysClockFreq+0x40>
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	f200 80a2 	bhi.w	8002d4a <HAL_RCC_GetSysClockFreq+0x16e>
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <HAL_RCC_GetSysClockFreq+0x34>
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d003      	beq.n	8002c16 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c0e:	e09c      	b.n	8002d4a <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c10:	4b53      	ldr	r3, [pc, #332]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c12:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002c14:	e09c      	b.n	8002d50 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c16:	4b53      	ldr	r3, [pc, #332]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c18:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c1a:	e099      	b.n	8002d50 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c1c:	4b4f      	ldr	r3, [pc, #316]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c24:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c26:	4b4d      	ldr	r3, [pc, #308]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d027      	beq.n	8002c82 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c32:	4b4a      	ldr	r3, [pc, #296]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	099b      	lsrs	r3, r3, #6
 8002c38:	2200      	movs	r2, #0
 8002c3a:	623b      	str	r3, [r7, #32]
 8002c3c:	627a      	str	r2, [r7, #36]	@ 0x24
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c44:	2100      	movs	r1, #0
 8002c46:	4b47      	ldr	r3, [pc, #284]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c48:	fb03 f201 	mul.w	r2, r3, r1
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	fb00 f303 	mul.w	r3, r0, r3
 8002c52:	4413      	add	r3, r2
 8002c54:	4a43      	ldr	r2, [pc, #268]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c56:	fba0 2102 	umull	r2, r1, r0, r2
 8002c5a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8002c5c:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002c5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c60:	4413      	add	r3, r2
 8002c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c66:	2200      	movs	r2, #0
 8002c68:	61bb      	str	r3, [r7, #24]
 8002c6a:	61fa      	str	r2, [r7, #28]
 8002c6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c70:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002c74:	f7fd fec6 	bl	8000a04 <__aeabi_uldivmod>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c80:	e055      	b.n	8002d2e <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c82:	4b36      	ldr	r3, [pc, #216]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	099b      	lsrs	r3, r3, #6
 8002c88:	2200      	movs	r2, #0
 8002c8a:	613b      	str	r3, [r7, #16]
 8002c8c:	617a      	str	r2, [r7, #20]
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c94:	f04f 0b00 	mov.w	fp, #0
 8002c98:	4652      	mov	r2, sl
 8002c9a:	465b      	mov	r3, fp
 8002c9c:	f04f 0000 	mov.w	r0, #0
 8002ca0:	f04f 0100 	mov.w	r1, #0
 8002ca4:	0159      	lsls	r1, r3, #5
 8002ca6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002caa:	0150      	lsls	r0, r2, #5
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	ebb2 080a 	subs.w	r8, r2, sl
 8002cb4:	eb63 090b 	sbc.w	r9, r3, fp
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002cc4:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002cc8:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002ccc:	ebb2 0408 	subs.w	r4, r2, r8
 8002cd0:	eb63 0509 	sbc.w	r5, r3, r9
 8002cd4:	f04f 0200 	mov.w	r2, #0
 8002cd8:	f04f 0300 	mov.w	r3, #0
 8002cdc:	00eb      	lsls	r3, r5, #3
 8002cde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ce2:	00e2      	lsls	r2, r4, #3
 8002ce4:	4614      	mov	r4, r2
 8002ce6:	461d      	mov	r5, r3
 8002ce8:	eb14 030a 	adds.w	r3, r4, sl
 8002cec:	603b      	str	r3, [r7, #0]
 8002cee:	eb45 030b 	adc.w	r3, r5, fp
 8002cf2:	607b      	str	r3, [r7, #4]
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d00:	4629      	mov	r1, r5
 8002d02:	028b      	lsls	r3, r1, #10
 8002d04:	4620      	mov	r0, r4
 8002d06:	4629      	mov	r1, r5
 8002d08:	4604      	mov	r4, r0
 8002d0a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002d0e:	4601      	mov	r1, r0
 8002d10:	028a      	lsls	r2, r1, #10
 8002d12:	4610      	mov	r0, r2
 8002d14:	4619      	mov	r1, r3
 8002d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d18:	2200      	movs	r2, #0
 8002d1a:	60bb      	str	r3, [r7, #8]
 8002d1c:	60fa      	str	r2, [r7, #12]
 8002d1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d22:	f7fd fe6f 	bl	8000a04 <__aeabi_uldivmod>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	0c1b      	lsrs	r3, r3, #16
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	3301      	adds	r3, #1
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002d3e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d46:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d48:	e002      	b.n	8002d50 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d4a:	4b05      	ldr	r3, [pc, #20]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d4c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3740      	adds	r7, #64	@ 0x40
 8002d56:	46bd      	mov	sp, r7
 8002d58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	00f42400 	.word	0x00f42400
 8002d64:	017d7840 	.word	0x017d7840

08002d68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e07b      	b.n	8002e72 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d108      	bne.n	8002d94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d8a:	d009      	beq.n	8002da0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	61da      	str	r2, [r3, #28]
 8002d92:	e005      	b.n	8002da0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7fe fb40 	bl	8001440 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dd6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e10:	431a      	orrs	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e24:	ea42 0103 	orr.w	r1, r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	0c1b      	lsrs	r3, r3, #16
 8002e3e:	f003 0104 	and.w	r1, r3, #4
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e46:	f003 0210 	and.w	r2, r3, #16
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	69da      	ldr	r2, [r3, #28]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <memset>:
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	4402      	add	r2, r0
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d100      	bne.n	8002e84 <memset+0xa>
 8002e82:	4770      	bx	lr
 8002e84:	f803 1b01 	strb.w	r1, [r3], #1
 8002e88:	e7f9      	b.n	8002e7e <memset+0x4>
	...

08002e8c <__libc_init_array>:
 8002e8c:	b570      	push	{r4, r5, r6, lr}
 8002e8e:	2600      	movs	r6, #0
 8002e90:	4d0c      	ldr	r5, [pc, #48]	@ (8002ec4 <__libc_init_array+0x38>)
 8002e92:	4c0d      	ldr	r4, [pc, #52]	@ (8002ec8 <__libc_init_array+0x3c>)
 8002e94:	1b64      	subs	r4, r4, r5
 8002e96:	10a4      	asrs	r4, r4, #2
 8002e98:	42a6      	cmp	r6, r4
 8002e9a:	d109      	bne.n	8002eb0 <__libc_init_array+0x24>
 8002e9c:	f000 f81a 	bl	8002ed4 <_init>
 8002ea0:	2600      	movs	r6, #0
 8002ea2:	4d0a      	ldr	r5, [pc, #40]	@ (8002ecc <__libc_init_array+0x40>)
 8002ea4:	4c0a      	ldr	r4, [pc, #40]	@ (8002ed0 <__libc_init_array+0x44>)
 8002ea6:	1b64      	subs	r4, r4, r5
 8002ea8:	10a4      	asrs	r4, r4, #2
 8002eaa:	42a6      	cmp	r6, r4
 8002eac:	d105      	bne.n	8002eba <__libc_init_array+0x2e>
 8002eae:	bd70      	pop	{r4, r5, r6, pc}
 8002eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eb4:	4798      	blx	r3
 8002eb6:	3601      	adds	r6, #1
 8002eb8:	e7ee      	b.n	8002e98 <__libc_init_array+0xc>
 8002eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ebe:	4798      	blx	r3
 8002ec0:	3601      	adds	r6, #1
 8002ec2:	e7f2      	b.n	8002eaa <__libc_init_array+0x1e>
 8002ec4:	08002f04 	.word	0x08002f04
 8002ec8:	08002f04 	.word	0x08002f04
 8002ecc:	08002f04 	.word	0x08002f04
 8002ed0:	08002f08 	.word	0x08002f08

08002ed4 <_init>:
 8002ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed6:	bf00      	nop
 8002ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eda:	bc08      	pop	{r3}
 8002edc:	469e      	mov	lr, r3
 8002ede:	4770      	bx	lr

08002ee0 <_fini>:
 8002ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee2:	bf00      	nop
 8002ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ee6:	bc08      	pop	{r3}
 8002ee8:	469e      	mov	lr, r3
 8002eea:	4770      	bx	lr
