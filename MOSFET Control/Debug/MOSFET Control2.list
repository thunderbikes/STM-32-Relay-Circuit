
MOSFET Control2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000461c  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080047a4  080047a4  000057a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004824  08004824  0000606c  2**0
                  CONTENTS
  4 .ARM          00000008  08004824  08004824  00005824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800482c  0800482c  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800482c  0800482c  0000582c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004830  08004830  00005830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004834  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  2000006c  080048a0  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  080048a0  000062f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcf9  00000000  00000000  00006095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002217  00000000  00000000  00013d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  00015fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b52  00000000  00000000  00016e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001faa2  00000000  00000000  000179aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fbb3  00000000  00000000  0003744c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c093c  00000000  00000000  00046fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010793b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004698  00000000  00000000  00107980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  0010c018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000006c 	.word	0x2000006c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800478c 	.word	0x0800478c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000070 	.word	0x20000070
 80001c4:	0800478c 	.word	0x0800478c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2f>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a7c:	bf24      	itt	cs
 8000a7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a86:	d90d      	bls.n	8000aa4 <__aeabi_d2f+0x30>
 8000a88:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a94:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a9c:	bf08      	it	eq
 8000a9e:	f020 0001 	biceq.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aa8:	d121      	bne.n	8000aee <__aeabi_d2f+0x7a>
 8000aaa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aae:	bfbc      	itt	lt
 8000ab0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	4770      	bxlt	lr
 8000ab6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000abe:	f1c2 0218 	rsb	r2, r2, #24
 8000ac2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ac6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aca:	fa20 f002 	lsr.w	r0, r0, r2
 8000ace:	bf18      	it	ne
 8000ad0:	f040 0001 	orrne.w	r0, r0, #1
 8000ad4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000adc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae0:	ea40 000c 	orr.w	r0, r0, ip
 8000ae4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aec:	e7cc      	b.n	8000a88 <__aeabi_d2f+0x14>
 8000aee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af2:	d107      	bne.n	8000b04 <__aeabi_d2f+0x90>
 8000af4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af8:	bf1e      	ittt	ne
 8000afa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000afe:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b02:	4770      	bxne	lr
 8000b04:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_uldivmod>:
 8000b14:	b953      	cbnz	r3, 8000b2c <__aeabi_uldivmod+0x18>
 8000b16:	b94a      	cbnz	r2, 8000b2c <__aeabi_uldivmod+0x18>
 8000b18:	2900      	cmp	r1, #0
 8000b1a:	bf08      	it	eq
 8000b1c:	2800      	cmpeq	r0, #0
 8000b1e:	bf1c      	itt	ne
 8000b20:	f04f 31ff 	movne.w	r1, #4294967295
 8000b24:	f04f 30ff 	movne.w	r0, #4294967295
 8000b28:	f000 b968 	b.w	8000dfc <__aeabi_idiv0>
 8000b2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b34:	f000 f806 	bl	8000b44 <__udivmoddi4>
 8000b38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b40:	b004      	add	sp, #16
 8000b42:	4770      	bx	lr

08000b44 <__udivmoddi4>:
 8000b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b48:	9d08      	ldr	r5, [sp, #32]
 8000b4a:	460c      	mov	r4, r1
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d14e      	bne.n	8000bee <__udivmoddi4+0xaa>
 8000b50:	4694      	mov	ip, r2
 8000b52:	458c      	cmp	ip, r1
 8000b54:	4686      	mov	lr, r0
 8000b56:	fab2 f282 	clz	r2, r2
 8000b5a:	d962      	bls.n	8000c22 <__udivmoddi4+0xde>
 8000b5c:	b14a      	cbz	r2, 8000b72 <__udivmoddi4+0x2e>
 8000b5e:	f1c2 0320 	rsb	r3, r2, #32
 8000b62:	4091      	lsls	r1, r2
 8000b64:	fa20 f303 	lsr.w	r3, r0, r3
 8000b68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b6c:	4319      	orrs	r1, r3
 8000b6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b76:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b7a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b7e:	fa1f f68c 	uxth.w	r6, ip
 8000b82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b8a:	fb04 f106 	mul.w	r1, r4, r6
 8000b8e:	4299      	cmp	r1, r3
 8000b90:	d90a      	bls.n	8000ba8 <__udivmoddi4+0x64>
 8000b92:	eb1c 0303 	adds.w	r3, ip, r3
 8000b96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b9a:	f080 8110 	bcs.w	8000dbe <__udivmoddi4+0x27a>
 8000b9e:	4299      	cmp	r1, r3
 8000ba0:	f240 810d 	bls.w	8000dbe <__udivmoddi4+0x27a>
 8000ba4:	3c02      	subs	r4, #2
 8000ba6:	4463      	add	r3, ip
 8000ba8:	1a59      	subs	r1, r3, r1
 8000baa:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bae:	fb07 1110 	mls	r1, r7, r0, r1
 8000bb2:	fb00 f606 	mul.w	r6, r0, r6
 8000bb6:	fa1f f38e 	uxth.w	r3, lr
 8000bba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bbe:	429e      	cmp	r6, r3
 8000bc0:	d90a      	bls.n	8000bd8 <__udivmoddi4+0x94>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bca:	f080 80fa 	bcs.w	8000dc2 <__udivmoddi4+0x27e>
 8000bce:	429e      	cmp	r6, r3
 8000bd0:	f240 80f7 	bls.w	8000dc2 <__udivmoddi4+0x27e>
 8000bd4:	4463      	add	r3, ip
 8000bd6:	3802      	subs	r0, #2
 8000bd8:	2100      	movs	r1, #0
 8000bda:	1b9b      	subs	r3, r3, r6
 8000bdc:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000be0:	b11d      	cbz	r5, 8000bea <__udivmoddi4+0xa6>
 8000be2:	40d3      	lsrs	r3, r2
 8000be4:	2200      	movs	r2, #0
 8000be6:	e9c5 3200 	strd	r3, r2, [r5]
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	428b      	cmp	r3, r1
 8000bf0:	d905      	bls.n	8000bfe <__udivmoddi4+0xba>
 8000bf2:	b10d      	cbz	r5, 8000bf8 <__udivmoddi4+0xb4>
 8000bf4:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4608      	mov	r0, r1
 8000bfc:	e7f5      	b.n	8000bea <__udivmoddi4+0xa6>
 8000bfe:	fab3 f183 	clz	r1, r3
 8000c02:	2900      	cmp	r1, #0
 8000c04:	d146      	bne.n	8000c94 <__udivmoddi4+0x150>
 8000c06:	42a3      	cmp	r3, r4
 8000c08:	d302      	bcc.n	8000c10 <__udivmoddi4+0xcc>
 8000c0a:	4290      	cmp	r0, r2
 8000c0c:	f0c0 80ee 	bcc.w	8000dec <__udivmoddi4+0x2a8>
 8000c10:	1a86      	subs	r6, r0, r2
 8000c12:	eb64 0303 	sbc.w	r3, r4, r3
 8000c16:	2001      	movs	r0, #1
 8000c18:	2d00      	cmp	r5, #0
 8000c1a:	d0e6      	beq.n	8000bea <__udivmoddi4+0xa6>
 8000c1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c20:	e7e3      	b.n	8000bea <__udivmoddi4+0xa6>
 8000c22:	2a00      	cmp	r2, #0
 8000c24:	f040 808f 	bne.w	8000d46 <__udivmoddi4+0x202>
 8000c28:	eba1 040c 	sub.w	r4, r1, ip
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c3a:	fb08 4416 	mls	r4, r8, r6, r4
 8000c3e:	fb07 f006 	mul.w	r0, r7, r6
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c4a:	4298      	cmp	r0, r3
 8000c4c:	d908      	bls.n	8000c60 <__udivmoddi4+0x11c>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x11a>
 8000c58:	4298      	cmp	r0, r3
 8000c5a:	f200 80cb 	bhi.w	8000df4 <__udivmoddi4+0x2b0>
 8000c5e:	4626      	mov	r6, r4
 8000c60:	1a1c      	subs	r4, r3, r0
 8000c62:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c66:	fb08 4410 	mls	r4, r8, r0, r4
 8000c6a:	fb00 f707 	mul.w	r7, r0, r7
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c76:	429f      	cmp	r7, r3
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x148>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0x146>
 8000c84:	429f      	cmp	r7, r3
 8000c86:	f200 80ae 	bhi.w	8000de6 <__udivmoddi4+0x2a2>
 8000c8a:	4620      	mov	r0, r4
 8000c8c:	1bdb      	subs	r3, r3, r7
 8000c8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c92:	e7a5      	b.n	8000be0 <__udivmoddi4+0x9c>
 8000c94:	f1c1 0720 	rsb	r7, r1, #32
 8000c98:	408b      	lsls	r3, r1
 8000c9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ca2:	fa24 f607 	lsr.w	r6, r4, r7
 8000ca6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000caa:	fbb6 f8f9 	udiv	r8, r6, r9
 8000cae:	fa1f fe8c 	uxth.w	lr, ip
 8000cb2:	fb09 6618 	mls	r6, r9, r8, r6
 8000cb6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cba:	408c      	lsls	r4, r1
 8000cbc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000cc0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cc4:	431c      	orrs	r4, r3
 8000cc6:	0c23      	lsrs	r3, r4, #16
 8000cc8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ccc:	4298      	cmp	r0, r3
 8000cce:	fa02 f201 	lsl.w	r2, r2, r1
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x1a6>
 8000cd4:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd8:	f108 36ff 	add.w	r6, r8, #4294967295
 8000cdc:	f080 8081 	bcs.w	8000de2 <__udivmoddi4+0x29e>
 8000ce0:	4298      	cmp	r0, r3
 8000ce2:	d97e      	bls.n	8000de2 <__udivmoddi4+0x29e>
 8000ce4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ce8:	4463      	add	r3, ip
 8000cea:	1a1e      	subs	r6, r3, r0
 8000cec:	fbb6 f3f9 	udiv	r3, r6, r9
 8000cf0:	fb09 6613 	mls	r6, r9, r3, r6
 8000cf4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cf8:	b2a4      	uxth	r4, r4
 8000cfa:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000cfe:	45a6      	cmp	lr, r4
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x1d0>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d0a:	d266      	bcs.n	8000dda <__udivmoddi4+0x296>
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	d964      	bls.n	8000dda <__udivmoddi4+0x296>
 8000d10:	3b02      	subs	r3, #2
 8000d12:	4464      	add	r4, ip
 8000d14:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000d18:	fba0 8302 	umull	r8, r3, r0, r2
 8000d1c:	eba4 040e 	sub.w	r4, r4, lr
 8000d20:	429c      	cmp	r4, r3
 8000d22:	46c6      	mov	lr, r8
 8000d24:	461e      	mov	r6, r3
 8000d26:	d350      	bcc.n	8000dca <__udivmoddi4+0x286>
 8000d28:	d04d      	beq.n	8000dc6 <__udivmoddi4+0x282>
 8000d2a:	b155      	cbz	r5, 8000d42 <__udivmoddi4+0x1fe>
 8000d2c:	ebba 030e 	subs.w	r3, sl, lr
 8000d30:	eb64 0406 	sbc.w	r4, r4, r6
 8000d34:	fa04 f707 	lsl.w	r7, r4, r7
 8000d38:	40cb      	lsrs	r3, r1
 8000d3a:	431f      	orrs	r7, r3
 8000d3c:	40cc      	lsrs	r4, r1
 8000d3e:	e9c5 7400 	strd	r7, r4, [r5]
 8000d42:	2100      	movs	r1, #0
 8000d44:	e751      	b.n	8000bea <__udivmoddi4+0xa6>
 8000d46:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4a:	f1c2 0320 	rsb	r3, r2, #32
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d5c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000d60:	fb08 1110 	mls	r1, r8, r0, r1
 8000d64:	4094      	lsls	r4, r2
 8000d66:	431c      	orrs	r4, r3
 8000d68:	fa1f f78c 	uxth.w	r7, ip
 8000d6c:	0c23      	lsrs	r3, r4, #16
 8000d6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d72:	fb00 f107 	mul.w	r1, r0, r7
 8000d76:	4299      	cmp	r1, r3
 8000d78:	d908      	bls.n	8000d8c <__udivmoddi4+0x248>
 8000d7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d82:	d22c      	bcs.n	8000dde <__udivmoddi4+0x29a>
 8000d84:	4299      	cmp	r1, r3
 8000d86:	d92a      	bls.n	8000dde <__udivmoddi4+0x29a>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1a5b      	subs	r3, r3, r1
 8000d8e:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d92:	fb08 3311 	mls	r3, r8, r1, r3
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d9c:	fb01 f307 	mul.w	r3, r1, r7
 8000da0:	42a3      	cmp	r3, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x272>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000dac:	d213      	bcs.n	8000dd6 <__udivmoddi4+0x292>
 8000dae:	42a3      	cmp	r3, r4
 8000db0:	d911      	bls.n	8000dd6 <__udivmoddi4+0x292>
 8000db2:	3902      	subs	r1, #2
 8000db4:	4464      	add	r4, ip
 8000db6:	1ae4      	subs	r4, r4, r3
 8000db8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dbc:	e73b      	b.n	8000c36 <__udivmoddi4+0xf2>
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	e6f2      	b.n	8000ba8 <__udivmoddi4+0x64>
 8000dc2:	4608      	mov	r0, r1
 8000dc4:	e708      	b.n	8000bd8 <__udivmoddi4+0x94>
 8000dc6:	45c2      	cmp	sl, r8
 8000dc8:	d2af      	bcs.n	8000d2a <__udivmoddi4+0x1e6>
 8000dca:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dce:	eb63 060c 	sbc.w	r6, r3, ip
 8000dd2:	3801      	subs	r0, #1
 8000dd4:	e7a9      	b.n	8000d2a <__udivmoddi4+0x1e6>
 8000dd6:	4631      	mov	r1, r6
 8000dd8:	e7ed      	b.n	8000db6 <__udivmoddi4+0x272>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	e79a      	b.n	8000d14 <__udivmoddi4+0x1d0>
 8000dde:	4630      	mov	r0, r6
 8000de0:	e7d4      	b.n	8000d8c <__udivmoddi4+0x248>
 8000de2:	46b0      	mov	r8, r6
 8000de4:	e781      	b.n	8000cea <__udivmoddi4+0x1a6>
 8000de6:	4463      	add	r3, ip
 8000de8:	3802      	subs	r0, #2
 8000dea:	e74f      	b.n	8000c8c <__udivmoddi4+0x148>
 8000dec:	4606      	mov	r6, r0
 8000dee:	4623      	mov	r3, r4
 8000df0:	4608      	mov	r0, r1
 8000df2:	e711      	b.n	8000c18 <__udivmoddi4+0xd4>
 8000df4:	3e02      	subs	r6, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	e732      	b.n	8000c60 <__udivmoddi4+0x11c>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e08:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e0c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d013      	beq.n	8000e40 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000e18:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e1c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000e20:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d00b      	beq.n	8000e40 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000e28:	e000      	b.n	8000e2c <ITM_SendChar+0x2c>
    {
      __NOP();
 8000e2a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000e2c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d0f9      	beq.n	8000e2a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000e36:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000e40:	687b      	ldr	r3, [r7, #4]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr

08000e4c <allRelaysOpen>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void allRelaysOpen() {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HVC_POS_PORT, HVC_POS_Pin, GPIO_PIN_RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2101      	movs	r1, #1
 8000e54:	4810      	ldr	r0, [pc, #64]	@ (8000e98 <allRelaysOpen+0x4c>)
 8000e56:	f001 ff36 	bl	8002cc6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HVC_NEG_PORT, HVC_NEG_Pin, GPIO_PIN_RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2102      	movs	r1, #2
 8000e5e:	480e      	ldr	r0, [pc, #56]	@ (8000e98 <allRelaysOpen+0x4c>)
 8000e60:	f001 ff31 	bl	8002cc6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HVC_POS_PORT, HVC_POS_Pin, GPIO_PIN_RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2101      	movs	r1, #1
 8000e68:	480b      	ldr	r0, [pc, #44]	@ (8000e98 <allRelaysOpen+0x4c>)
 8000e6a:	f001 ff2c 	bl	8002cc6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CHARGE_NEG_PORT, CHARGE_NEG_Pin, GPIO_PIN_RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2110      	movs	r1, #16
 8000e72:	4809      	ldr	r0, [pc, #36]	@ (8000e98 <allRelaysOpen+0x4c>)
 8000e74:	f001 ff27 	bl	8002cc6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CHARGE_POS_PORT, CHARGE_POS_Pin, GPIO_PIN_RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2108      	movs	r1, #8
 8000e7c:	4806      	ldr	r0, [pc, #24]	@ (8000e98 <allRelaysOpen+0x4c>)
 8000e7e:	f001 ff22 	bl	8002cc6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PUMP_ENABLE_PORT, PUMP_ENABLE_Pin, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2180      	movs	r1, #128	@ 0x80
 8000e86:	4804      	ldr	r0, [pc, #16]	@ (8000e98 <allRelaysOpen+0x4c>)
 8000e88:	f001 ff1d 	bl	8002cc6 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000e8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e90:	f000 ff8c 	bl	8001dac <HAL_Delay>
}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40020800 	.word	0x40020800

08000e9c <Reading_Pin>:
	HAL_GPIO_ReadPin(R1_AUX_PORT, R1_AUX_Pin);
	HAL_GPIO_ReadPin(R2_AUX_PORT, R2_AUX_Pin);
	HAL_GPIO_ReadPin(R3_AUX_PORT, R3_AUX_Pin);
}

int Reading_Pin(char aux_number) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
	int state = 0; // Default state
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
	switch (aux_number) {
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	2b68      	cmp	r3, #104	@ 0x68
 8000eae:	d063      	beq.n	8000f78 <Reading_Pin+0xdc>
 8000eb0:	2b68      	cmp	r3, #104	@ 0x68
 8000eb2:	dc68      	bgt.n	8000f86 <Reading_Pin+0xea>
 8000eb4:	2b49      	cmp	r3, #73	@ 0x49
 8000eb6:	dc39      	bgt.n	8000f2c <Reading_Pin+0x90>
 8000eb8:	2b31      	cmp	r3, #49	@ 0x31
 8000eba:	db64      	blt.n	8000f86 <Reading_Pin+0xea>
 8000ebc:	3b31      	subs	r3, #49	@ 0x31
 8000ebe:	2b18      	cmp	r3, #24
 8000ec0:	d861      	bhi.n	8000f86 <Reading_Pin+0xea>
 8000ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ec8 <Reading_Pin+0x2c>)
 8000ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec8:	08000f33 	.word	0x08000f33
 8000ecc:	08000f41 	.word	0x08000f41
 8000ed0:	08000f4f 	.word	0x08000f4f
 8000ed4:	08000f87 	.word	0x08000f87
 8000ed8:	08000f87 	.word	0x08000f87
 8000edc:	08000f87 	.word	0x08000f87
 8000ee0:	08000f87 	.word	0x08000f87
 8000ee4:	08000f87 	.word	0x08000f87
 8000ee8:	08000f87 	.word	0x08000f87
 8000eec:	08000f87 	.word	0x08000f87
 8000ef0:	08000f87 	.word	0x08000f87
 8000ef4:	08000f87 	.word	0x08000f87
 8000ef8:	08000f87 	.word	0x08000f87
 8000efc:	08000f87 	.word	0x08000f87
 8000f00:	08000f87 	.word	0x08000f87
 8000f04:	08000f87 	.word	0x08000f87
 8000f08:	08000f87 	.word	0x08000f87
 8000f0c:	08000f87 	.word	0x08000f87
 8000f10:	08000f87 	.word	0x08000f87
 8000f14:	08000f87 	.word	0x08000f87
 8000f18:	08000f87 	.word	0x08000f87
 8000f1c:	08000f87 	.word	0x08000f87
 8000f20:	08000f87 	.word	0x08000f87
 8000f24:	08000f87 	.word	0x08000f87
 8000f28:	08000f5d 	.word	0x08000f5d
 8000f2c:	2b63      	cmp	r3, #99	@ 0x63
 8000f2e:	d01c      	beq.n	8000f6a <Reading_Pin+0xce>
 8000f30:	e029      	b.n	8000f86 <Reading_Pin+0xea>
	case '1':
		state = HAL_GPIO_ReadPin(R1_AUX_PORT, R1_AUX_Pin);
 8000f32:	2110      	movs	r1, #16
 8000f34:	4818      	ldr	r0, [pc, #96]	@ (8000f98 <Reading_Pin+0xfc>)
 8000f36:	f001 feaf 	bl	8002c98 <HAL_GPIO_ReadPin>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	60fb      	str	r3, [r7, #12]
		break;
 8000f3e:	e026      	b.n	8000f8e <Reading_Pin+0xf2>
	case '2':
		state = HAL_GPIO_ReadPin(R2_AUX_PORT, R2_AUX_Pin);
 8000f40:	2120      	movs	r1, #32
 8000f42:	4815      	ldr	r0, [pc, #84]	@ (8000f98 <Reading_Pin+0xfc>)
 8000f44:	f001 fea8 	bl	8002c98 <HAL_GPIO_ReadPin>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	60fb      	str	r3, [r7, #12]
		break;
 8000f4c:	e01f      	b.n	8000f8e <Reading_Pin+0xf2>
	case '3':
		state = HAL_GPIO_ReadPin(R3_AUX_PORT, R3_AUX_Pin);
 8000f4e:	2140      	movs	r1, #64	@ 0x40
 8000f50:	4811      	ldr	r0, [pc, #68]	@ (8000f98 <Reading_Pin+0xfc>)
 8000f52:	f001 fea1 	bl	8002c98 <HAL_GPIO_ReadPin>
 8000f56:	4603      	mov	r3, r0
 8000f58:	60fb      	str	r3, [r7, #12]
		break;
 8000f5a:	e018      	b.n	8000f8e <Reading_Pin+0xf2>
	case 'I':
		state = HAL_GPIO_ReadPin(IGNITION_PORT, IGNITION_Pin);
 8000f5c:	2120      	movs	r1, #32
 8000f5e:	480f      	ldr	r0, [pc, #60]	@ (8000f9c <Reading_Pin+0x100>)
 8000f60:	f001 fe9a 	bl	8002c98 <HAL_GPIO_ReadPin>
 8000f64:	4603      	mov	r3, r0
 8000f66:	60fb      	str	r3, [r7, #12]
		break;
 8000f68:	e011      	b.n	8000f8e <Reading_Pin+0xf2>
	case 'c':
		state = HAL_GPIO_ReadPin(CHARGE_ENABLE_PORT, CHARGE_ENABLE_Pin);
 8000f6a:	2140      	movs	r1, #64	@ 0x40
 8000f6c:	480b      	ldr	r0, [pc, #44]	@ (8000f9c <Reading_Pin+0x100>)
 8000f6e:	f001 fe93 	bl	8002c98 <HAL_GPIO_ReadPin>
 8000f72:	4603      	mov	r3, r0
 8000f74:	60fb      	str	r3, [r7, #12]
		break;
 8000f76:	e00a      	b.n	8000f8e <Reading_Pin+0xf2>
	case 'h':
		state = HAL_GPIO_ReadPin(HV_SENSE_GPIO_Port, HV_SENSE_Pin);
 8000f78:	2101      	movs	r1, #1
 8000f7a:	4809      	ldr	r0, [pc, #36]	@ (8000fa0 <Reading_Pin+0x104>)
 8000f7c:	f001 fe8c 	bl	8002c98 <HAL_GPIO_ReadPin>
 8000f80:	4603      	mov	r3, r0
 8000f82:	60fb      	str	r3, [r7, #12]
		break;
 8000f84:	e003      	b.n	8000f8e <Reading_Pin+0xf2>
	default:
		state = -1; // Indicate an invalid aux_number
 8000f86:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8a:	60fb      	str	r3, [r7, #12]
		break;
 8000f8c:	bf00      	nop
	}
	return state;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40020400 	.word	0x40020400
 8000f9c:	40020800 	.word	0x40020800
 8000fa0:	40020000 	.word	0x40020000

08000fa4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fa8:	f000 fe92 	bl	8001cd0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fac:	f000 f82c 	bl	8001008 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fb0:	f000 f97c 	bl	80012ac <MX_GPIO_Init>
	MX_TIM2_Init();
 8000fb4:	f000 f92c 	bl	8001210 <MX_TIM2_Init>
	MX_CAN2_Init();
 8000fb8:	f000 f8c0 	bl	800113c <MX_CAN2_Init>
	MX_SPI1_Init();
 8000fbc:	f000 f8f2 	bl	80011a4 <MX_SPI1_Init>
	MX_ADC1_Init();
 8000fc0:	f000 f86a 	bl	8001098 <MX_ADC1_Init>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (Reading_Pin('I') == 1 && operation == 0) {
 8000fc4:	2049      	movs	r0, #73	@ 0x49
 8000fc6:	f7ff ff69 	bl	8000e9c <Reading_Pin>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d105      	bne.n	8000fdc <main+0x38>
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <main+0x60>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d101      	bne.n	8000fdc <main+0x38>
			set_precharge();
 8000fd8:	f000 fb2a 	bl	8001630 <set_precharge>
		}
		//Charging
		if (Reading_Pin('c') == 1 && Reading_Pin('I') == 0 && operation == 0) {
 8000fdc:	2063      	movs	r0, #99	@ 0x63
 8000fde:	f7ff ff5d 	bl	8000e9c <Reading_Pin>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d1ed      	bne.n	8000fc4 <main+0x20>
 8000fe8:	2049      	movs	r0, #73	@ 0x49
 8000fea:	f7ff ff57 	bl	8000e9c <Reading_Pin>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1e7      	bne.n	8000fc4 <main+0x20>
 8000ff4:	4b03      	ldr	r3, [pc, #12]	@ (8001004 <main+0x60>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1e3      	bne.n	8000fc4 <main+0x20>
			//make sure no accidental charging during operation ^^^-ray
			set_charging();
 8000ffc:	f000 fbc4 	bl	8001788 <set_charging>
		if (Reading_Pin('I') == 1 && operation == 0) {
 8001000:	e7e0      	b.n	8000fc4 <main+0x20>
 8001002:	bf00      	nop
 8001004:	20000088 	.word	0x20000088

08001008 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b092      	sub	sp, #72	@ 0x48
 800100c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800100e:	f107 0318 	add.w	r3, r7, #24
 8001012:	2230      	movs	r2, #48	@ 0x30
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f003 f90a 	bl	8004230 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
 8001028:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800102a:	2302      	movs	r3, #2
 800102c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800102e:	2301      	movs	r3, #1
 8001030:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001032:	2310      	movs	r3, #16
 8001034:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001036:	2302      	movs	r3, #2
 8001038:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800103a:	2300      	movs	r3, #0
 800103c:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLM = 8;
 800103e:	2308      	movs	r3, #8
 8001040:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLN = 192;
 8001042:	23c0      	movs	r3, #192	@ 0xc0
 8001044:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001046:	2304      	movs	r3, #4
 8001048:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800104a:	2304      	movs	r3, #4
 800104c:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800104e:	f107 0318 	add.w	r3, r7, #24
 8001052:	4618      	mov	r0, r3
 8001054:	f001 fe50 	bl	8002cf8 <HAL_RCC_OscConfig>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <SystemClock_Config+0x5a>
		Error_Handler();
 800105e:	f000 fbf3 	bl	8001848 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001062:	230f      	movs	r3, #15
 8001064:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001066:	2302      	movs	r3, #2
 8001068:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800106e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001072:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001074:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001078:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	2103      	movs	r1, #3
 800107e:	4618      	mov	r0, r3
 8001080:	f002 f88e 	bl	80031a0 <HAL_RCC_ClockConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0x86>
		Error_Handler();
 800108a:	f000 fbdd 	bl	8001848 <Error_Handler>
	}
}
 800108e:	bf00      	nop
 8001090:	3748      	adds	r7, #72	@ 0x48
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800109e:	463b      	mov	r3, r7
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80010aa:	4b21      	ldr	r3, [pc, #132]	@ (8001130 <MX_ADC1_Init+0x98>)
 80010ac:	4a21      	ldr	r2, [pc, #132]	@ (8001134 <MX_ADC1_Init+0x9c>)
 80010ae:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001130 <MX_ADC1_Init+0x98>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001130 <MX_ADC1_Init+0x98>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 80010bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001130 <MX_ADC1_Init+0x98>)
 80010be:	2200      	movs	r2, #0
 80010c0:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80010c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001130 <MX_ADC1_Init+0x98>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010c8:	4b19      	ldr	r3, [pc, #100]	@ (8001130 <MX_ADC1_Init+0x98>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010d0:	4b17      	ldr	r3, [pc, #92]	@ (8001130 <MX_ADC1_Init+0x98>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010d6:	4b16      	ldr	r3, [pc, #88]	@ (8001130 <MX_ADC1_Init+0x98>)
 80010d8:	4a17      	ldr	r2, [pc, #92]	@ (8001138 <MX_ADC1_Init+0xa0>)
 80010da:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010dc:	4b14      	ldr	r3, [pc, #80]	@ (8001130 <MX_ADC1_Init+0x98>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80010e2:	4b13      	ldr	r3, [pc, #76]	@ (8001130 <MX_ADC1_Init+0x98>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80010e8:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <MX_ADC1_Init+0x98>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <MX_ADC1_Init+0x98>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80010f6:	480e      	ldr	r0, [pc, #56]	@ (8001130 <MX_ADC1_Init+0x98>)
 80010f8:	f000 fe7c 	bl	8001df4 <HAL_ADC_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_ADC1_Init+0x6e>
		Error_Handler();
 8001102:	f000 fba1 	bl	8001848 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001106:	2300      	movs	r3, #0
 8001108:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800110a:	2301      	movs	r3, #1
 800110c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800110e:	2300      	movs	r3, #0
 8001110:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001112:	463b      	mov	r3, r7
 8001114:	4619      	mov	r1, r3
 8001116:	4806      	ldr	r0, [pc, #24]	@ (8001130 <MX_ADC1_Init+0x98>)
 8001118:	f000 fff0 	bl	80020fc <HAL_ADC_ConfigChannel>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_ADC1_Init+0x8e>
		Error_Handler();
 8001122:	f000 fb91 	bl	8001848 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000090 	.word	0x20000090
 8001134:	40012000 	.word	0x40012000
 8001138:	0f000001 	.word	0x0f000001

0800113c <MX_CAN2_Init>:
/**
 * @brief CAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN2_Init(void) {
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 8001140:	4b16      	ldr	r3, [pc, #88]	@ (800119c <MX_CAN2_Init+0x60>)
 8001142:	4a17      	ldr	r2, [pc, #92]	@ (80011a0 <MX_CAN2_Init+0x64>)
 8001144:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 16;
 8001146:	4b15      	ldr	r3, [pc, #84]	@ (800119c <MX_CAN2_Init+0x60>)
 8001148:	2210      	movs	r2, #16
 800114a:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 800114c:	4b13      	ldr	r3, [pc, #76]	@ (800119c <MX_CAN2_Init+0x60>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001152:	4b12      	ldr	r3, [pc, #72]	@ (800119c <MX_CAN2_Init+0x60>)
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001158:	4b10      	ldr	r3, [pc, #64]	@ (800119c <MX_CAN2_Init+0x60>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 800115e:	4b0f      	ldr	r3, [pc, #60]	@ (800119c <MX_CAN2_Init+0x60>)
 8001160:	2200      	movs	r2, #0
 8001162:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 8001164:	4b0d      	ldr	r3, [pc, #52]	@ (800119c <MX_CAN2_Init+0x60>)
 8001166:	2200      	movs	r2, #0
 8001168:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 800116a:	4b0c      	ldr	r3, [pc, #48]	@ (800119c <MX_CAN2_Init+0x60>)
 800116c:	2200      	movs	r2, #0
 800116e:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8001170:	4b0a      	ldr	r3, [pc, #40]	@ (800119c <MX_CAN2_Init+0x60>)
 8001172:	2200      	movs	r2, #0
 8001174:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 8001176:	4b09      	ldr	r3, [pc, #36]	@ (800119c <MX_CAN2_Init+0x60>)
 8001178:	2200      	movs	r2, #0
 800117a:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 800117c:	4b07      	ldr	r3, [pc, #28]	@ (800119c <MX_CAN2_Init+0x60>)
 800117e:	2200      	movs	r2, #0
 8001180:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 8001182:	4b06      	ldr	r3, [pc, #24]	@ (800119c <MX_CAN2_Init+0x60>)
 8001184:	2200      	movs	r2, #0
 8001186:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK) {
 8001188:	4804      	ldr	r0, [pc, #16]	@ (800119c <MX_CAN2_Init+0x60>)
 800118a:	f001 f9dd 	bl	8002548 <HAL_CAN_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_CAN2_Init+0x5c>
		Error_Handler();
 8001194:	f000 fb58 	bl	8001848 <Error_Handler>
	}
	/* USER CODE BEGIN CAN2_Init 2 */

	/* USER CODE END CAN2_Init 2 */

}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}
 800119c:	200000d8 	.word	0x200000d8
 80011a0:	40006800 	.word	0x40006800

080011a4 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80011a8:	4b17      	ldr	r3, [pc, #92]	@ (8001208 <MX_SPI1_Init+0x64>)
 80011aa:	4a18      	ldr	r2, [pc, #96]	@ (800120c <MX_SPI1_Init+0x68>)
 80011ac:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80011ae:	4b16      	ldr	r3, [pc, #88]	@ (8001208 <MX_SPI1_Init+0x64>)
 80011b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011b4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011b6:	4b14      	ldr	r3, [pc, #80]	@ (8001208 <MX_SPI1_Init+0x64>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011bc:	4b12      	ldr	r3, [pc, #72]	@ (8001208 <MX_SPI1_Init+0x64>)
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011c2:	4b11      	ldr	r3, [pc, #68]	@ (8001208 <MX_SPI1_Init+0x64>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001208 <MX_SPI1_Init+0x64>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80011ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001208 <MX_SPI1_Init+0x64>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001208 <MX_SPI1_Init+0x64>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011da:	4b0b      	ldr	r3, [pc, #44]	@ (8001208 <MX_SPI1_Init+0x64>)
 80011dc:	2200      	movs	r2, #0
 80011de:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011e0:	4b09      	ldr	r3, [pc, #36]	@ (8001208 <MX_SPI1_Init+0x64>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011e6:	4b08      	ldr	r3, [pc, #32]	@ (8001208 <MX_SPI1_Init+0x64>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 80011ec:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <MX_SPI1_Init+0x64>)
 80011ee:	220a      	movs	r2, #10
 80011f0:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80011f2:	4805      	ldr	r0, [pc, #20]	@ (8001208 <MX_SPI1_Init+0x64>)
 80011f4:	f002 f986 	bl	8003504 <HAL_SPI_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_SPI1_Init+0x5e>
		Error_Handler();
 80011fe:	f000 fb23 	bl	8001848 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000100 	.word	0x20000100
 800120c:	40013000 	.word	0x40013000

08001210 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
//Timer for 500ms for interrupts
static void MX_TIM2_Init(void) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001216:	f107 0308 	add.w	r3, r7, #8
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001224:	463b      	mov	r3, r7
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800122c:	4b1e      	ldr	r3, [pc, #120]	@ (80012a8 <MX_TIM2_Init+0x98>)
 800122e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001232:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 959;
 8001234:	4b1c      	ldr	r3, [pc, #112]	@ (80012a8 <MX_TIM2_Init+0x98>)
 8001236:	f240 32bf 	movw	r2, #959	@ 0x3bf
 800123a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123c:	4b1a      	ldr	r3, [pc, #104]	@ (80012a8 <MX_TIM2_Init+0x98>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 49999;
 8001242:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <MX_TIM2_Init+0x98>)
 8001244:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001248:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124a:	4b17      	ldr	r3, [pc, #92]	@ (80012a8 <MX_TIM2_Init+0x98>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001250:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <MX_TIM2_Init+0x98>)
 8001252:	2280      	movs	r2, #128	@ 0x80
 8001254:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001256:	4814      	ldr	r0, [pc, #80]	@ (80012a8 <MX_TIM2_Init+0x98>)
 8001258:	f002 f9dd 	bl	8003616 <HAL_TIM_Base_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM2_Init+0x56>
		Error_Handler();
 8001262:	f000 faf1 	bl	8001848 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001266:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800126a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800126c:	f107 0308 	add.w	r3, r7, #8
 8001270:	4619      	mov	r1, r3
 8001272:	480d      	ldr	r0, [pc, #52]	@ (80012a8 <MX_TIM2_Init+0x98>)
 8001274:	f002 fb26 	bl	80038c4 <HAL_TIM_ConfigClockSource>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM2_Init+0x72>
		Error_Handler();
 800127e:	f000 fae3 	bl	8001848 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001282:	2300      	movs	r3, #0
 8001284:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001286:	2300      	movs	r3, #0
 8001288:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800128a:	463b      	mov	r3, r7
 800128c:	4619      	mov	r1, r3
 800128e:	4806      	ldr	r0, [pc, #24]	@ (80012a8 <MX_TIM2_Init+0x98>)
 8001290:	f002 fd38 	bl	8003d04 <HAL_TIMEx_MasterConfigSynchronization>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 800129a:	f000 fad5 	bl	8001848 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000158 	.word	0x20000158

080012ac <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80012b2:	f107 030c 	add.w	r3, r7, #12
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	4b43      	ldr	r3, [pc, #268]	@ (80013d4 <MX_GPIO_Init+0x128>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	4a42      	ldr	r2, [pc, #264]	@ (80013d4 <MX_GPIO_Init+0x128>)
 80012cc:	f043 0304 	orr.w	r3, r3, #4
 80012d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d2:	4b40      	ldr	r3, [pc, #256]	@ (80013d4 <MX_GPIO_Init+0x128>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	f003 0304 	and.w	r3, r3, #4
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	4b3c      	ldr	r3, [pc, #240]	@ (80013d4 <MX_GPIO_Init+0x128>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	4a3b      	ldr	r2, [pc, #236]	@ (80013d4 <MX_GPIO_Init+0x128>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ee:	4b39      	ldr	r3, [pc, #228]	@ (80013d4 <MX_GPIO_Init+0x128>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	603b      	str	r3, [r7, #0]
 80012fe:	4b35      	ldr	r3, [pc, #212]	@ (80013d4 <MX_GPIO_Init+0x128>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	4a34      	ldr	r2, [pc, #208]	@ (80013d4 <MX_GPIO_Init+0x128>)
 8001304:	f043 0302 	orr.w	r3, r3, #2
 8001308:	6313      	str	r3, [r2, #48]	@ 0x30
 800130a:	4b32      	ldr	r3, [pc, #200]	@ (80013d4 <MX_GPIO_Init+0x128>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 8001316:	2200      	movs	r2, #0
 8001318:	219f      	movs	r1, #159	@ 0x9f
 800131a:	482f      	ldr	r0, [pc, #188]	@ (80013d8 <MX_GPIO_Init+0x12c>)
 800131c:	f001 fcd3 	bl	8002cc6 <HAL_GPIO_WritePin>
			HVC_POS_Pin | HVC_NEG_Pin | P_CHARGE_Pin | CHARGE_POS_Pin
					| CHARGE_NEG_Pin | PUMP_ENABLE_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CTRL_OK_GPIO_Port, CTRL_OK_Pin, GPIO_PIN_RESET);
 8001320:	2200      	movs	r2, #0
 8001322:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001326:	482d      	ldr	r0, [pc, #180]	@ (80013dc <MX_GPIO_Init+0x130>)
 8001328:	f001 fccd 	bl	8002cc6 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : IMD_IO_L_Pin IGNITION_Pin CHARGE_ENABLE_Pin IMD_IO_H_Pin */
	GPIO_InitStruct.Pin = IMD_IO_L_Pin | IGNITION_Pin | CHARGE_ENABLE_Pin
 800132c:	f243 0360 	movw	r3, #12384	@ 0x3060
 8001330:	60fb      	str	r3, [r7, #12]
			| IMD_IO_H_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133a:	f107 030c 	add.w	r3, r7, #12
 800133e:	4619      	mov	r1, r3
 8001340:	4825      	ldr	r0, [pc, #148]	@ (80013d8 <MX_GPIO_Init+0x12c>)
 8001342:	f001 fb0b 	bl	800295c <HAL_GPIO_Init>

	/*Configure GPIO pins : HVC_POS_Pin HVC_NEG_Pin P_CHARGE_Pin CHARGE_POS_Pin
	 CHARGE_NEG_Pin PUMP_ENABLE_Pin */
	GPIO_InitStruct.Pin = HVC_POS_Pin | HVC_NEG_Pin | P_CHARGE_Pin
 8001346:	239f      	movs	r3, #159	@ 0x9f
 8001348:	60fb      	str	r3, [r7, #12]
			| CHARGE_POS_Pin | CHARGE_NEG_Pin | PUMP_ENABLE_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2301      	movs	r3, #1
 800134c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001356:	f107 030c 	add.w	r3, r7, #12
 800135a:	4619      	mov	r1, r3
 800135c:	481e      	ldr	r0, [pc, #120]	@ (80013d8 <MX_GPIO_Init+0x12c>)
 800135e:	f001 fafd 	bl	800295c <HAL_GPIO_Init>

	/*Configure GPIO pins : BMS_INPUT1_Pin BMS_INPUT2_Pin BMS_INPUT3_Pin SHDWN_ST_Pin */
	GPIO_InitStruct.Pin = BMS_INPUT1_Pin | BMS_INPUT2_Pin | BMS_INPUT3_Pin
 8001362:	f240 230e 	movw	r3, #526	@ 0x20e
 8001366:	60fb      	str	r3, [r7, #12]
			| SHDWN_ST_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001368:	2300      	movs	r3, #0
 800136a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	4619      	mov	r1, r3
 8001376:	4819      	ldr	r0, [pc, #100]	@ (80013dc <MX_GPIO_Init+0x130>)
 8001378:	f001 faf0 	bl	800295c <HAL_GPIO_Init>

	/*Configure GPIO pins : BMS_OK_L_Pin IMD_OK_L_Pin R1_AUX_Pin R2_AUX_Pin
	 R3_AUX_Pin R4_AUX_Pin */
	GPIO_InitStruct.Pin = BMS_OK_L_Pin | IMD_OK_L_Pin | R1_AUX_Pin | R2_AUX_Pin
 800137c:	23f3      	movs	r3, #243	@ 0xf3
 800137e:	60fb      	str	r3, [r7, #12]
			| R3_AUX_Pin | R4_AUX_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001380:	2300      	movs	r3, #0
 8001382:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	4619      	mov	r1, r3
 800138e:	4814      	ldr	r0, [pc, #80]	@ (80013e0 <MX_GPIO_Init+0x134>)
 8001390:	f001 fae4 	bl	800295c <HAL_GPIO_Init>

	/*Configure GPIO pin : CTRL_OK_Pin */
	GPIO_InitStruct.Pin = CTRL_OK_Pin;
 8001394:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001398:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139a:	2301      	movs	r3, #1
 800139c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(CTRL_OK_GPIO_Port, &GPIO_InitStruct);
 80013a6:	f107 030c 	add.w	r3, r7, #12
 80013aa:	4619      	mov	r1, r3
 80013ac:	480b      	ldr	r0, [pc, #44]	@ (80013dc <MX_GPIO_Init+0x130>)
 80013ae:	f001 fad5 	bl	800295c <HAL_GPIO_Init>

	/*Configure GPIO pin : HV_SENSEA10_Pin */
	GPIO_InitStruct.Pin = HV_SENSEA10_Pin;
 80013b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013b6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b8:	2303      	movs	r3, #3
 80013ba:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(HV_SENSEA10_GPIO_Port, &GPIO_InitStruct);
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	4619      	mov	r1, r3
 80013c6:	4805      	ldr	r0, [pc, #20]	@ (80013dc <MX_GPIO_Init+0x130>)
 80013c8:	f001 fac8 	bl	800295c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80013cc:	bf00      	nop
 80013ce:	3720      	adds	r7, #32
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020800 	.word	0x40020800
 80013dc:	40020000 	.word	0x40020000
 80013e0:	40020400 	.word	0x40020400

080013e4 <_write>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	e009      	b.n	800140a <_write+0x26>
		ITM_SendChar(*ptr++);
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	1c5a      	adds	r2, r3, #1
 80013fa:	60ba      	str	r2, [r7, #8]
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff fcfe 	bl	8000e00 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	3301      	adds	r3, #1
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	429a      	cmp	r2, r3
 8001410:	dbf1      	blt.n	80013f6 <_write+0x12>
	}
	return len;
 8001412:	687b      	ldr	r3, [r7, #4]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <HAL_TIM_PeriodElapsedCallback>:

//to my knowledge, this interrupt only checks 3 AUX pins not pump, charge, etc..
//I dont know how to set up interupt as on a timer -ray)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
// Check if the interrupt comes from TIM2
	if (htim->Instance == TIM2) {
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800142c:	f040 80d8 	bne.w	80015e0 <HAL_TIM_PeriodElapsedCallback+0x1c4>
		if (HAL_GPIO_ReadPin(SHDWN_ST_PORT, SHDWN_ST_Pin) == GPIO_PIN_SET) {
 8001430:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001434:	486c      	ldr	r0, [pc, #432]	@ (80015e8 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001436:	f001 fc2f 	bl	8002c98 <HAL_GPIO_ReadPin>
 800143a:	4603      	mov	r3, r0
 800143c:	2b01      	cmp	r3, #1
 800143e:	d102      	bne.n	8001446 <HAL_TIM_PeriodElapsedCallback+0x2a>
			Status = SHUTDOWN;
 8001440:	4b6a      	ldr	r3, [pc, #424]	@ (80015ec <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001442:	2201      	movs	r2, #1
 8001444:	701a      	strb	r2, [r3, #0]
		}

		switch (Status) {
 8001446:	4b69      	ldr	r3, [pc, #420]	@ (80015ec <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b06      	cmp	r3, #6
 800144c:	f200 80ba 	bhi.w	80015c4 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 8001450:	a201      	add	r2, pc, #4	@ (adr r2, 8001458 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001456:	bf00      	nop
 8001458:	08001475 	.word	0x08001475
 800145c:	080014a9 	.word	0x080014a9
 8001460:	080014df 	.word	0x080014df
 8001464:	0800150d 	.word	0x0800150d
 8001468:	0800153b 	.word	0x0800153b
 800146c:	08001569 	.word	0x08001569
 8001470:	08001597 	.word	0x08001597
		case UPDATING:
			if (updating_start_tick == 0) { // Initialize start tick on first entry
 8001474:	4b5e      	ldr	r3, [pc, #376]	@ (80015f0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d104      	bne.n	8001486 <HAL_TIM_PeriodElapsedCallback+0x6a>
				updating_start_tick = HAL_GetTick();
 800147c:	f000 fc8c 	bl	8001d98 <HAL_GetTick>
 8001480:	4603      	mov	r3, r0
 8001482:	4a5b      	ldr	r2, [pc, #364]	@ (80015f0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001484:	6013      	str	r3, [r2, #0]
			}
				// Check if 30 seconds have elapsed
			if ((HAL_GetTick() - updating_start_tick) > 30000) {
 8001486:	f000 fc87 	bl	8001d98 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	4b58      	ldr	r3, [pc, #352]	@ (80015f0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001496:	4293      	cmp	r3, r2
 8001498:	f240 8097 	bls.w	80015ca <HAL_TIM_PeriodElapsedCallback+0x1ae>
				updating_start_tick = 0;  // Reset for next use
 800149c:	4b54      	ldr	r3, [pc, #336]	@ (80015f0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
				Error_Handler();
 80014a2:	f000 f9d1 	bl	8001848 <Error_Handler>
			}
			break;
 80014a6:	e090      	b.n	80015ca <HAL_TIM_PeriodElapsedCallback+0x1ae>
		case SHUTDOWN:
			if (HAL_GPIO_ReadPin(IMD_OK_L_PORT, IMD_OK_L_Pin)
 80014a8:	2102      	movs	r1, #2
 80014aa:	4852      	ldr	r0, [pc, #328]	@ (80015f4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80014ac:	f001 fbf4 	bl	8002c98 <HAL_GPIO_ReadPin>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d103      	bne.n	80014be <HAL_TIM_PeriodElapsedCallback+0xa2>
					== GPIO_PIN_RESET) {
				printf("IMD NOT OK.\n");
 80014b6:	4850      	ldr	r0, [pc, #320]	@ (80015f8 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80014b8:	f002 fdda 	bl	8004070 <puts>
 80014bc:	e00d      	b.n	80014da <HAL_TIM_PeriodElapsedCallback+0xbe>
			} else if (HAL_GPIO_ReadPin(BMS_OK_L_PORT, BMS_OK_L_Pin)
 80014be:	2101      	movs	r1, #1
 80014c0:	484c      	ldr	r0, [pc, #304]	@ (80015f4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80014c2:	f001 fbe9 	bl	8002c98 <HAL_GPIO_ReadPin>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d103      	bne.n	80014d4 <HAL_TIM_PeriodElapsedCallback+0xb8>
					== GPIO_PIN_RESET) {
				printf("BMS NOT OK.\n");
 80014cc:	484b      	ldr	r0, [pc, #300]	@ (80015fc <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80014ce:	f002 fdcf 	bl	8004070 <puts>
 80014d2:	e002      	b.n	80014da <HAL_TIM_PeriodElapsedCallback+0xbe>
			} else {
				printf("Cause of shutdown is unknown.\n");
 80014d4:	484a      	ldr	r0, [pc, #296]	@ (8001600 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80014d6:	f002 fdcb 	bl	8004070 <puts>
			}
			Error_Handler();
 80014da:	f000 f9b5 	bl	8001848 <Error_Handler>
		case STANDBY:
			//i forgot which AUX pins we need to check for standby -ray
			if (HAL_GPIO_ReadPin(R1_AUX_PORT, R1_AUX_Pin) == GPIO_PIN_RESET) { //please double check all AUX pins -ray
 80014de:	2110      	movs	r1, #16
 80014e0:	4844      	ldr	r0, [pc, #272]	@ (80015f4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80014e2:	f001 fbd9 	bl	8002c98 <HAL_GPIO_ReadPin>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d10d      	bne.n	8001508 <HAL_TIM_PeriodElapsedCallback+0xec>
				if (HAL_GPIO_ReadPin(R2_AUX_PORT, R2_AUX_Pin)
 80014ec:	2120      	movs	r1, #32
 80014ee:	4841      	ldr	r0, [pc, #260]	@ (80015f4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80014f0:	f001 fbd2 	bl	8002c98 <HAL_GPIO_ReadPin>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d106      	bne.n	8001508 <HAL_TIM_PeriodElapsedCallback+0xec>
						== GPIO_PIN_RESET) { //also 3 if statements seems a bit more readable
					if (HAL_GPIO_ReadPin(R3_AUX_PORT, R3_AUX_Pin)
 80014fa:	2140      	movs	r1, #64	@ 0x40
 80014fc:	483d      	ldr	r0, [pc, #244]	@ (80015f4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80014fe:	f001 fbcb 	bl	8002c98 <HAL_GPIO_ReadPin>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d062      	beq.n	80015ce <HAL_TIM_PeriodElapsedCallback+0x1b2>
							== GPIO_PIN_RESET) {
						break;
					}
				}
			}
			Error_Handler();
 8001508:	f000 f99e 	bl	8001848 <Error_Handler>
		case CHARGING:
			//i dont know which AUX pins we need to check for charging -ray
			if (HAL_GPIO_ReadPin(R1_AUX_PORT, R1_AUX_Pin) == GPIO_PIN_RESET) { //please double check all AUX pins -ray
 800150c:	2110      	movs	r1, #16
 800150e:	4839      	ldr	r0, [pc, #228]	@ (80015f4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001510:	f001 fbc2 	bl	8002c98 <HAL_GPIO_ReadPin>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10d      	bne.n	8001536 <HAL_TIM_PeriodElapsedCallback+0x11a>
				if (HAL_GPIO_ReadPin(R2_AUX_PORT, R2_AUX_Pin)
 800151a:	2120      	movs	r1, #32
 800151c:	4835      	ldr	r0, [pc, #212]	@ (80015f4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800151e:	f001 fbbb 	bl	8002c98 <HAL_GPIO_ReadPin>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d106      	bne.n	8001536 <HAL_TIM_PeriodElapsedCallback+0x11a>
						== GPIO_PIN_RESET) { //also 3 if statements seems a bit more readable
					if (HAL_GPIO_ReadPin(R3_AUX_PORT, R3_AUX_Pin)
 8001528:	2140      	movs	r1, #64	@ 0x40
 800152a:	4832      	ldr	r0, [pc, #200]	@ (80015f4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800152c:	f001 fbb4 	bl	8002c98 <HAL_GPIO_ReadPin>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d04d      	beq.n	80015d2 <HAL_TIM_PeriodElapsedCallback+0x1b6>
							== GPIO_PIN_RESET) {
						break;
					}
				}
			}
			Error_Handler();
 8001536:	f000 f987 	bl	8001848 <Error_Handler>
		case PRECHARGE:
			if (HAL_GPIO_ReadPin(R1_AUX_PORT, R1_AUX_Pin) == GPIO_PIN_RESET) { //please double check all AUX pins -ray
 800153a:	2110      	movs	r1, #16
 800153c:	482d      	ldr	r0, [pc, #180]	@ (80015f4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800153e:	f001 fbab 	bl	8002c98 <HAL_GPIO_ReadPin>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d10d      	bne.n	8001564 <HAL_TIM_PeriodElapsedCallback+0x148>
				if (HAL_GPIO_ReadPin(R2_AUX_PORT, R2_AUX_Pin) == GPIO_PIN_SET) { //also 3 if statements seems a bit more readable
 8001548:	2120      	movs	r1, #32
 800154a:	482a      	ldr	r0, [pc, #168]	@ (80015f4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800154c:	f001 fba4 	bl	8002c98 <HAL_GPIO_ReadPin>
 8001550:	4603      	mov	r3, r0
 8001552:	2b01      	cmp	r3, #1
 8001554:	d106      	bne.n	8001564 <HAL_TIM_PeriodElapsedCallback+0x148>
					if (HAL_GPIO_ReadPin(R3_AUX_PORT, R3_AUX_Pin)
 8001556:	2140      	movs	r1, #64	@ 0x40
 8001558:	4826      	ldr	r0, [pc, #152]	@ (80015f4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800155a:	f001 fb9d 	bl	8002c98 <HAL_GPIO_ReadPin>
 800155e:	4603      	mov	r3, r0
 8001560:	2b01      	cmp	r3, #1
 8001562:	d038      	beq.n	80015d6 <HAL_TIM_PeriodElapsedCallback+0x1ba>
							== GPIO_PIN_SET) {
						break;
					}
				}
			}
			Error_Handler();
 8001564:	f000 f970 	bl	8001848 <Error_Handler>
		case OPERATION:
			if (HAL_GPIO_ReadPin(R1_AUX_PORT, R1_AUX_Pin) == GPIO_PIN_SET) {
 8001568:	2110      	movs	r1, #16
 800156a:	4822      	ldr	r0, [pc, #136]	@ (80015f4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800156c:	f001 fb94 	bl	8002c98 <HAL_GPIO_ReadPin>
 8001570:	4603      	mov	r3, r0
 8001572:	2b01      	cmp	r3, #1
 8001574:	d10d      	bne.n	8001592 <HAL_TIM_PeriodElapsedCallback+0x176>
				if (HAL_GPIO_ReadPin(R2_AUX_PORT, R2_AUX_Pin) == GPIO_PIN_SET) {
 8001576:	2120      	movs	r1, #32
 8001578:	481e      	ldr	r0, [pc, #120]	@ (80015f4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800157a:	f001 fb8d 	bl	8002c98 <HAL_GPIO_ReadPin>
 800157e:	4603      	mov	r3, r0
 8001580:	2b01      	cmp	r3, #1
 8001582:	d106      	bne.n	8001592 <HAL_TIM_PeriodElapsedCallback+0x176>
					if (HAL_GPIO_ReadPin(R3_AUX_PORT, R3_AUX_Pin)
 8001584:	2140      	movs	r1, #64	@ 0x40
 8001586:	481b      	ldr	r0, [pc, #108]	@ (80015f4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001588:	f001 fb86 	bl	8002c98 <HAL_GPIO_ReadPin>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d023      	beq.n	80015da <HAL_TIM_PeriodElapsedCallback+0x1be>
							== GPIO_PIN_RESET) {
						break;
					}
				}
			}
			Error_Handler();
 8001592:	f000 f959 	bl	8001848 <Error_Handler>
		case DISCHARGE:
			if (HAL_GPIO_ReadPin(R1_AUX_PORT, R1_AUX_Pin) == GPIO_PIN_RESET) {
 8001596:	2110      	movs	r1, #16
 8001598:	4816      	ldr	r0, [pc, #88]	@ (80015f4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800159a:	f001 fb7d 	bl	8002c98 <HAL_GPIO_ReadPin>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d10d      	bne.n	80015c0 <HAL_TIM_PeriodElapsedCallback+0x1a4>
				if (HAL_GPIO_ReadPin(R2_AUX_PORT, R3_AUX_Pin)
 80015a4:	2140      	movs	r1, #64	@ 0x40
 80015a6:	4813      	ldr	r0, [pc, #76]	@ (80015f4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80015a8:	f001 fb76 	bl	8002c98 <HAL_GPIO_ReadPin>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d106      	bne.n	80015c0 <HAL_TIM_PeriodElapsedCallback+0x1a4>
						== GPIO_PIN_RESET) {
					if (HAL_GPIO_ReadPin(R3_AUX_PORT, R3_AUX_Pin)
 80015b2:	2140      	movs	r1, #64	@ 0x40
 80015b4:	480f      	ldr	r0, [pc, #60]	@ (80015f4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80015b6:	f001 fb6f 	bl	8002c98 <HAL_GPIO_ReadPin>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d00e      	beq.n	80015de <HAL_TIM_PeriodElapsedCallback+0x1c2>
							== GPIO_PIN_RESET) {
						break;
					}
				}
			}
			Error_Handler();
 80015c0:	f000 f942 	bl	8001848 <Error_Handler>
		default:
			Error_Handler();
 80015c4:	f000 f940 	bl	8001848 <Error_Handler>
		}
	}
}
 80015c8:	e00a      	b.n	80015e0 <HAL_TIM_PeriodElapsedCallback+0x1c4>
			break;
 80015ca:	bf00      	nop
 80015cc:	e008      	b.n	80015e0 <HAL_TIM_PeriodElapsedCallback+0x1c4>
						break;
 80015ce:	bf00      	nop
 80015d0:	e006      	b.n	80015e0 <HAL_TIM_PeriodElapsedCallback+0x1c4>
						break;
 80015d2:	bf00      	nop
 80015d4:	e004      	b.n	80015e0 <HAL_TIM_PeriodElapsedCallback+0x1c4>
						break;
 80015d6:	bf00      	nop
 80015d8:	e002      	b.n	80015e0 <HAL_TIM_PeriodElapsedCallback+0x1c4>
						break;
 80015da:	bf00      	nop
 80015dc:	e000      	b.n	80015e0 <HAL_TIM_PeriodElapsedCallback+0x1c4>
						break;
 80015de:	bf00      	nop
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40020000 	.word	0x40020000
 80015ec:	20000000 	.word	0x20000000
 80015f0:	2000008c 	.word	0x2000008c
 80015f4:	40020400 	.word	0x40020400
 80015f8:	080047a4 	.word	0x080047a4
 80015fc:	080047b0 	.word	0x080047b0
 8001600:	080047bc 	.word	0x080047bc

08001604 <check_and_handle_pin_state>:
static inline void check_and_handle_pin_state(GPIO_TypeDef *GPIOx,
		uint16_t GPIO_Pin) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	807b      	strh	r3, [r7, #2]
	if (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) != GPIO_PIN_SET) {
 8001610:	887b      	ldrh	r3, [r7, #2]
 8001612:	4619      	mov	r1, r3
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f001 fb3f 	bl	8002c98 <HAL_GPIO_ReadPin>
 800161a:	4603      	mov	r3, r0
 800161c:	2b01      	cmp	r3, #1
 800161e:	d002      	beq.n	8001626 <check_and_handle_pin_state+0x22>
		//print("%s at %s: %d\n", PIN_SET_ERROR, __FILE__, __LINE__); // Optional: Log the error with file and line info
		Error_Handler();
 8001620:	f000 f912 	bl	8001848 <Error_Handler>
		return;
 8001624:	bf00      	nop
	}
}
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	0000      	movs	r0, r0
	...

08001630 <set_precharge>:

//these funcitons use mostly copied code from old main loop -ray
void set_precharge() {
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
	uint32_t start_tick = HAL_GetTick(); // in milliseconds
 8001636:	f000 fbaf 	bl	8001d98 <HAL_GetTick>
 800163a:	60b8      	str	r0, [r7, #8]
	uint32_t timeout = 30000; // Timeout set for 30000 milliseconds or 30 seconds
 800163c:	f247 5330 	movw	r3, #30000	@ 0x7530
 8001640:	607b      	str	r3, [r7, #4]
	float hv_sense_voltage;
	bool voltage_reached = false;
 8001642:	2300      	movs	r3, #0
 8001644:	73fb      	strb	r3, [r7, #15]

	Status = UPDATING;
 8001646:	4b24      	ldr	r3, [pc, #144]	@ (80016d8 <set_precharge+0xa8>)
 8001648:	2200      	movs	r2, #0
 800164a:	701a      	strb	r2, [r3, #0]
	allRelaysOpen();
 800164c:	f7ff fbfe 	bl	8000e4c <allRelaysOpen>
	HAL_GPIO_WritePin(HVC_NEG_PORT, HVC_NEG_Pin, GPIO_PIN_SET);
 8001650:	2201      	movs	r2, #1
 8001652:	2102      	movs	r1, #2
 8001654:	4821      	ldr	r0, [pc, #132]	@ (80016dc <set_precharge+0xac>)
 8001656:	f001 fb36 	bl	8002cc6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P_CHARGE_PORT, P_CHARGE_Pin, GPIO_PIN_SET);
 800165a:	2201      	movs	r2, #1
 800165c:	2104      	movs	r1, #4
 800165e:	481f      	ldr	r0, [pc, #124]	@ (80016dc <set_precharge+0xac>)
 8001660:	f001 fb31 	bl	8002cc6 <HAL_GPIO_WritePin>

	while (1) {
		hv_sense_voltage = Read_ADC_Voltage();
 8001664:	f000 f8b4 	bl	80017d0 <Read_ADC_Voltage>
 8001668:	6038      	str	r0, [r7, #0]
		if (hv_sense_voltage >= 0.9 * 103.6) { // Assume 103.6 is the BMS battery voltage setting
 800166a:	6838      	ldr	r0, [r7, #0]
 800166c:	f7fe ff10 	bl	8000490 <__aeabi_f2d>
 8001670:	a317      	add	r3, pc, #92	@ (adr r3, 80016d0 <set_precharge+0xa0>)
 8001672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001676:	f7ff f9e9 	bl	8000a4c <__aeabi_dcmpge>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d007      	beq.n	8001690 <set_precharge+0x60>
			voltage_reached = true;
 8001680:	2301      	movs	r3, #1
 8001682:	73fb      	strb	r3, [r7, #15]
			Status = PRECHARGE; // Successfully precharged, update status
 8001684:	4b14      	ldr	r3, [pc, #80]	@ (80016d8 <set_precharge+0xa8>)
 8001686:	2204      	movs	r2, #4
 8001688:	701a      	strb	r2, [r3, #0]
			while_operation();
 800168a:	f000 f82b 	bl	80016e4 <while_operation>
			break; // Exit the loop on successful precharge
 800168e:	e00d      	b.n	80016ac <set_precharge+0x7c>
		}

		// Check for timeout
		if (HAL_GetTick() - start_tick >= timeout) {
 8001690:	f000 fb82 	bl	8001d98 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	429a      	cmp	r2, r3
 800169e:	d904      	bls.n	80016aa <set_precharge+0x7a>
			break; // Exit the loop after timeout
		}

		HAL_Delay(1000); // Delay for 1 second before checking again
 80016a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016a4:	f000 fb82 	bl	8001dac <HAL_Delay>
		hv_sense_voltage = Read_ADC_Voltage();
 80016a8:	e7dc      	b.n	8001664 <set_precharge+0x34>
			break; // Exit the loop after timeout
 80016aa:	bf00      	nop
	}

	if (!voltage_reached) {
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
 80016ae:	f083 0301 	eor.w	r3, r3, #1
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d005      	beq.n	80016c4 <set_precharge+0x94>
		printf("Failed to reach the required voltage within 30 seconds.\n");
 80016b8:	4809      	ldr	r0, [pc, #36]	@ (80016e0 <set_precharge+0xb0>)
 80016ba:	f002 fcd9 	bl	8004070 <puts>
		Error_Handler(); // Handle the timeout error
 80016be:	f000 f8c3 	bl	8001848 <Error_Handler>
	}
	return;
 80016c2:	bf00      	nop
 80016c4:	bf00      	nop
}
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	f3af 8000 	nop.w
 80016d0:	28f5c28f 	.word	0x28f5c28f
 80016d4:	40574f5c 	.word	0x40574f5c
 80016d8:	20000000 	.word	0x20000000
 80016dc:	40020800 	.word	0x40020800
 80016e0:	080047dc 	.word	0x080047dc

080016e4 <while_operation>:

void while_operation() {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(IGNITION_PORT, IGNITION_Pin) == GPIO_PIN_RESET) {
 80016e8:	2120      	movs	r1, #32
 80016ea:	4813      	ldr	r0, [pc, #76]	@ (8001738 <while_operation+0x54>)
 80016ec:	f001 fad4 	bl	8002c98 <HAL_GPIO_ReadPin>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d102      	bne.n	80016fc <while_operation+0x18>
		set_discharge();
 80016f6:	f000 f823 	bl	8001740 <set_discharge>
		HAL_GPIO_WritePin(P_CHARGE_PORT, P_CHARGE_Pin, GPIO_PIN_RESET);
		check_and_handle_pin_state(P_CHARGE_PORT, P_CHARGE_Pin);

		Status = OPERATION; // Set status to OPERATION
	}
	return;
 80016fa:	e01c      	b.n	8001736 <while_operation+0x52>
		Status = UPDATING;
 80016fc:	4b0f      	ldr	r3, [pc, #60]	@ (800173c <while_operation+0x58>)
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(HVC_POS_PORT, HVC_POS_Pin, GPIO_PIN_SET);
 8001702:	2201      	movs	r2, #1
 8001704:	2101      	movs	r1, #1
 8001706:	480c      	ldr	r0, [pc, #48]	@ (8001738 <while_operation+0x54>)
 8001708:	f001 fadd 	bl	8002cc6 <HAL_GPIO_WritePin>
		check_and_handle_pin_state(HVC_POS_PORT, HVC_POS_Pin);
 800170c:	2101      	movs	r1, #1
 800170e:	480a      	ldr	r0, [pc, #40]	@ (8001738 <while_operation+0x54>)
 8001710:	f7ff ff78 	bl	8001604 <check_and_handle_pin_state>
		HAL_Delay(1000); // Wait for 1 second to ensure stability
 8001714:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001718:	f000 fb48 	bl	8001dac <HAL_Delay>
		HAL_GPIO_WritePin(P_CHARGE_PORT, P_CHARGE_Pin, GPIO_PIN_RESET);
 800171c:	2200      	movs	r2, #0
 800171e:	2104      	movs	r1, #4
 8001720:	4805      	ldr	r0, [pc, #20]	@ (8001738 <while_operation+0x54>)
 8001722:	f001 fad0 	bl	8002cc6 <HAL_GPIO_WritePin>
		check_and_handle_pin_state(P_CHARGE_PORT, P_CHARGE_Pin);
 8001726:	2104      	movs	r1, #4
 8001728:	4803      	ldr	r0, [pc, #12]	@ (8001738 <while_operation+0x54>)
 800172a:	f7ff ff6b 	bl	8001604 <check_and_handle_pin_state>
		Status = OPERATION; // Set status to OPERATION
 800172e:	4b03      	ldr	r3, [pc, #12]	@ (800173c <while_operation+0x58>)
 8001730:	2205      	movs	r2, #5
 8001732:	701a      	strb	r2, [r3, #0]
	return;
 8001734:	bf00      	nop
}
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40020800 	.word	0x40020800
 800173c:	20000000 	.word	0x20000000

08001740 <set_discharge>:

void set_discharge() {
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
	Status = UPDATING;
 8001744:	4b0d      	ldr	r3, [pc, #52]	@ (800177c <set_discharge+0x3c>)
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]
	HAL_Delay(30000); // 30-second delay for any necessary pre-discharge preparations
 800174a:	f247 5030 	movw	r0, #30000	@ 0x7530
 800174e:	f000 fb2d 	bl	8001dac <HAL_Delay>

	allRelaysOpen(); // Open all relays to ensure system is in a safe state before discharging
 8001752:	f7ff fb7b 	bl	8000e4c <allRelaysOpen>

	HAL_GPIO_WritePin(CTRL_OK_GPIO_Port, CTRL_OK_Pin, GPIO_PIN_RESET);
 8001756:	2200      	movs	r2, #0
 8001758:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800175c:	4808      	ldr	r0, [pc, #32]	@ (8001780 <set_discharge+0x40>)
 800175e:	f001 fab2 	bl	8002cc6 <HAL_GPIO_WritePin>
	check_and_handle_pin_state(CTRL_OK_GPIO_Port, CTRL_OK_Pin);
 8001762:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001766:	4806      	ldr	r0, [pc, #24]	@ (8001780 <set_discharge+0x40>)
 8001768:	f7ff ff4c 	bl	8001604 <check_and_handle_pin_state>

	operation = 0; // Reset operation status
 800176c:	4b05      	ldr	r3, [pc, #20]	@ (8001784 <set_discharge+0x44>)
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
	Status = DISCHARGE; // Set status to DISCHARGE
 8001772:	4b02      	ldr	r3, [pc, #8]	@ (800177c <set_discharge+0x3c>)
 8001774:	2206      	movs	r2, #6
 8001776:	701a      	strb	r2, [r3, #0]
	return;
 8001778:	bf00      	nop
}
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000000 	.word	0x20000000
 8001780:	40020000 	.word	0x40020000
 8001784:	20000088 	.word	0x20000088

08001788 <set_charging>:

void set_charging() {
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
	Status = UPDATING;
 800178c:	4b0d      	ldr	r3, [pc, #52]	@ (80017c4 <set_charging+0x3c>)
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]
	allRelaysOpen();  // Open all relays to ensure the system is in a safe state
 8001792:	f7ff fb5b 	bl	8000e4c <allRelaysOpen>

	// Set CHARGE_NEG_PIN and check if it is set correctly
	HAL_GPIO_WritePin(CHARGE_NEG_PORT, CHARGE_NEG_Pin, GPIO_PIN_SET);
 8001796:	2201      	movs	r2, #1
 8001798:	2110      	movs	r1, #16
 800179a:	480b      	ldr	r0, [pc, #44]	@ (80017c8 <set_charging+0x40>)
 800179c:	f001 fa93 	bl	8002cc6 <HAL_GPIO_WritePin>
	check_and_handle_pin_state(CHARGE_NEG_PORT, CHARGE_NEG_Pin);
 80017a0:	2110      	movs	r1, #16
 80017a2:	4809      	ldr	r0, [pc, #36]	@ (80017c8 <set_charging+0x40>)
 80017a4:	f7ff ff2e 	bl	8001604 <check_and_handle_pin_state>

	// Set CHARGE_POS_PIN and check if it is set correctly
	HAL_GPIO_WritePin(CHARGE_POS_PORT, CHARGE_POS_Pin, GPIO_PIN_SET);
 80017a8:	2201      	movs	r2, #1
 80017aa:	2108      	movs	r1, #8
 80017ac:	4806      	ldr	r0, [pc, #24]	@ (80017c8 <set_charging+0x40>)
 80017ae:	f001 fa8a 	bl	8002cc6 <HAL_GPIO_WritePin>
	check_and_handle_pin_state(CHARGE_POS_PORT, CHARGE_POS_Pin);
 80017b2:	2108      	movs	r1, #8
 80017b4:	4804      	ldr	r0, [pc, #16]	@ (80017c8 <set_charging+0x40>)
 80017b6:	f7ff ff25 	bl	8001604 <check_and_handle_pin_state>

	Status = CHARGING; // Update system status to CHARGING after successful pin settings
 80017ba:	4b02      	ldr	r3, [pc, #8]	@ (80017c4 <set_charging+0x3c>)
 80017bc:	2203      	movs	r2, #3
 80017be:	701a      	strb	r2, [r3, #0]
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000000 	.word	0x20000000
 80017c8:	40020800 	.word	0x40020800
 80017cc:	00000000 	.word	0x00000000

080017d0 <Read_ADC_Voltage>:

float Read_ADC_Voltage(void) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
	uint32_t hv_sense_value;
	// Start the ADC
	HAL_ADC_Start(&hadc1);
 80017d6:	481a      	ldr	r0, [pc, #104]	@ (8001840 <Read_ADC_Voltage+0x70>)
 80017d8:	f000 fb50 	bl	8001e7c <HAL_ADC_Start>

	// Poll for conversion completion with a timeout of 10ms
	if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 80017dc:	2164      	movs	r1, #100	@ 0x64
 80017de:	4818      	ldr	r0, [pc, #96]	@ (8001840 <Read_ADC_Voltage+0x70>)
 80017e0:	f000 fbfc 	bl	8001fdc <HAL_ADC_PollForConversion>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d11c      	bne.n	8001824 <Read_ADC_Voltage+0x54>
		hv_sense_value = HAL_ADC_GetValue(&hadc1);
 80017ea:	4815      	ldr	r0, [pc, #84]	@ (8001840 <Read_ADC_Voltage+0x70>)
 80017ec:	f000 fc7a 	bl	80020e4 <HAL_ADC_GetValue>
 80017f0:	6078      	str	r0, [r7, #4]
		return (hv_sense_value / 4095.0) * 103.6;
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7fe fe2a 	bl	800044c <__aeabi_ui2d>
 80017f8:	a30d      	add	r3, pc, #52	@ (adr r3, 8001830 <Read_ADC_Voltage+0x60>)
 80017fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fe:	f7fe ffc9 	bl	8000794 <__aeabi_ddiv>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4610      	mov	r0, r2
 8001808:	4619      	mov	r1, r3
 800180a:	a30b      	add	r3, pc, #44	@ (adr r3, 8001838 <Read_ADC_Voltage+0x68>)
 800180c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001810:	f7fe fe96 	bl	8000540 <__aeabi_dmul>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	f7ff f92a 	bl	8000a74 <__aeabi_d2f>
 8001820:	4603      	mov	r3, r0
 8001822:	e000      	b.n	8001826 <Read_ADC_Voltage+0x56>
	} else {
		// Handle the error or return a default value
		return -1.0f;  // Indicate an error in conversion
 8001824:	4b07      	ldr	r3, [pc, #28]	@ (8001844 <Read_ADC_Voltage+0x74>)
	}
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	00000000 	.word	0x00000000
 8001834:	40affe00 	.word	0x40affe00
 8001838:	66666666 	.word	0x66666666
 800183c:	4059e666 	.word	0x4059e666
 8001840:	20000090 	.word	0x20000090
 8001844:	bf800000 	.word	0xbf800000

08001848 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800184c:	b672      	cpsid	i
}
 800184e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		allRelaysOpen();
 8001850:	f7ff fafc 	bl	8000e4c <allRelaysOpen>
		HAL_GPIO_WritePin(CTRL_OK_GPIO_Port, CTRL_OK_Pin, GPIO_PIN_RESET);
 8001854:	2200      	movs	r2, #0
 8001856:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800185a:	4803      	ldr	r0, [pc, #12]	@ (8001868 <Error_Handler+0x20>)
 800185c:	f001 fa33 	bl	8002cc6 <HAL_GPIO_WritePin>
		exit(0);
 8001860:	2000      	movs	r0, #0
 8001862:	f002 fadb 	bl	8003e1c <exit>
 8001866:	bf00      	nop
 8001868:	40020000 	.word	0x40020000

0800186c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	607b      	str	r3, [r7, #4]
 8001876:	4b0f      	ldr	r3, [pc, #60]	@ (80018b4 <HAL_MspInit+0x48>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800187a:	4a0e      	ldr	r2, [pc, #56]	@ (80018b4 <HAL_MspInit+0x48>)
 800187c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001880:	6453      	str	r3, [r2, #68]	@ 0x44
 8001882:	4b0c      	ldr	r3, [pc, #48]	@ (80018b4 <HAL_MspInit+0x48>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001886:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800188a:	607b      	str	r3, [r7, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	603b      	str	r3, [r7, #0]
 8001892:	4b08      	ldr	r3, [pc, #32]	@ (80018b4 <HAL_MspInit+0x48>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001896:	4a07      	ldr	r2, [pc, #28]	@ (80018b4 <HAL_MspInit+0x48>)
 8001898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800189c:	6413      	str	r3, [r2, #64]	@ 0x40
 800189e:	4b05      	ldr	r3, [pc, #20]	@ (80018b4 <HAL_MspInit+0x48>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018a6:	603b      	str	r3, [r7, #0]
 80018a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr
 80018b4:	40023800 	.word	0x40023800

080018b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08a      	sub	sp, #40	@ 0x28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a17      	ldr	r2, [pc, #92]	@ (8001934 <HAL_ADC_MspInit+0x7c>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d127      	bne.n	800192a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	4b16      	ldr	r3, [pc, #88]	@ (8001938 <HAL_ADC_MspInit+0x80>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e2:	4a15      	ldr	r2, [pc, #84]	@ (8001938 <HAL_ADC_MspInit+0x80>)
 80018e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ea:	4b13      	ldr	r3, [pc, #76]	@ (8001938 <HAL_ADC_MspInit+0x80>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001938 <HAL_ADC_MspInit+0x80>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001938 <HAL_ADC_MspInit+0x80>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	6313      	str	r3, [r2, #48]	@ 0x30
 8001906:	4b0c      	ldr	r3, [pc, #48]	@ (8001938 <HAL_ADC_MspInit+0x80>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = HV_SENSE_Pin;
 8001912:	2301      	movs	r3, #1
 8001914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001916:	2303      	movs	r3, #3
 8001918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(HV_SENSE_GPIO_Port, &GPIO_InitStruct);
 800191e:	f107 0314 	add.w	r3, r7, #20
 8001922:	4619      	mov	r1, r3
 8001924:	4805      	ldr	r0, [pc, #20]	@ (800193c <HAL_ADC_MspInit+0x84>)
 8001926:	f001 f819 	bl	800295c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800192a:	bf00      	nop
 800192c:	3728      	adds	r7, #40	@ 0x28
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40012000 	.word	0x40012000
 8001938:	40023800 	.word	0x40023800
 800193c:	40020000 	.word	0x40020000

08001940 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08a      	sub	sp, #40	@ 0x28
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a20      	ldr	r2, [pc, #128]	@ (80019e0 <HAL_CAN_MspInit+0xa0>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d13a      	bne.n	80019d8 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	4b1f      	ldr	r3, [pc, #124]	@ (80019e4 <HAL_CAN_MspInit+0xa4>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196a:	4a1e      	ldr	r2, [pc, #120]	@ (80019e4 <HAL_CAN_MspInit+0xa4>)
 800196c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001970:	6413      	str	r3, [r2, #64]	@ 0x40
 8001972:	4b1c      	ldr	r3, [pc, #112]	@ (80019e4 <HAL_CAN_MspInit+0xa4>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001976:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	4b18      	ldr	r3, [pc, #96]	@ (80019e4 <HAL_CAN_MspInit+0xa4>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001986:	4a17      	ldr	r2, [pc, #92]	@ (80019e4 <HAL_CAN_MspInit+0xa4>)
 8001988:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800198c:	6413      	str	r3, [r2, #64]	@ 0x40
 800198e:	4b15      	ldr	r3, [pc, #84]	@ (80019e4 <HAL_CAN_MspInit+0xa4>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	4b11      	ldr	r3, [pc, #68]	@ (80019e4 <HAL_CAN_MspInit+0xa4>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	4a10      	ldr	r2, [pc, #64]	@ (80019e4 <HAL_CAN_MspInit+0xa4>)
 80019a4:	f043 0302 	orr.w	r3, r3, #2
 80019a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019aa:	4b0e      	ldr	r3, [pc, #56]	@ (80019e4 <HAL_CAN_MspInit+0xa4>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80019b6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80019ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019bc:	2302      	movs	r3, #2
 80019be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c4:	2303      	movs	r3, #3
 80019c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80019c8:	2309      	movs	r3, #9
 80019ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	4619      	mov	r1, r3
 80019d2:	4805      	ldr	r0, [pc, #20]	@ (80019e8 <HAL_CAN_MspInit+0xa8>)
 80019d4:	f000 ffc2 	bl	800295c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80019d8:	bf00      	nop
 80019da:	3728      	adds	r7, #40	@ 0x28
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40006800 	.word	0x40006800
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40020400 	.word	0x40020400

080019ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08a      	sub	sp, #40	@ 0x28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a19      	ldr	r2, [pc, #100]	@ (8001a70 <HAL_SPI_MspInit+0x84>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d12b      	bne.n	8001a66 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	4b18      	ldr	r3, [pc, #96]	@ (8001a74 <HAL_SPI_MspInit+0x88>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a16:	4a17      	ldr	r2, [pc, #92]	@ (8001a74 <HAL_SPI_MspInit+0x88>)
 8001a18:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a1e:	4b15      	ldr	r3, [pc, #84]	@ (8001a74 <HAL_SPI_MspInit+0x88>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	4b11      	ldr	r3, [pc, #68]	@ (8001a74 <HAL_SPI_MspInit+0x88>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a32:	4a10      	ldr	r2, [pc, #64]	@ (8001a74 <HAL_SPI_MspInit+0x88>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a74 <HAL_SPI_MspInit+0x88>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a46:	23f0      	movs	r3, #240	@ 0xf0
 8001a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a52:	2303      	movs	r3, #3
 8001a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a56:	2305      	movs	r3, #5
 8001a58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5a:	f107 0314 	add.w	r3, r7, #20
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4805      	ldr	r0, [pc, #20]	@ (8001a78 <HAL_SPI_MspInit+0x8c>)
 8001a62:	f000 ff7b 	bl	800295c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a66:	bf00      	nop
 8001a68:	3728      	adds	r7, #40	@ 0x28
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40013000 	.word	0x40013000
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40020000 	.word	0x40020000

08001a7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a8c:	d115      	bne.n	8001aba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac4 <HAL_TIM_Base_MspInit+0x48>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a96:	4a0b      	ldr	r2, [pc, #44]	@ (8001ac4 <HAL_TIM_Base_MspInit+0x48>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a9e:	4b09      	ldr	r3, [pc, #36]	@ (8001ac4 <HAL_TIM_Base_MspInit+0x48>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2100      	movs	r1, #0
 8001aae:	201c      	movs	r0, #28
 8001ab0:	f000 ff1d 	bl	80028ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ab4:	201c      	movs	r0, #28
 8001ab6:	f000 ff36 	bl	8002926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001aba:	bf00      	nop
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40023800 	.word	0x40023800

08001ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001acc:	bf00      	nop
 8001ace:	e7fd      	b.n	8001acc <NMI_Handler+0x4>

08001ad0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad4:	bf00      	nop
 8001ad6:	e7fd      	b.n	8001ad4 <HardFault_Handler+0x4>

08001ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001adc:	bf00      	nop
 8001ade:	e7fd      	b.n	8001adc <MemManage_Handler+0x4>

08001ae0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ae4:	bf00      	nop
 8001ae6:	e7fd      	b.n	8001ae4 <BusFault_Handler+0x4>

08001ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aec:	bf00      	nop
 8001aee:	e7fd      	b.n	8001aec <UsageFault_Handler+0x4>

08001af0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr

08001afc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr

08001b08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr

08001b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b18:	f000 f92c 	bl	8001d74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b24:	4802      	ldr	r0, [pc, #8]	@ (8001b30 <TIM2_IRQHandler+0x10>)
 8001b26:	f001 fdc5 	bl	80036b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000158 	.word	0x20000158

08001b34 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b3e:	f002 fbc5 	bl	80042cc <__errno>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2216      	movs	r2, #22
 8001b46:	601a      	str	r2, [r3, #0]
  return -1;
 8001b48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <_exit>:

void _exit (int status)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff ffe7 	bl	8001b34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b66:	bf00      	nop
 8001b68:	e7fd      	b.n	8001b66 <_exit+0x12>

08001b6a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b086      	sub	sp, #24
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	60f8      	str	r0, [r7, #12]
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	e00a      	b.n	8001b92 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b7c:	f3af 8000 	nop.w
 8001b80:	4601      	mov	r1, r0
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	1c5a      	adds	r2, r3, #1
 8001b86:	60ba      	str	r2, [r7, #8]
 8001b88:	b2ca      	uxtb	r2, r1
 8001b8a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	dbf0      	blt.n	8001b7c <_read+0x12>
  }

  return len;
 8001b9a:	687b      	ldr	r3, [r7, #4]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr

08001bba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
 8001bc2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bca:	605a      	str	r2, [r3, #4]
  return 0;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr

08001bd8 <_isatty>:

int _isatty(int file)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001be0:	2301      	movs	r3, #1
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr

08001bec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c0c:	4a14      	ldr	r2, [pc, #80]	@ (8001c60 <_sbrk+0x5c>)
 8001c0e:	4b15      	ldr	r3, [pc, #84]	@ (8001c64 <_sbrk+0x60>)
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c18:	4b13      	ldr	r3, [pc, #76]	@ (8001c68 <_sbrk+0x64>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d102      	bne.n	8001c26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c20:	4b11      	ldr	r3, [pc, #68]	@ (8001c68 <_sbrk+0x64>)
 8001c22:	4a12      	ldr	r2, [pc, #72]	@ (8001c6c <_sbrk+0x68>)
 8001c24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c26:	4b10      	ldr	r3, [pc, #64]	@ (8001c68 <_sbrk+0x64>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d207      	bcs.n	8001c44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c34:	f002 fb4a 	bl	80042cc <__errno>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	220c      	movs	r2, #12
 8001c3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c42:	e009      	b.n	8001c58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c44:	4b08      	ldr	r3, [pc, #32]	@ (8001c68 <_sbrk+0x64>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c4a:	4b07      	ldr	r3, [pc, #28]	@ (8001c68 <_sbrk+0x64>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	4a05      	ldr	r2, [pc, #20]	@ (8001c68 <_sbrk+0x64>)
 8001c54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c56:	68fb      	ldr	r3, [r7, #12]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	2000c000 	.word	0x2000c000
 8001c64:	00000400 	.word	0x00000400
 8001c68:	200001a0 	.word	0x200001a0
 8001c6c:	200002f8 	.word	0x200002f8

08001c70 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cb4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8001c80:	f7ff fff6 	bl	8001c70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c84:	480c      	ldr	r0, [pc, #48]	@ (8001cb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c86:	490d      	ldr	r1, [pc, #52]	@ (8001cbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c88:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c8c:	e002      	b.n	8001c94 <LoopCopyDataInit>

08001c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c92:	3304      	adds	r3, #4

08001c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c98:	d3f9      	bcc.n	8001c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c9c:	4c0a      	ldr	r4, [pc, #40]	@ (8001cc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca0:	e001      	b.n	8001ca6 <LoopFillZerobss>

08001ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca4:	3204      	adds	r2, #4

08001ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca8:	d3fb      	bcc.n	8001ca2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001caa:	f002 fb15 	bl	80042d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cae:	f7ff f979 	bl	8000fa4 <main>
  bx  lr    
 8001cb2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001cb4:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cbc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001cc0:	08004834 	.word	0x08004834
  ldr r2, =_sbss
 8001cc4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001cc8:	200002f4 	.word	0x200002f4

08001ccc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ccc:	e7fe      	b.n	8001ccc <ADC_IRQHandler>
	...

08001cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8001d10 <HAL_Init+0x40>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d10 <HAL_Init+0x40>)
 8001cda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d10 <HAL_Init+0x40>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a0a      	ldr	r2, [pc, #40]	@ (8001d10 <HAL_Init+0x40>)
 8001ce6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cec:	4b08      	ldr	r3, [pc, #32]	@ (8001d10 <HAL_Init+0x40>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a07      	ldr	r2, [pc, #28]	@ (8001d10 <HAL_Init+0x40>)
 8001cf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cf8:	2003      	movs	r0, #3
 8001cfa:	f000 fded 	bl	80028d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cfe:	200f      	movs	r0, #15
 8001d00:	f000 f808 	bl	8001d14 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001d04:	f7ff fdb2 	bl	800186c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40023c00 	.word	0x40023c00

08001d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d1c:	4b12      	ldr	r3, [pc, #72]	@ (8001d68 <HAL_InitTick+0x54>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4b12      	ldr	r3, [pc, #72]	@ (8001d6c <HAL_InitTick+0x58>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	4619      	mov	r1, r3
 8001d26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 fe05 	bl	8002942 <HAL_SYSTICK_Config>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e00e      	b.n	8001d60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b0f      	cmp	r3, #15
 8001d46:	d80a      	bhi.n	8001d5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d50:	f000 fdcd 	bl	80028ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d54:	4a06      	ldr	r2, [pc, #24]	@ (8001d70 <HAL_InitTick+0x5c>)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	e000      	b.n	8001d60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000004 	.word	0x20000004
 8001d6c:	2000000c 	.word	0x2000000c
 8001d70:	20000008 	.word	0x20000008

08001d74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d78:	4b05      	ldr	r3, [pc, #20]	@ (8001d90 <HAL_IncTick+0x1c>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4b05      	ldr	r3, [pc, #20]	@ (8001d94 <HAL_IncTick+0x20>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4413      	add	r3, r2
 8001d84:	4a03      	ldr	r2, [pc, #12]	@ (8001d94 <HAL_IncTick+0x20>)
 8001d86:	6013      	str	r3, [r2, #0]
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr
 8001d90:	2000000c 	.word	0x2000000c
 8001d94:	200001a4 	.word	0x200001a4

08001d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d9c:	4b02      	ldr	r3, [pc, #8]	@ (8001da8 <HAL_GetTick+0x10>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr
 8001da8:	200001a4 	.word	0x200001a4

08001dac <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001db4:	f7ff fff0 	bl	8001d98 <HAL_GetTick>
 8001db8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc4:	d005      	beq.n	8001dd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001df0 <HAL_Delay+0x44>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4413      	add	r3, r2
 8001dd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dd2:	bf00      	nop
 8001dd4:	f7ff ffe0 	bl	8001d98 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d8f7      	bhi.n	8001dd4 <HAL_Delay+0x28>
  {
  }
}
 8001de4:	bf00      	nop
 8001de6:	bf00      	nop
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	2000000c 	.word	0x2000000c

08001df4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e033      	b.n	8001e72 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d109      	bne.n	8001e26 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff fd50 	bl	80018b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2a:	f003 0310 	and.w	r3, r3, #16
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d118      	bne.n	8001e64 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e36:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e3a:	f023 0302 	bic.w	r3, r3, #2
 8001e3e:	f043 0202 	orr.w	r2, r3, #2
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 fa78 	bl	800233c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e56:	f023 0303 	bic.w	r3, r3, #3
 8001e5a:	f043 0201 	orr.w	r2, r3, #1
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e62:	e001      	b.n	8001e68 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d101      	bne.n	8001e96 <HAL_ADC_Start+0x1a>
 8001e92:	2302      	movs	r3, #2
 8001e94:	e095      	b.n	8001fc2 <HAL_ADC_Start+0x146>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d018      	beq.n	8001ede <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0201 	orr.w	r2, r2, #1
 8001eba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ebc:	4b43      	ldr	r3, [pc, #268]	@ (8001fcc <HAL_ADC_Start+0x150>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a43      	ldr	r2, [pc, #268]	@ (8001fd0 <HAL_ADC_Start+0x154>)
 8001ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec6:	0c9a      	lsrs	r2, r3, #18
 8001ec8:	4613      	mov	r3, r2
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	4413      	add	r3, r2
 8001ece:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8001ed0:	e002      	b.n	8001ed8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f9      	bne.n	8001ed2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d15d      	bne.n	8001fa8 <HAL_ADC_Start+0x12c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001ef4:	f023 0301 	bic.w	r3, r3, #1
 8001ef8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d007      	beq.n	8001f1e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f12:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f16:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f2a:	d106      	bne.n	8001f3a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f30:	f023 0206 	bic.w	r2, r3, #6
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	645a      	str	r2, [r3, #68]	@ 0x44
 8001f38:	e002      	b.n	8001f40 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001f50:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001f52:	4b20      	ldr	r3, [pc, #128]	@ (8001fd4 <HAL_ADC_Start+0x158>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 031f 	and.w	r3, r3, #31
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10f      	bne.n	8001f7e <HAL_ADC_Start+0x102>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d129      	bne.n	8001fc0 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	e020      	b.n	8001fc0 <HAL_ADC_Start+0x144>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a15      	ldr	r2, [pc, #84]	@ (8001fd8 <HAL_ADC_Start+0x15c>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d11b      	bne.n	8001fc0 <HAL_ADC_Start+0x144>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d114      	bne.n	8001fc0 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001fa4:	609a      	str	r2, [r3, #8]
 8001fa6:	e00b      	b.n	8001fc0 <HAL_ADC_Start+0x144>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fac:	f043 0210 	orr.w	r2, r3, #16
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb8:	f043 0201 	orr.w	r2, r3, #1
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr
 8001fcc:	20000004 	.word	0x20000004
 8001fd0:	431bde83 	.word	0x431bde83
 8001fd4:	40012300 	.word	0x40012300
 8001fd8:	40012000 	.word	0x40012000

08001fdc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ff4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ff8:	d113      	bne.n	8002022 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002004:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002008:	d10b      	bne.n	8002022 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200e:	f043 0220 	orr.w	r2, r3, #32
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e05c      	b.n	80020dc <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002022:	f7ff feb9 	bl	8001d98 <HAL_GetTick>
 8002026:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002028:	e01a      	b.n	8002060 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002030:	d016      	beq.n	8002060 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d007      	beq.n	8002048 <HAL_ADC_PollForConversion+0x6c>
 8002038:	f7ff feae 	bl	8001d98 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	429a      	cmp	r2, r3
 8002046:	d20b      	bcs.n	8002060 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204c:	f043 0204 	orr.w	r2, r3, #4
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e03d      	b.n	80020dc <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b02      	cmp	r3, #2
 800206c:	d1dd      	bne.n	800202a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f06f 0212 	mvn.w	r2, #18
 8002076:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F2, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d123      	bne.n	80020da <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002096:	2b00      	cmp	r3, #0
 8002098:	d11f      	bne.n	80020da <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d006      	beq.n	80020b6 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d111      	bne.n	80020da <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d105      	bne.n	80020da <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d2:	f043 0201 	orr.w	r2, r3, #1
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr

080020fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002110:	2b01      	cmp	r3, #1
 8002112:	d101      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x1c>
 8002114:	2302      	movs	r3, #2
 8002116:	e103      	b.n	8002320 <HAL_ADC_ConfigChannel+0x224>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2b09      	cmp	r3, #9
 8002126:	d925      	bls.n	8002174 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68d9      	ldr	r1, [r3, #12]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	b29b      	uxth	r3, r3
 8002134:	461a      	mov	r2, r3
 8002136:	4613      	mov	r3, r2
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	4413      	add	r3, r2
 800213c:	3b1e      	subs	r3, #30
 800213e:	2207      	movs	r2, #7
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43da      	mvns	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	400a      	ands	r2, r1
 800214c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68d9      	ldr	r1, [r3, #12]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	b29b      	uxth	r3, r3
 800215e:	4618      	mov	r0, r3
 8002160:	4603      	mov	r3, r0
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	4403      	add	r3, r0
 8002166:	3b1e      	subs	r3, #30
 8002168:	409a      	lsls	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	e022      	b.n	80021ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6919      	ldr	r1, [r3, #16]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	b29b      	uxth	r3, r3
 8002180:	461a      	mov	r2, r3
 8002182:	4613      	mov	r3, r2
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	4413      	add	r3, r2
 8002188:	2207      	movs	r2, #7
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43da      	mvns	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	400a      	ands	r2, r1
 8002196:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6919      	ldr	r1, [r3, #16]
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	4618      	mov	r0, r3
 80021aa:	4603      	mov	r3, r0
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	4403      	add	r3, r0
 80021b0:	409a      	lsls	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b06      	cmp	r3, #6
 80021c0:	d824      	bhi.n	800220c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	4613      	mov	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	3b05      	subs	r3, #5
 80021d4:	221f      	movs	r2, #31
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43da      	mvns	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	400a      	ands	r2, r1
 80021e2:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	4618      	mov	r0, r3
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	3b05      	subs	r3, #5
 80021fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	635a      	str	r2, [r3, #52]	@ 0x34
 800220a:	e04c      	b.n	80022a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b0c      	cmp	r3, #12
 8002212:	d824      	bhi.n	800225e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	3b23      	subs	r3, #35	@ 0x23
 8002226:	221f      	movs	r2, #31
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43da      	mvns	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	400a      	ands	r2, r1
 8002234:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	b29b      	uxth	r3, r3
 8002242:	4618      	mov	r0, r3
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685a      	ldr	r2, [r3, #4]
 8002248:	4613      	mov	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	3b23      	subs	r3, #35	@ 0x23
 8002250:	fa00 f203 	lsl.w	r2, r0, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	631a      	str	r2, [r3, #48]	@ 0x30
 800225c:	e023      	b.n	80022a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	3b41      	subs	r3, #65	@ 0x41
 8002270:	221f      	movs	r2, #31
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43da      	mvns	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	400a      	ands	r2, r1
 800227e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	b29b      	uxth	r3, r3
 800228c:	4618      	mov	r0, r3
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	3b41      	subs	r3, #65	@ 0x41
 800229a:	fa00 f203 	lsl.w	r2, r0, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	430a      	orrs	r2, r1
 80022a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a20      	ldr	r2, [pc, #128]	@ (800232c <HAL_ADC_ConfigChannel+0x230>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d109      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x1c8>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b12      	cmp	r3, #18
 80022b6:	d105      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80022b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002330 <HAL_ADC_ConfigChannel+0x234>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	4a1c      	ldr	r2, [pc, #112]	@ (8002330 <HAL_ADC_ConfigChannel+0x234>)
 80022be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80022c2:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a18      	ldr	r2, [pc, #96]	@ (800232c <HAL_ADC_ConfigChannel+0x230>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d123      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x21a>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2b10      	cmp	r3, #16
 80022d4:	d003      	beq.n	80022de <HAL_ADC_ConfigChannel+0x1e2>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2b11      	cmp	r3, #17
 80022dc:	d11b      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80022de:	4b14      	ldr	r3, [pc, #80]	@ (8002330 <HAL_ADC_ConfigChannel+0x234>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4a13      	ldr	r2, [pc, #76]	@ (8002330 <HAL_ADC_ConfigChannel+0x234>)
 80022e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80022e8:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b10      	cmp	r3, #16
 80022f0:	d111      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022f2:	4b10      	ldr	r3, [pc, #64]	@ (8002334 <HAL_ADC_ConfigChannel+0x238>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a10      	ldr	r2, [pc, #64]	@ (8002338 <HAL_ADC_ConfigChannel+0x23c>)
 80022f8:	fba2 2303 	umull	r2, r3, r2, r3
 80022fc:	0c9a      	lsrs	r2, r3, #18
 80022fe:	4613      	mov	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8002308:	e002      	b.n	8002310 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	3b01      	subs	r3, #1
 800230e:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f9      	bne.n	800230a <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40012000 	.word	0x40012000
 8002330:	40012300 	.word	0x40012300
 8002334:	20000004 	.word	0x20000004
 8002338:	431bde83 	.word	0x431bde83

0800233c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002344:	4b7e      	ldr	r3, [pc, #504]	@ (8002540 <ADC_Init+0x204>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	4a7d      	ldr	r2, [pc, #500]	@ (8002540 <ADC_Init+0x204>)
 800234a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800234e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002350:	4b7b      	ldr	r3, [pc, #492]	@ (8002540 <ADC_Init+0x204>)
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	4979      	ldr	r1, [pc, #484]	@ (8002540 <ADC_Init+0x204>)
 800235a:	4313      	orrs	r3, r2
 800235c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800236c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6859      	ldr	r1, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	021a      	lsls	r2, r3, #8
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	430a      	orrs	r2, r1
 8002380:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002390:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6859      	ldr	r1, [r3, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6899      	ldr	r1, [r3, #8]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ca:	4a5e      	ldr	r2, [pc, #376]	@ (8002544 <ADC_Init+0x208>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d022      	beq.n	8002416 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6899      	ldr	r1, [r3, #8]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002400:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6899      	ldr	r1, [r3, #8]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	609a      	str	r2, [r3, #8]
 8002414:	e00f      	b.n	8002436 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002424:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002434:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 0202 	bic.w	r2, r2, #2
 8002444:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6899      	ldr	r1, [r3, #8]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	7e1b      	ldrb	r3, [r3, #24]
 8002450:	005a      	lsls	r2, r3, #1
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d027      	beq.n	80024b4 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002472:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002482:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002488:	3b01      	subs	r3, #1
 800248a:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 800248e:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	fa92 f2a2 	rbit	r2, r2
 8002496:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	fab2 f282 	clz	r2, r2
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	fa03 f102 	lsl.w	r1, r3, r2
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	e007      	b.n	80024c4 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80024d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	3b01      	subs	r3, #1
 80024e0:	051a      	lsls	r2, r3, #20
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80024f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6899      	ldr	r1, [r3, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002506:	025a      	lsls	r2, r3, #9
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	430a      	orrs	r2, r1
 800250e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800251e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6899      	ldr	r1, [r3, #8]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	029a      	lsls	r2, r3, #10
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	609a      	str	r2, [r3, #8]
}
 8002534:	bf00      	nop
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	bc80      	pop	{r7}
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	40012300 	.word	0x40012300
 8002544:	0f000001 	.word	0x0f000001

08002548 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e0ed      	b.n	8002736 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d102      	bne.n	800256c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7ff f9ea 	bl	8001940 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0201 	orr.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800257c:	f7ff fc0c 	bl	8001d98 <HAL_GetTick>
 8002580:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002582:	e012      	b.n	80025aa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002584:	f7ff fc08 	bl	8001d98 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b0a      	cmp	r3, #10
 8002590:	d90b      	bls.n	80025aa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002596:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2205      	movs	r2, #5
 80025a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e0c5      	b.n	8002736 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0e5      	beq.n	8002584 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0202 	bic.w	r2, r2, #2
 80025c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025c8:	f7ff fbe6 	bl	8001d98 <HAL_GetTick>
 80025cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025ce:	e012      	b.n	80025f6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025d0:	f7ff fbe2 	bl	8001d98 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b0a      	cmp	r3, #10
 80025dc:	d90b      	bls.n	80025f6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2205      	movs	r2, #5
 80025ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e09f      	b.n	8002736 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1e5      	bne.n	80025d0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	7e1b      	ldrb	r3, [r3, #24]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d108      	bne.n	800261e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	e007      	b.n	800262e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800262c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	7e5b      	ldrb	r3, [r3, #25]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d108      	bne.n	8002648 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	e007      	b.n	8002658 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002656:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	7e9b      	ldrb	r3, [r3, #26]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d108      	bne.n	8002672 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f042 0220 	orr.w	r2, r2, #32
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	e007      	b.n	8002682 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 0220 	bic.w	r2, r2, #32
 8002680:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	7edb      	ldrb	r3, [r3, #27]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d108      	bne.n	800269c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0210 	bic.w	r2, r2, #16
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	e007      	b.n	80026ac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0210 	orr.w	r2, r2, #16
 80026aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	7f1b      	ldrb	r3, [r3, #28]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d108      	bne.n	80026c6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 0208 	orr.w	r2, r2, #8
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	e007      	b.n	80026d6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0208 	bic.w	r2, r2, #8
 80026d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	7f5b      	ldrb	r3, [r3, #29]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d108      	bne.n	80026f0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f042 0204 	orr.w	r2, r2, #4
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	e007      	b.n	8002700 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0204 	bic.w	r2, r2, #4
 80026fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	431a      	orrs	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	ea42 0103 	orr.w	r1, r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	1e5a      	subs	r2, r3, #1
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <__NVIC_SetPriorityGrouping>:
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002750:	4b0c      	ldr	r3, [pc, #48]	@ (8002784 <__NVIC_SetPriorityGrouping+0x44>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800275c:	4013      	ands	r3, r2
 800275e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002768:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800276c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002772:	4a04      	ldr	r2, [pc, #16]	@ (8002784 <__NVIC_SetPriorityGrouping+0x44>)
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	60d3      	str	r3, [r2, #12]
}
 8002778:	bf00      	nop
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	e000ed00 	.word	0xe000ed00

08002788 <__NVIC_GetPriorityGrouping>:
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800278c:	4b04      	ldr	r3, [pc, #16]	@ (80027a0 <__NVIC_GetPriorityGrouping+0x18>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	0a1b      	lsrs	r3, r3, #8
 8002792:	f003 0307 	and.w	r3, r3, #7
}
 8002796:	4618      	mov	r0, r3
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	e000ed00 	.word	0xe000ed00

080027a4 <__NVIC_EnableIRQ>:
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	db0b      	blt.n	80027ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	f003 021f 	and.w	r2, r3, #31
 80027bc:	4906      	ldr	r1, [pc, #24]	@ (80027d8 <__NVIC_EnableIRQ+0x34>)
 80027be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c2:	095b      	lsrs	r3, r3, #5
 80027c4:	2001      	movs	r0, #1
 80027c6:	fa00 f202 	lsl.w	r2, r0, r2
 80027ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr
 80027d8:	e000e100 	.word	0xe000e100

080027dc <__NVIC_SetPriority>:
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	6039      	str	r1, [r7, #0]
 80027e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	db0a      	blt.n	8002806 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	490c      	ldr	r1, [pc, #48]	@ (8002828 <__NVIC_SetPriority+0x4c>)
 80027f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fa:	0112      	lsls	r2, r2, #4
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	440b      	add	r3, r1
 8002800:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002804:	e00a      	b.n	800281c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	b2da      	uxtb	r2, r3
 800280a:	4908      	ldr	r1, [pc, #32]	@ (800282c <__NVIC_SetPriority+0x50>)
 800280c:	79fb      	ldrb	r3, [r7, #7]
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	3b04      	subs	r3, #4
 8002814:	0112      	lsls	r2, r2, #4
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	440b      	add	r3, r1
 800281a:	761a      	strb	r2, [r3, #24]
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	e000e100 	.word	0xe000e100
 800282c:	e000ed00 	.word	0xe000ed00

08002830 <NVIC_EncodePriority>:
{
 8002830:	b480      	push	{r7}
 8002832:	b089      	sub	sp, #36	@ 0x24
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f1c3 0307 	rsb	r3, r3, #7
 800284a:	2b04      	cmp	r3, #4
 800284c:	bf28      	it	cs
 800284e:	2304      	movcs	r3, #4
 8002850:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	3304      	adds	r3, #4
 8002856:	2b06      	cmp	r3, #6
 8002858:	d902      	bls.n	8002860 <NVIC_EncodePriority+0x30>
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	3b03      	subs	r3, #3
 800285e:	e000      	b.n	8002862 <NVIC_EncodePriority+0x32>
 8002860:	2300      	movs	r3, #0
 8002862:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002864:	f04f 32ff 	mov.w	r2, #4294967295
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43da      	mvns	r2, r3
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	401a      	ands	r2, r3
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002878:	f04f 31ff 	mov.w	r1, #4294967295
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	fa01 f303 	lsl.w	r3, r1, r3
 8002882:	43d9      	mvns	r1, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002888:	4313      	orrs	r3, r2
}
 800288a:	4618      	mov	r0, r3
 800288c:	3724      	adds	r7, #36	@ 0x24
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr

08002894 <SysTick_Config>:
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3b01      	subs	r3, #1
 80028a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028a4:	d301      	bcc.n	80028aa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80028a6:	2301      	movs	r3, #1
 80028a8:	e00f      	b.n	80028ca <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028aa:	4a0a      	ldr	r2, [pc, #40]	@ (80028d4 <SysTick_Config+0x40>)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028b2:	210f      	movs	r1, #15
 80028b4:	f04f 30ff 	mov.w	r0, #4294967295
 80028b8:	f7ff ff90 	bl	80027dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028bc:	4b05      	ldr	r3, [pc, #20]	@ (80028d4 <SysTick_Config+0x40>)
 80028be:	2200      	movs	r2, #0
 80028c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028c2:	4b04      	ldr	r3, [pc, #16]	@ (80028d4 <SysTick_Config+0x40>)
 80028c4:	2207      	movs	r2, #7
 80028c6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	e000e010 	.word	0xe000e010

080028d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7ff ff2d 	bl	8002740 <__NVIC_SetPriorityGrouping>
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b086      	sub	sp, #24
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	4603      	mov	r3, r0
 80028f6:	60b9      	str	r1, [r7, #8]
 80028f8:	607a      	str	r2, [r7, #4]
 80028fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028fc:	2300      	movs	r3, #0
 80028fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002900:	f7ff ff42 	bl	8002788 <__NVIC_GetPriorityGrouping>
 8002904:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	68b9      	ldr	r1, [r7, #8]
 800290a:	6978      	ldr	r0, [r7, #20]
 800290c:	f7ff ff90 	bl	8002830 <NVIC_EncodePriority>
 8002910:	4602      	mov	r2, r0
 8002912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002916:	4611      	mov	r1, r2
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff ff5f 	bl	80027dc <__NVIC_SetPriority>
}
 800291e:	bf00      	nop
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	4603      	mov	r3, r0
 800292e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff ff35 	bl	80027a4 <__NVIC_EnableIRQ>
}
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b082      	sub	sp, #8
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7ff ffa2 	bl	8002894 <SysTick_Config>
 8002950:	4603      	mov	r3, r0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
	...

0800295c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800295c:	b480      	push	{r7}
 800295e:	b087      	sub	sp, #28
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800296a:	e16f      	b.n	8002c4c <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	2101      	movs	r1, #1
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	fa01 f303 	lsl.w	r3, r1, r3
 8002978:	4013      	ands	r3, r2
 800297a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 8161 	beq.w	8002c46 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 0303 	and.w	r3, r3, #3
 800298c:	2b01      	cmp	r3, #1
 800298e:	d005      	beq.n	800299c <HAL_GPIO_Init+0x40>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 0303 	and.w	r3, r3, #3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d130      	bne.n	80029fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	2203      	movs	r2, #3
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4013      	ands	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	68da      	ldr	r2, [r3, #12]
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029d2:	2201      	movs	r2, #1
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43db      	mvns	r3, r3
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	4013      	ands	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	091b      	lsrs	r3, r3, #4
 80029e8:	f003 0201 	and.w	r2, r3, #1
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	d017      	beq.n	8002a3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	2203      	movs	r2, #3
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d123      	bne.n	8002a8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	08da      	lsrs	r2, r3, #3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3208      	adds	r2, #8
 8002a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	220f      	movs	r2, #15
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43db      	mvns	r3, r3
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4013      	ands	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	691a      	ldr	r2, [r3, #16]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	08da      	lsrs	r2, r3, #3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3208      	adds	r2, #8
 8002a88:	6939      	ldr	r1, [r7, #16]
 8002a8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	2203      	movs	r2, #3
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f003 0203 	and.w	r2, r3, #3
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 80bb 	beq.w	8002c46 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60bb      	str	r3, [r7, #8]
 8002ad4:	4b64      	ldr	r3, [pc, #400]	@ (8002c68 <HAL_GPIO_Init+0x30c>)
 8002ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad8:	4a63      	ldr	r2, [pc, #396]	@ (8002c68 <HAL_GPIO_Init+0x30c>)
 8002ada:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ade:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ae0:	4b61      	ldr	r3, [pc, #388]	@ (8002c68 <HAL_GPIO_Init+0x30c>)
 8002ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ae8:	60bb      	str	r3, [r7, #8]
 8002aea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002aec:	4a5f      	ldr	r2, [pc, #380]	@ (8002c6c <HAL_GPIO_Init+0x310>)
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	089b      	lsrs	r3, r3, #2
 8002af2:	3302      	adds	r3, #2
 8002af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f003 0303 	and.w	r3, r3, #3
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	220f      	movs	r2, #15
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a57      	ldr	r2, [pc, #348]	@ (8002c70 <HAL_GPIO_Init+0x314>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d031      	beq.n	8002b7c <HAL_GPIO_Init+0x220>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a56      	ldr	r2, [pc, #344]	@ (8002c74 <HAL_GPIO_Init+0x318>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d02b      	beq.n	8002b78 <HAL_GPIO_Init+0x21c>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a55      	ldr	r2, [pc, #340]	@ (8002c78 <HAL_GPIO_Init+0x31c>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d025      	beq.n	8002b74 <HAL_GPIO_Init+0x218>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a54      	ldr	r2, [pc, #336]	@ (8002c7c <HAL_GPIO_Init+0x320>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d01f      	beq.n	8002b70 <HAL_GPIO_Init+0x214>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a53      	ldr	r2, [pc, #332]	@ (8002c80 <HAL_GPIO_Init+0x324>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d019      	beq.n	8002b6c <HAL_GPIO_Init+0x210>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a52      	ldr	r2, [pc, #328]	@ (8002c84 <HAL_GPIO_Init+0x328>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d013      	beq.n	8002b68 <HAL_GPIO_Init+0x20c>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a51      	ldr	r2, [pc, #324]	@ (8002c88 <HAL_GPIO_Init+0x32c>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d00d      	beq.n	8002b64 <HAL_GPIO_Init+0x208>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a50      	ldr	r2, [pc, #320]	@ (8002c8c <HAL_GPIO_Init+0x330>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d007      	beq.n	8002b60 <HAL_GPIO_Init+0x204>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a4f      	ldr	r2, [pc, #316]	@ (8002c90 <HAL_GPIO_Init+0x334>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d101      	bne.n	8002b5c <HAL_GPIO_Init+0x200>
 8002b58:	2308      	movs	r3, #8
 8002b5a:	e010      	b.n	8002b7e <HAL_GPIO_Init+0x222>
 8002b5c:	2309      	movs	r3, #9
 8002b5e:	e00e      	b.n	8002b7e <HAL_GPIO_Init+0x222>
 8002b60:	2307      	movs	r3, #7
 8002b62:	e00c      	b.n	8002b7e <HAL_GPIO_Init+0x222>
 8002b64:	2306      	movs	r3, #6
 8002b66:	e00a      	b.n	8002b7e <HAL_GPIO_Init+0x222>
 8002b68:	2305      	movs	r3, #5
 8002b6a:	e008      	b.n	8002b7e <HAL_GPIO_Init+0x222>
 8002b6c:	2304      	movs	r3, #4
 8002b6e:	e006      	b.n	8002b7e <HAL_GPIO_Init+0x222>
 8002b70:	2303      	movs	r3, #3
 8002b72:	e004      	b.n	8002b7e <HAL_GPIO_Init+0x222>
 8002b74:	2302      	movs	r3, #2
 8002b76:	e002      	b.n	8002b7e <HAL_GPIO_Init+0x222>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e000      	b.n	8002b7e <HAL_GPIO_Init+0x222>
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	f002 0203 	and.w	r2, r2, #3
 8002b84:	0092      	lsls	r2, r2, #2
 8002b86:	4093      	lsls	r3, r2
 8002b88:	461a      	mov	r2, r3
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b90:	4936      	ldr	r1, [pc, #216]	@ (8002c6c <HAL_GPIO_Init+0x310>)
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	089b      	lsrs	r3, r3, #2
 8002b96:	3302      	adds	r3, #2
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b9e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c94 <HAL_GPIO_Init+0x338>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4013      	ands	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002bc2:	4a34      	ldr	r2, [pc, #208]	@ (8002c94 <HAL_GPIO_Init+0x338>)
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bc8:	4b32      	ldr	r3, [pc, #200]	@ (8002c94 <HAL_GPIO_Init+0x338>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002bec:	4a29      	ldr	r2, [pc, #164]	@ (8002c94 <HAL_GPIO_Init+0x338>)
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bf2:	4b28      	ldr	r3, [pc, #160]	@ (8002c94 <HAL_GPIO_Init+0x338>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c16:	4a1f      	ldr	r2, [pc, #124]	@ (8002c94 <HAL_GPIO_Init+0x338>)
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002c94 <HAL_GPIO_Init+0x338>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	43db      	mvns	r3, r3
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c40:	4a14      	ldr	r2, [pc, #80]	@ (8002c94 <HAL_GPIO_Init+0x338>)
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	fa22 f303 	lsr.w	r3, r2, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f47f ae88 	bne.w	800296c <HAL_GPIO_Init+0x10>
  }
}
 8002c5c:	bf00      	nop
 8002c5e:	bf00      	nop
 8002c60:	371c      	adds	r7, #28
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40013800 	.word	0x40013800
 8002c70:	40020000 	.word	0x40020000
 8002c74:	40020400 	.word	0x40020400
 8002c78:	40020800 	.word	0x40020800
 8002c7c:	40020c00 	.word	0x40020c00
 8002c80:	40021000 	.word	0x40021000
 8002c84:	40021400 	.word	0x40021400
 8002c88:	40021800 	.word	0x40021800
 8002c8c:	40021c00 	.word	0x40021c00
 8002c90:	40022000 	.word	0x40022000
 8002c94:	40013c00 	.word	0x40013c00

08002c98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	691a      	ldr	r2, [r3, #16]
 8002ca8:	887b      	ldrh	r3, [r7, #2]
 8002caa:	4013      	ands	r3, r2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d002      	beq.n	8002cb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	73fb      	strb	r3, [r7, #15]
 8002cb4:	e001      	b.n	8002cba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr

08002cc6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	460b      	mov	r3, r1
 8002cd0:	807b      	strh	r3, [r7, #2]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cd6:	787b      	ldrb	r3, [r7, #1]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cdc:	887a      	ldrh	r2, [r7, #2]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ce2:	e003      	b.n	8002cec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ce4:	887b      	ldrh	r3, [r7, #2]
 8002ce6:	041a      	lsls	r2, r3, #16
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	619a      	str	r2, [r3, #24]
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr
	...

08002cf8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08a      	sub	sp, #40	@ 0x28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e23b      	b.n	8003182 <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d050      	beq.n	8002db8 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d16:	4b9e      	ldr	r3, [pc, #632]	@ (8002f90 <HAL_RCC_OscConfig+0x298>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d00c      	beq.n	8002d3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d22:	4b9b      	ldr	r3, [pc, #620]	@ (8002f90 <HAL_RCC_OscConfig+0x298>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d2a:	2b08      	cmp	r3, #8
 8002d2c:	d112      	bne.n	8002d54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d2e:	4b98      	ldr	r3, [pc, #608]	@ (8002f90 <HAL_RCC_OscConfig+0x298>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d3a:	d10b      	bne.n	8002d54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d3c:	4b94      	ldr	r3, [pc, #592]	@ (8002f90 <HAL_RCC_OscConfig+0x298>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d036      	beq.n	8002db6 <HAL_RCC_OscConfig+0xbe>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d132      	bne.n	8002db6 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e216      	b.n	8003182 <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	4b8e      	ldr	r3, [pc, #568]	@ (8002f94 <HAL_RCC_OscConfig+0x29c>)
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d013      	beq.n	8002d8e <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d66:	f7ff f817 	bl	8001d98 <HAL_GetTick>
 8002d6a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d6e:	f7ff f813 	bl	8001d98 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b64      	cmp	r3, #100	@ 0x64
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e200      	b.n	8003182 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d80:	4b83      	ldr	r3, [pc, #524]	@ (8002f90 <HAL_RCC_OscConfig+0x298>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d0f0      	beq.n	8002d6e <HAL_RCC_OscConfig+0x76>
 8002d8c:	e014      	b.n	8002db8 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8e:	f7ff f803 	bl	8001d98 <HAL_GetTick>
 8002d92:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d96:	f7fe ffff 	bl	8001d98 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b64      	cmp	r3, #100	@ 0x64
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e1ec      	b.n	8003182 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002da8:	4b79      	ldr	r3, [pc, #484]	@ (8002f90 <HAL_RCC_OscConfig+0x298>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1f0      	bne.n	8002d96 <HAL_RCC_OscConfig+0x9e>
 8002db4:	e000      	b.n	8002db8 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d077      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dc4:	4b72      	ldr	r3, [pc, #456]	@ (8002f90 <HAL_RCC_OscConfig+0x298>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 030c 	and.w	r3, r3, #12
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00b      	beq.n	8002de8 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dd0:	4b6f      	ldr	r3, [pc, #444]	@ (8002f90 <HAL_RCC_OscConfig+0x298>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d126      	bne.n	8002e2a <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ddc:	4b6c      	ldr	r3, [pc, #432]	@ (8002f90 <HAL_RCC_OscConfig+0x298>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d120      	bne.n	8002e2a <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de8:	4b69      	ldr	r3, [pc, #420]	@ (8002f90 <HAL_RCC_OscConfig+0x298>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_RCC_OscConfig+0x108>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d001      	beq.n	8002e00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e1c0      	b.n	8003182 <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e00:	4b63      	ldr	r3, [pc, #396]	@ (8002f90 <HAL_RCC_OscConfig+0x298>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	21f8      	movs	r1, #248	@ 0xf8
 8002e0e:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e10:	69b9      	ldr	r1, [r7, #24]
 8002e12:	fa91 f1a1 	rbit	r1, r1
 8002e16:	6179      	str	r1, [r7, #20]
  return result;
 8002e18:	6979      	ldr	r1, [r7, #20]
 8002e1a:	fab1 f181 	clz	r1, r1
 8002e1e:	b2c9      	uxtb	r1, r1
 8002e20:	408b      	lsls	r3, r1
 8002e22:	495b      	ldr	r1, [pc, #364]	@ (8002f90 <HAL_RCC_OscConfig+0x298>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e28:	e044      	b.n	8002eb4 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d02a      	beq.n	8002e88 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e32:	4b59      	ldr	r3, [pc, #356]	@ (8002f98 <HAL_RCC_OscConfig+0x2a0>)
 8002e34:	2201      	movs	r2, #1
 8002e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e38:	f7fe ffae 	bl	8001d98 <HAL_GetTick>
 8002e3c:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e40:	f7fe ffaa 	bl	8001d98 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e197      	b.n	8003182 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e52:	4b4f      	ldr	r3, [pc, #316]	@ (8002f90 <HAL_RCC_OscConfig+0x298>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0f0      	beq.n	8002e40 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e5e:	4b4c      	ldr	r3, [pc, #304]	@ (8002f90 <HAL_RCC_OscConfig+0x298>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	21f8      	movs	r1, #248	@ 0xf8
 8002e6c:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6e:	6939      	ldr	r1, [r7, #16]
 8002e70:	fa91 f1a1 	rbit	r1, r1
 8002e74:	60f9      	str	r1, [r7, #12]
  return result;
 8002e76:	68f9      	ldr	r1, [r7, #12]
 8002e78:	fab1 f181 	clz	r1, r1
 8002e7c:	b2c9      	uxtb	r1, r1
 8002e7e:	408b      	lsls	r3, r1
 8002e80:	4943      	ldr	r1, [pc, #268]	@ (8002f90 <HAL_RCC_OscConfig+0x298>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	600b      	str	r3, [r1, #0]
 8002e86:	e015      	b.n	8002eb4 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e88:	4b43      	ldr	r3, [pc, #268]	@ (8002f98 <HAL_RCC_OscConfig+0x2a0>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8e:	f7fe ff83 	bl	8001d98 <HAL_GetTick>
 8002e92:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e96:	f7fe ff7f 	bl	8001d98 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e16c      	b.n	8003182 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ea8:	4b39      	ldr	r3, [pc, #228]	@ (8002f90 <HAL_RCC_OscConfig+0x298>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1f0      	bne.n	8002e96 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d030      	beq.n	8002f22 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d016      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ec8:	4b34      	ldr	r3, [pc, #208]	@ (8002f9c <HAL_RCC_OscConfig+0x2a4>)
 8002eca:	2201      	movs	r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ece:	f7fe ff63 	bl	8001d98 <HAL_GetTick>
 8002ed2:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ed6:	f7fe ff5f 	bl	8001d98 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e14c      	b.n	8003182 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ee8:	4b29      	ldr	r3, [pc, #164]	@ (8002f90 <HAL_RCC_OscConfig+0x298>)
 8002eea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0f0      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x1de>
 8002ef4:	e015      	b.n	8002f22 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ef6:	4b29      	ldr	r3, [pc, #164]	@ (8002f9c <HAL_RCC_OscConfig+0x2a4>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002efc:	f7fe ff4c 	bl	8001d98 <HAL_GetTick>
 8002f00:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f04:	f7fe ff48 	bl	8001d98 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e135      	b.n	8003182 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f16:	4b1e      	ldr	r3, [pc, #120]	@ (8002f90 <HAL_RCC_OscConfig+0x298>)
 8002f18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0304 	and.w	r3, r3, #4
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 8087 	beq.w	800303e <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f30:	2300      	movs	r3, #0
 8002f32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f36:	4b16      	ldr	r3, [pc, #88]	@ (8002f90 <HAL_RCC_OscConfig+0x298>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d110      	bne.n	8002f64 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	60bb      	str	r3, [r7, #8]
 8002f46:	4b12      	ldr	r3, [pc, #72]	@ (8002f90 <HAL_RCC_OscConfig+0x298>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4a:	4a11      	ldr	r2, [pc, #68]	@ (8002f90 <HAL_RCC_OscConfig+0x298>)
 8002f4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f52:	4b0f      	ldr	r3, [pc, #60]	@ (8002f90 <HAL_RCC_OscConfig+0x298>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f5a:	60bb      	str	r3, [r7, #8]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002f64:	4b0e      	ldr	r3, [pc, #56]	@ (8002fa0 <HAL_RCC_OscConfig+0x2a8>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a0d      	ldr	r2, [pc, #52]	@ (8002fa0 <HAL_RCC_OscConfig+0x2a8>)
 8002f6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f6e:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f70:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa0 <HAL_RCC_OscConfig+0x2a8>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d122      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f7c:	4b08      	ldr	r3, [pc, #32]	@ (8002fa0 <HAL_RCC_OscConfig+0x2a8>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a07      	ldr	r2, [pc, #28]	@ (8002fa0 <HAL_RCC_OscConfig+0x2a8>)
 8002f82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f88:	f7fe ff06 	bl	8001d98 <HAL_GetTick>
 8002f8c:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8e:	e012      	b.n	8002fb6 <HAL_RCC_OscConfig+0x2be>
 8002f90:	40023800 	.word	0x40023800
 8002f94:	40023802 	.word	0x40023802
 8002f98:	42470000 	.word	0x42470000
 8002f9c:	42470e80 	.word	0x42470e80
 8002fa0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa4:	f7fe fef8 	bl	8001d98 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e0e5      	b.n	8003182 <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb6:	4b75      	ldr	r3, [pc, #468]	@ (800318c <HAL_RCC_OscConfig+0x494>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0f0      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	4b72      	ldr	r3, [pc, #456]	@ (8003190 <HAL_RCC_OscConfig+0x498>)
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d015      	beq.n	8003000 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd4:	f7fe fee0 	bl	8001d98 <HAL_GetTick>
 8002fd8:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fda:	e00a      	b.n	8002ff2 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fdc:	f7fe fedc 	bl	8001d98 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e0c7      	b.n	8003182 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff2:	4b68      	ldr	r3, [pc, #416]	@ (8003194 <HAL_RCC_OscConfig+0x49c>)
 8002ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0ee      	beq.n	8002fdc <HAL_RCC_OscConfig+0x2e4>
 8002ffe:	e014      	b.n	800302a <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003000:	f7fe feca 	bl	8001d98 <HAL_GetTick>
 8003004:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003006:	e00a      	b.n	800301e <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003008:	f7fe fec6 	bl	8001d98 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	6a3b      	ldr	r3, [r7, #32]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003016:	4293      	cmp	r3, r2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e0b1      	b.n	8003182 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800301e:	4b5d      	ldr	r3, [pc, #372]	@ (8003194 <HAL_RCC_OscConfig+0x49c>)
 8003020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1ee      	bne.n	8003008 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800302a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800302e:	2b01      	cmp	r3, #1
 8003030:	d105      	bne.n	800303e <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003032:	4b58      	ldr	r3, [pc, #352]	@ (8003194 <HAL_RCC_OscConfig+0x49c>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003036:	4a57      	ldr	r2, [pc, #348]	@ (8003194 <HAL_RCC_OscConfig+0x49c>)
 8003038:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800303c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 809c 	beq.w	8003180 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003048:	4b52      	ldr	r3, [pc, #328]	@ (8003194 <HAL_RCC_OscConfig+0x49c>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 030c 	and.w	r3, r3, #12
 8003050:	2b08      	cmp	r3, #8
 8003052:	d061      	beq.n	8003118 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	2b02      	cmp	r3, #2
 800305a:	d146      	bne.n	80030ea <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305c:	4b4e      	ldr	r3, [pc, #312]	@ (8003198 <HAL_RCC_OscConfig+0x4a0>)
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003062:	f7fe fe99 	bl	8001d98 <HAL_GetTick>
 8003066:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003068:	e008      	b.n	800307c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800306a:	f7fe fe95 	bl	8001d98 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b64      	cmp	r3, #100	@ 0x64
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e082      	b.n	8003182 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307c:	4b45      	ldr	r3, [pc, #276]	@ (8003194 <HAL_RCC_OscConfig+0x49c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1f0      	bne.n	800306a <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003088:	4b42      	ldr	r3, [pc, #264]	@ (8003194 <HAL_RCC_OscConfig+0x49c>)
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	4b43      	ldr	r3, [pc, #268]	@ (800319c <HAL_RCC_OscConfig+0x4a4>)
 800308e:	4013      	ands	r3, r2
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	69d1      	ldr	r1, [r2, #28]
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6a12      	ldr	r2, [r2, #32]
 8003098:	4311      	orrs	r1, r2
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800309e:	0192      	lsls	r2, r2, #6
 80030a0:	4311      	orrs	r1, r2
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80030a6:	0612      	lsls	r2, r2, #24
 80030a8:	4311      	orrs	r1, r2
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80030ae:	0852      	lsrs	r2, r2, #1
 80030b0:	3a01      	subs	r2, #1
 80030b2:	0412      	lsls	r2, r2, #16
 80030b4:	430a      	orrs	r2, r1
 80030b6:	4937      	ldr	r1, [pc, #220]	@ (8003194 <HAL_RCC_OscConfig+0x49c>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030bc:	4b36      	ldr	r3, [pc, #216]	@ (8003198 <HAL_RCC_OscConfig+0x4a0>)
 80030be:	2201      	movs	r2, #1
 80030c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c2:	f7fe fe69 	bl	8001d98 <HAL_GetTick>
 80030c6:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ca:	f7fe fe65 	bl	8001d98 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b64      	cmp	r3, #100	@ 0x64
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e052      	b.n	8003182 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030dc:	4b2d      	ldr	r3, [pc, #180]	@ (8003194 <HAL_RCC_OscConfig+0x49c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d0f0      	beq.n	80030ca <HAL_RCC_OscConfig+0x3d2>
 80030e8:	e04a      	b.n	8003180 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ea:	4b2b      	ldr	r3, [pc, #172]	@ (8003198 <HAL_RCC_OscConfig+0x4a0>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f0:	f7fe fe52 	bl	8001d98 <HAL_GetTick>
 80030f4:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f8:	f7fe fe4e 	bl	8001d98 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b64      	cmp	r3, #100	@ 0x64
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e03b      	b.n	8003182 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800310a:	4b22      	ldr	r3, [pc, #136]	@ (8003194 <HAL_RCC_OscConfig+0x49c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCC_OscConfig+0x400>
 8003116:	e033      	b.n	8003180 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d101      	bne.n	8003124 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e02e      	b.n	8003182 <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8003124:	4b1b      	ldr	r3, [pc, #108]	@ (8003194 <HAL_RCC_OscConfig+0x49c>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	429a      	cmp	r2, r3
 8003136:	d121      	bne.n	800317c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003142:	429a      	cmp	r2, r3
 8003144:	d11a      	bne.n	800317c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003146:	69fa      	ldr	r2, [r7, #28]
 8003148:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800314c:	4013      	ands	r3, r2
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003152:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003154:	4293      	cmp	r3, r2
 8003156:	d111      	bne.n	800317c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003162:	085b      	lsrs	r3, r3, #1
 8003164:	3b01      	subs	r3, #1
 8003166:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003168:	429a      	cmp	r2, r3
 800316a:	d107      	bne.n	800317c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003176:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003178:	429a      	cmp	r2, r3
 800317a:	d001      	beq.n	8003180 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e000      	b.n	8003182 <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3728      	adds	r7, #40	@ 0x28
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	40007000 	.word	0x40007000
 8003190:	40023870 	.word	0x40023870
 8003194:	40023800 	.word	0x40023800
 8003198:	42470060 	.word	0x42470060
 800319c:	f0bc8000 	.word	0xf0bc8000

080031a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e0d2      	b.n	800335a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031b4:	4b6b      	ldr	r3, [pc, #428]	@ (8003364 <HAL_RCC_ClockConfig+0x1c4>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 030f 	and.w	r3, r3, #15
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d90c      	bls.n	80031dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c2:	4b68      	ldr	r3, [pc, #416]	@ (8003364 <HAL_RCC_ClockConfig+0x1c4>)
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ca:	4b66      	ldr	r3, [pc, #408]	@ (8003364 <HAL_RCC_ClockConfig+0x1c4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d001      	beq.n	80031dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e0be      	b.n	800335a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d020      	beq.n	800322a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d005      	beq.n	8003200 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031f4:	4b5c      	ldr	r3, [pc, #368]	@ (8003368 <HAL_RCC_ClockConfig+0x1c8>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	4a5b      	ldr	r2, [pc, #364]	@ (8003368 <HAL_RCC_ClockConfig+0x1c8>)
 80031fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80031fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0308 	and.w	r3, r3, #8
 8003208:	2b00      	cmp	r3, #0
 800320a:	d005      	beq.n	8003218 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 800320c:	4b56      	ldr	r3, [pc, #344]	@ (8003368 <HAL_RCC_ClockConfig+0x1c8>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	4a55      	ldr	r2, [pc, #340]	@ (8003368 <HAL_RCC_ClockConfig+0x1c8>)
 8003212:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003216:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003218:	4b53      	ldr	r3, [pc, #332]	@ (8003368 <HAL_RCC_ClockConfig+0x1c8>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	4950      	ldr	r1, [pc, #320]	@ (8003368 <HAL_RCC_ClockConfig+0x1c8>)
 8003226:	4313      	orrs	r3, r2
 8003228:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d040      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d107      	bne.n	800324e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800323e:	4b4a      	ldr	r3, [pc, #296]	@ (8003368 <HAL_RCC_ClockConfig+0x1c8>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d115      	bne.n	8003276 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e085      	b.n	800335a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b02      	cmp	r3, #2
 8003254:	d107      	bne.n	8003266 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003256:	4b44      	ldr	r3, [pc, #272]	@ (8003368 <HAL_RCC_ClockConfig+0x1c8>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d109      	bne.n	8003276 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e079      	b.n	800335a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003266:	4b40      	ldr	r3, [pc, #256]	@ (8003368 <HAL_RCC_ClockConfig+0x1c8>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e071      	b.n	800335a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003276:	4b3c      	ldr	r3, [pc, #240]	@ (8003368 <HAL_RCC_ClockConfig+0x1c8>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f023 0203 	bic.w	r2, r3, #3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	4939      	ldr	r1, [pc, #228]	@ (8003368 <HAL_RCC_ClockConfig+0x1c8>)
 8003284:	4313      	orrs	r3, r2
 8003286:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003288:	f7fe fd86 	bl	8001d98 <HAL_GetTick>
 800328c:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328e:	e00a      	b.n	80032a6 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003290:	f7fe fd82 	bl	8001d98 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800329e:	4293      	cmp	r3, r2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e059      	b.n	800335a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a6:	4b30      	ldr	r3, [pc, #192]	@ (8003368 <HAL_RCC_ClockConfig+0x1c8>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 020c 	and.w	r2, r3, #12
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d1eb      	bne.n	8003290 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032b8:	4b2a      	ldr	r3, [pc, #168]	@ (8003364 <HAL_RCC_ClockConfig+0x1c4>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 030f 	and.w	r3, r3, #15
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d20c      	bcs.n	80032e0 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c6:	4b27      	ldr	r3, [pc, #156]	@ (8003364 <HAL_RCC_ClockConfig+0x1c4>)
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ce:	4b25      	ldr	r3, [pc, #148]	@ (8003364 <HAL_RCC_ClockConfig+0x1c4>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 030f 	and.w	r3, r3, #15
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d001      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e03c      	b.n	800335a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d008      	beq.n	80032fe <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032ec:	4b1e      	ldr	r3, [pc, #120]	@ (8003368 <HAL_RCC_ClockConfig+0x1c8>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	491b      	ldr	r1, [pc, #108]	@ (8003368 <HAL_RCC_ClockConfig+0x1c8>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d009      	beq.n	800331e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800330a:	4b17      	ldr	r3, [pc, #92]	@ (8003368 <HAL_RCC_ClockConfig+0x1c8>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	4913      	ldr	r1, [pc, #76]	@ (8003368 <HAL_RCC_ClockConfig+0x1c8>)
 800331a:	4313      	orrs	r3, r2
 800331c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800331e:	f000 f82b 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 8003322:	4601      	mov	r1, r0
 8003324:	4b10      	ldr	r3, [pc, #64]	@ (8003368 <HAL_RCC_ClockConfig+0x1c8>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800332c:	22f0      	movs	r2, #240	@ 0xf0
 800332e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	fa92 f2a2 	rbit	r2, r2
 8003336:	60fa      	str	r2, [r7, #12]
  return result;
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	fab2 f282 	clz	r2, r2
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	40d3      	lsrs	r3, r2
 8003342:	4a0a      	ldr	r2, [pc, #40]	@ (800336c <HAL_RCC_ClockConfig+0x1cc>)
 8003344:	5cd3      	ldrb	r3, [r2, r3]
 8003346:	fa21 f303 	lsr.w	r3, r1, r3
 800334a:	4a09      	ldr	r2, [pc, #36]	@ (8003370 <HAL_RCC_ClockConfig+0x1d0>)
 800334c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800334e:	4b09      	ldr	r3, [pc, #36]	@ (8003374 <HAL_RCC_ClockConfig+0x1d4>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7fe fcde 	bl	8001d14 <HAL_InitTick>

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3718      	adds	r7, #24
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40023c00 	.word	0x40023c00
 8003368:	40023800 	.word	0x40023800
 800336c:	08004814 	.word	0x08004814
 8003370:	20000004 	.word	0x20000004
 8003374:	20000008 	.word	0x20000008

08003378 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800337c:	b090      	sub	sp, #64	@ 0x40
 800337e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	637b      	str	r3, [r7, #52]	@ 0x34
 8003384:	2300      	movs	r3, #0
 8003386:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003388:	2300      	movs	r3, #0
 800338a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003390:	4b59      	ldr	r3, [pc, #356]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f003 030c 	and.w	r3, r3, #12
 8003398:	2b08      	cmp	r3, #8
 800339a:	d00d      	beq.n	80033b8 <HAL_RCC_GetSysClockFreq+0x40>
 800339c:	2b08      	cmp	r3, #8
 800339e:	f200 80a2 	bhi.w	80034e6 <HAL_RCC_GetSysClockFreq+0x16e>
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d002      	beq.n	80033ac <HAL_RCC_GetSysClockFreq+0x34>
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d003      	beq.n	80033b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80033aa:	e09c      	b.n	80034e6 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033ac:	4b53      	ldr	r3, [pc, #332]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x184>)
 80033ae:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80033b0:	e09c      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033b2:	4b53      	ldr	r3, [pc, #332]	@ (8003500 <HAL_RCC_GetSysClockFreq+0x188>)
 80033b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033b6:	e099      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033b8:	4b4f      	ldr	r3, [pc, #316]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033c0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033c2:	4b4d      	ldr	r3, [pc, #308]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d027      	beq.n	800341e <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ce:	4b4a      	ldr	r3, [pc, #296]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	099b      	lsrs	r3, r3, #6
 80033d4:	2200      	movs	r2, #0
 80033d6:	623b      	str	r3, [r7, #32]
 80033d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80033da:	6a3b      	ldr	r3, [r7, #32]
 80033dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033e0:	2100      	movs	r1, #0
 80033e2:	4b47      	ldr	r3, [pc, #284]	@ (8003500 <HAL_RCC_GetSysClockFreq+0x188>)
 80033e4:	fb03 f201 	mul.w	r2, r3, r1
 80033e8:	2300      	movs	r3, #0
 80033ea:	fb00 f303 	mul.w	r3, r0, r3
 80033ee:	4413      	add	r3, r2
 80033f0:	4a43      	ldr	r2, [pc, #268]	@ (8003500 <HAL_RCC_GetSysClockFreq+0x188>)
 80033f2:	fba0 2102 	umull	r2, r1, r0, r2
 80033f6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80033f8:	62ba      	str	r2, [r7, #40]	@ 0x28
 80033fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033fc:	4413      	add	r3, r2
 80033fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003402:	2200      	movs	r2, #0
 8003404:	61bb      	str	r3, [r7, #24]
 8003406:	61fa      	str	r2, [r7, #28]
 8003408:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800340c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003410:	f7fd fb80 	bl	8000b14 <__aeabi_uldivmod>
 8003414:	4602      	mov	r2, r0
 8003416:	460b      	mov	r3, r1
 8003418:	4613      	mov	r3, r2
 800341a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800341c:	e055      	b.n	80034ca <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800341e:	4b36      	ldr	r3, [pc, #216]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	099b      	lsrs	r3, r3, #6
 8003424:	2200      	movs	r2, #0
 8003426:	613b      	str	r3, [r7, #16]
 8003428:	617a      	str	r2, [r7, #20]
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003430:	f04f 0b00 	mov.w	fp, #0
 8003434:	4652      	mov	r2, sl
 8003436:	465b      	mov	r3, fp
 8003438:	f04f 0000 	mov.w	r0, #0
 800343c:	f04f 0100 	mov.w	r1, #0
 8003440:	0159      	lsls	r1, r3, #5
 8003442:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003446:	0150      	lsls	r0, r2, #5
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	ebb2 080a 	subs.w	r8, r2, sl
 8003450:	eb63 090b 	sbc.w	r9, r3, fp
 8003454:	f04f 0200 	mov.w	r2, #0
 8003458:	f04f 0300 	mov.w	r3, #0
 800345c:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003460:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003464:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003468:	ebb2 0408 	subs.w	r4, r2, r8
 800346c:	eb63 0509 	sbc.w	r5, r3, r9
 8003470:	f04f 0200 	mov.w	r2, #0
 8003474:	f04f 0300 	mov.w	r3, #0
 8003478:	00eb      	lsls	r3, r5, #3
 800347a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800347e:	00e2      	lsls	r2, r4, #3
 8003480:	4614      	mov	r4, r2
 8003482:	461d      	mov	r5, r3
 8003484:	eb14 030a 	adds.w	r3, r4, sl
 8003488:	603b      	str	r3, [r7, #0]
 800348a:	eb45 030b 	adc.w	r3, r5, fp
 800348e:	607b      	str	r3, [r7, #4]
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	f04f 0300 	mov.w	r3, #0
 8003498:	e9d7 4500 	ldrd	r4, r5, [r7]
 800349c:	4629      	mov	r1, r5
 800349e:	028b      	lsls	r3, r1, #10
 80034a0:	4620      	mov	r0, r4
 80034a2:	4629      	mov	r1, r5
 80034a4:	4604      	mov	r4, r0
 80034a6:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80034aa:	4601      	mov	r1, r0
 80034ac:	028a      	lsls	r2, r1, #10
 80034ae:	4610      	mov	r0, r2
 80034b0:	4619      	mov	r1, r3
 80034b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034b4:	2200      	movs	r2, #0
 80034b6:	60bb      	str	r3, [r7, #8]
 80034b8:	60fa      	str	r2, [r7, #12]
 80034ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034be:	f7fd fb29 	bl	8000b14 <__aeabi_uldivmod>
 80034c2:	4602      	mov	r2, r0
 80034c4:	460b      	mov	r3, r1
 80034c6:	4613      	mov	r3, r2
 80034c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034ca:	4b0b      	ldr	r3, [pc, #44]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	0c1b      	lsrs	r3, r3, #16
 80034d0:	f003 0303 	and.w	r3, r3, #3
 80034d4:	3301      	adds	r3, #1
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80034da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034de:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034e4:	e002      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034e6:	4b05      	ldr	r3, [pc, #20]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x184>)
 80034e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3740      	adds	r7, #64	@ 0x40
 80034f2:	46bd      	mov	sp, r7
 80034f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034f8:	40023800 	.word	0x40023800
 80034fc:	00f42400 	.word	0x00f42400
 8003500:	017d7840 	.word	0x017d7840

08003504 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e07b      	b.n	800360e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351a:	2b00      	cmp	r3, #0
 800351c:	d108      	bne.n	8003530 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003526:	d009      	beq.n	800353c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	61da      	str	r2, [r3, #28]
 800352e:	e005      	b.n	800353c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d106      	bne.n	800355c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7fe fa48 	bl	80019ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003572:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003584:	431a      	orrs	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	431a      	orrs	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035ac:	431a      	orrs	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80035b6:	431a      	orrs	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035c0:	ea42 0103 	orr.w	r1, r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	0c1b      	lsrs	r3, r3, #16
 80035da:	f003 0104 	and.w	r1, r3, #4
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e2:	f003 0210 	and.w	r2, r3, #16
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	69da      	ldr	r2, [r3, #28]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b082      	sub	sp, #8
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e041      	b.n	80036ac <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d106      	bne.n	8003642 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7fe fa1d 	bl	8001a7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2202      	movs	r2, #2
 8003646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3304      	adds	r3, #4
 8003652:	4619      	mov	r1, r3
 8003654:	4610      	mov	r0, r2
 8003656:	f000 fa21 	bl	8003a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d122      	bne.n	8003710 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d11b      	bne.n	8003710 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f06f 0202 	mvn.w	r2, #2
 80036e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f9b4 	bl	8003a64 <HAL_TIM_IC_CaptureCallback>
 80036fc:	e005      	b.n	800370a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f9a7 	bl	8003a52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f9b6 	bl	8003a76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f003 0304 	and.w	r3, r3, #4
 800371a:	2b04      	cmp	r3, #4
 800371c:	d122      	bne.n	8003764 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b04      	cmp	r3, #4
 800372a:	d11b      	bne.n	8003764 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f06f 0204 	mvn.w	r2, #4
 8003734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2202      	movs	r2, #2
 800373a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f98a 	bl	8003a64 <HAL_TIM_IC_CaptureCallback>
 8003750:	e005      	b.n	800375e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f97d 	bl	8003a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f98c 	bl	8003a76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b08      	cmp	r3, #8
 8003770:	d122      	bne.n	80037b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	2b08      	cmp	r3, #8
 800377e:	d11b      	bne.n	80037b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f06f 0208 	mvn.w	r2, #8
 8003788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2204      	movs	r2, #4
 800378e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f960 	bl	8003a64 <HAL_TIM_IC_CaptureCallback>
 80037a4:	e005      	b.n	80037b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f953 	bl	8003a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 f962 	bl	8003a76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	f003 0310 	and.w	r3, r3, #16
 80037c2:	2b10      	cmp	r3, #16
 80037c4:	d122      	bne.n	800380c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f003 0310 	and.w	r3, r3, #16
 80037d0:	2b10      	cmp	r3, #16
 80037d2:	d11b      	bne.n	800380c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f06f 0210 	mvn.w	r2, #16
 80037dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2208      	movs	r2, #8
 80037e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f936 	bl	8003a64 <HAL_TIM_IC_CaptureCallback>
 80037f8:	e005      	b.n	8003806 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f929 	bl	8003a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f938 	bl	8003a76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b01      	cmp	r3, #1
 8003818:	d10e      	bne.n	8003838 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b01      	cmp	r3, #1
 8003826:	d107      	bne.n	8003838 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f06f 0201 	mvn.w	r2, #1
 8003830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7fd fdf2 	bl	800141c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003842:	2b80      	cmp	r3, #128	@ 0x80
 8003844:	d10e      	bne.n	8003864 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003850:	2b80      	cmp	r3, #128	@ 0x80
 8003852:	d107      	bne.n	8003864 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800385c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fad3 	bl	8003e0a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800386e:	2b40      	cmp	r3, #64	@ 0x40
 8003870:	d10e      	bne.n	8003890 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800387c:	2b40      	cmp	r3, #64	@ 0x40
 800387e:	d107      	bne.n	8003890 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f8fc 	bl	8003a88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	f003 0320 	and.w	r3, r3, #32
 800389a:	2b20      	cmp	r3, #32
 800389c:	d10e      	bne.n	80038bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f003 0320 	and.w	r3, r3, #32
 80038a8:	2b20      	cmp	r3, #32
 80038aa:	d107      	bne.n	80038bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f06f 0220 	mvn.w	r2, #32
 80038b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 fa9e 	bl	8003df8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038bc:	bf00      	nop
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d101      	bne.n	80038e0 <HAL_TIM_ConfigClockSource+0x1c>
 80038dc:	2302      	movs	r3, #2
 80038de:	e0b4      	b.n	8003a4a <HAL_TIM_ConfigClockSource+0x186>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2202      	movs	r2, #2
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80038fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003906:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68ba      	ldr	r2, [r7, #8]
 800390e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003918:	d03e      	beq.n	8003998 <HAL_TIM_ConfigClockSource+0xd4>
 800391a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800391e:	f200 8087 	bhi.w	8003a30 <HAL_TIM_ConfigClockSource+0x16c>
 8003922:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003926:	f000 8086 	beq.w	8003a36 <HAL_TIM_ConfigClockSource+0x172>
 800392a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800392e:	d87f      	bhi.n	8003a30 <HAL_TIM_ConfigClockSource+0x16c>
 8003930:	2b70      	cmp	r3, #112	@ 0x70
 8003932:	d01a      	beq.n	800396a <HAL_TIM_ConfigClockSource+0xa6>
 8003934:	2b70      	cmp	r3, #112	@ 0x70
 8003936:	d87b      	bhi.n	8003a30 <HAL_TIM_ConfigClockSource+0x16c>
 8003938:	2b60      	cmp	r3, #96	@ 0x60
 800393a:	d050      	beq.n	80039de <HAL_TIM_ConfigClockSource+0x11a>
 800393c:	2b60      	cmp	r3, #96	@ 0x60
 800393e:	d877      	bhi.n	8003a30 <HAL_TIM_ConfigClockSource+0x16c>
 8003940:	2b50      	cmp	r3, #80	@ 0x50
 8003942:	d03c      	beq.n	80039be <HAL_TIM_ConfigClockSource+0xfa>
 8003944:	2b50      	cmp	r3, #80	@ 0x50
 8003946:	d873      	bhi.n	8003a30 <HAL_TIM_ConfigClockSource+0x16c>
 8003948:	2b40      	cmp	r3, #64	@ 0x40
 800394a:	d058      	beq.n	80039fe <HAL_TIM_ConfigClockSource+0x13a>
 800394c:	2b40      	cmp	r3, #64	@ 0x40
 800394e:	d86f      	bhi.n	8003a30 <HAL_TIM_ConfigClockSource+0x16c>
 8003950:	2b30      	cmp	r3, #48	@ 0x30
 8003952:	d064      	beq.n	8003a1e <HAL_TIM_ConfigClockSource+0x15a>
 8003954:	2b30      	cmp	r3, #48	@ 0x30
 8003956:	d86b      	bhi.n	8003a30 <HAL_TIM_ConfigClockSource+0x16c>
 8003958:	2b20      	cmp	r3, #32
 800395a:	d060      	beq.n	8003a1e <HAL_TIM_ConfigClockSource+0x15a>
 800395c:	2b20      	cmp	r3, #32
 800395e:	d867      	bhi.n	8003a30 <HAL_TIM_ConfigClockSource+0x16c>
 8003960:	2b00      	cmp	r3, #0
 8003962:	d05c      	beq.n	8003a1e <HAL_TIM_ConfigClockSource+0x15a>
 8003964:	2b10      	cmp	r3, #16
 8003966:	d05a      	beq.n	8003a1e <HAL_TIM_ConfigClockSource+0x15a>
 8003968:	e062      	b.n	8003a30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800397a:	f000 f9a4 	bl	8003cc6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800398c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	609a      	str	r2, [r3, #8]
      break;
 8003996:	e04f      	b.n	8003a38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039a8:	f000 f98d 	bl	8003cc6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689a      	ldr	r2, [r3, #8]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039ba:	609a      	str	r2, [r3, #8]
      break;
 80039bc:	e03c      	b.n	8003a38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ca:	461a      	mov	r2, r3
 80039cc:	f000 f904 	bl	8003bd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2150      	movs	r1, #80	@ 0x50
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 f95b 	bl	8003c92 <TIM_ITRx_SetConfig>
      break;
 80039dc:	e02c      	b.n	8003a38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039ea:	461a      	mov	r2, r3
 80039ec:	f000 f922 	bl	8003c34 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2160      	movs	r1, #96	@ 0x60
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 f94b 	bl	8003c92 <TIM_ITRx_SetConfig>
      break;
 80039fc:	e01c      	b.n	8003a38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	f000 f8e4 	bl	8003bd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2140      	movs	r1, #64	@ 0x40
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 f93b 	bl	8003c92 <TIM_ITRx_SetConfig>
      break;
 8003a1c:	e00c      	b.n	8003a38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4619      	mov	r1, r3
 8003a28:	4610      	mov	r0, r2
 8003a2a:	f000 f932 	bl	8003c92 <TIM_ITRx_SetConfig>
      break;
 8003a2e:	e003      	b.n	8003a38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	73fb      	strb	r3, [r7, #15]
      break;
 8003a34:	e000      	b.n	8003a38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bc80      	pop	{r7}
 8003a62:	4770      	bx	lr

08003a64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr

08003a76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr

08003a88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bc80      	pop	{r7}
 8003a98:	4770      	bx	lr
	...

08003a9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a3f      	ldr	r2, [pc, #252]	@ (8003bac <TIM_Base_SetConfig+0x110>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d013      	beq.n	8003adc <TIM_Base_SetConfig+0x40>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aba:	d00f      	beq.n	8003adc <TIM_Base_SetConfig+0x40>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a3c      	ldr	r2, [pc, #240]	@ (8003bb0 <TIM_Base_SetConfig+0x114>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d00b      	beq.n	8003adc <TIM_Base_SetConfig+0x40>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a3b      	ldr	r2, [pc, #236]	@ (8003bb4 <TIM_Base_SetConfig+0x118>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d007      	beq.n	8003adc <TIM_Base_SetConfig+0x40>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a3a      	ldr	r2, [pc, #232]	@ (8003bb8 <TIM_Base_SetConfig+0x11c>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d003      	beq.n	8003adc <TIM_Base_SetConfig+0x40>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a39      	ldr	r2, [pc, #228]	@ (8003bbc <TIM_Base_SetConfig+0x120>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d108      	bne.n	8003aee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ae2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a2e      	ldr	r2, [pc, #184]	@ (8003bac <TIM_Base_SetConfig+0x110>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d02b      	beq.n	8003b4e <TIM_Base_SetConfig+0xb2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003afc:	d027      	beq.n	8003b4e <TIM_Base_SetConfig+0xb2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a2b      	ldr	r2, [pc, #172]	@ (8003bb0 <TIM_Base_SetConfig+0x114>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d023      	beq.n	8003b4e <TIM_Base_SetConfig+0xb2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a2a      	ldr	r2, [pc, #168]	@ (8003bb4 <TIM_Base_SetConfig+0x118>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d01f      	beq.n	8003b4e <TIM_Base_SetConfig+0xb2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a29      	ldr	r2, [pc, #164]	@ (8003bb8 <TIM_Base_SetConfig+0x11c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d01b      	beq.n	8003b4e <TIM_Base_SetConfig+0xb2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a28      	ldr	r2, [pc, #160]	@ (8003bbc <TIM_Base_SetConfig+0x120>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d017      	beq.n	8003b4e <TIM_Base_SetConfig+0xb2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a27      	ldr	r2, [pc, #156]	@ (8003bc0 <TIM_Base_SetConfig+0x124>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d013      	beq.n	8003b4e <TIM_Base_SetConfig+0xb2>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a26      	ldr	r2, [pc, #152]	@ (8003bc4 <TIM_Base_SetConfig+0x128>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d00f      	beq.n	8003b4e <TIM_Base_SetConfig+0xb2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a25      	ldr	r2, [pc, #148]	@ (8003bc8 <TIM_Base_SetConfig+0x12c>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d00b      	beq.n	8003b4e <TIM_Base_SetConfig+0xb2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a24      	ldr	r2, [pc, #144]	@ (8003bcc <TIM_Base_SetConfig+0x130>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d007      	beq.n	8003b4e <TIM_Base_SetConfig+0xb2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a23      	ldr	r2, [pc, #140]	@ (8003bd0 <TIM_Base_SetConfig+0x134>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d003      	beq.n	8003b4e <TIM_Base_SetConfig+0xb2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a22      	ldr	r2, [pc, #136]	@ (8003bd4 <TIM_Base_SetConfig+0x138>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d108      	bne.n	8003b60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	689a      	ldr	r2, [r3, #8]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a09      	ldr	r2, [pc, #36]	@ (8003bac <TIM_Base_SetConfig+0x110>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d003      	beq.n	8003b94 <TIM_Base_SetConfig+0xf8>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a0b      	ldr	r2, [pc, #44]	@ (8003bbc <TIM_Base_SetConfig+0x120>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d103      	bne.n	8003b9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	615a      	str	r2, [r3, #20]
}
 8003ba2:	bf00      	nop
 8003ba4:	3714      	adds	r7, #20
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bc80      	pop	{r7}
 8003baa:	4770      	bx	lr
 8003bac:	40010000 	.word	0x40010000
 8003bb0:	40000400 	.word	0x40000400
 8003bb4:	40000800 	.word	0x40000800
 8003bb8:	40000c00 	.word	0x40000c00
 8003bbc:	40010400 	.word	0x40010400
 8003bc0:	40014000 	.word	0x40014000
 8003bc4:	40014400 	.word	0x40014400
 8003bc8:	40014800 	.word	0x40014800
 8003bcc:	40001800 	.word	0x40001800
 8003bd0:	40001c00 	.word	0x40001c00
 8003bd4:	40002000 	.word	0x40002000

08003bd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b087      	sub	sp, #28
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	f023 0201 	bic.w	r2, r3, #1
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	011b      	lsls	r3, r3, #4
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f023 030a 	bic.w	r3, r3, #10
 8003c14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	621a      	str	r2, [r3, #32]
}
 8003c2a:	bf00      	nop
 8003c2c:	371c      	adds	r7, #28
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr

08003c34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	f023 0210 	bic.w	r2, r3, #16
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	031b      	lsls	r3, r3, #12
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003c70:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	621a      	str	r2, [r3, #32]
}
 8003c88:	bf00      	nop
 8003c8a:	371c      	adds	r7, #28
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bc80      	pop	{r7}
 8003c90:	4770      	bx	lr

08003c92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b085      	sub	sp, #20
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
 8003c9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ca8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	f043 0307 	orr.w	r3, r3, #7
 8003cb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	609a      	str	r2, [r3, #8]
}
 8003cbc:	bf00      	nop
 8003cbe:	3714      	adds	r7, #20
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bc80      	pop	{r7}
 8003cc4:	4770      	bx	lr

08003cc6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b087      	sub	sp, #28
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	60f8      	str	r0, [r7, #12]
 8003cce:	60b9      	str	r1, [r7, #8]
 8003cd0:	607a      	str	r2, [r7, #4]
 8003cd2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ce0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	021a      	lsls	r2, r3, #8
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	609a      	str	r2, [r3, #8]
}
 8003cfa:	bf00      	nop
 8003cfc:	371c      	adds	r7, #28
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bc80      	pop	{r7}
 8003d02:	4770      	bx	lr

08003d04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d101      	bne.n	8003d1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	e05a      	b.n	8003dd2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a20      	ldr	r2, [pc, #128]	@ (8003ddc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d022      	beq.n	8003da6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d68:	d01d      	beq.n	8003da6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a1c      	ldr	r2, [pc, #112]	@ (8003de0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d018      	beq.n	8003da6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a1a      	ldr	r2, [pc, #104]	@ (8003de4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d013      	beq.n	8003da6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a19      	ldr	r2, [pc, #100]	@ (8003de8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d00e      	beq.n	8003da6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a17      	ldr	r2, [pc, #92]	@ (8003dec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d009      	beq.n	8003da6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a16      	ldr	r2, [pc, #88]	@ (8003df0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d004      	beq.n	8003da6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a14      	ldr	r2, [pc, #80]	@ (8003df4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d10c      	bne.n	8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bc80      	pop	{r7}
 8003dda:	4770      	bx	lr
 8003ddc:	40010000 	.word	0x40010000
 8003de0:	40000400 	.word	0x40000400
 8003de4:	40000800 	.word	0x40000800
 8003de8:	40000c00 	.word	0x40000c00
 8003dec:	40010400 	.word	0x40010400
 8003df0:	40014000 	.word	0x40014000
 8003df4:	40001800 	.word	0x40001800

08003df8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bc80      	pop	{r7}
 8003e08:	4770      	bx	lr

08003e0a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bc80      	pop	{r7}
 8003e1a:	4770      	bx	lr

08003e1c <exit>:
 8003e1c:	b508      	push	{r3, lr}
 8003e1e:	4b06      	ldr	r3, [pc, #24]	@ (8003e38 <exit+0x1c>)
 8003e20:	4604      	mov	r4, r0
 8003e22:	b113      	cbz	r3, 8003e2a <exit+0xe>
 8003e24:	2100      	movs	r1, #0
 8003e26:	f3af 8000 	nop.w
 8003e2a:	4b04      	ldr	r3, [pc, #16]	@ (8003e3c <exit+0x20>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	b103      	cbz	r3, 8003e32 <exit+0x16>
 8003e30:	4798      	blx	r3
 8003e32:	4620      	mov	r0, r4
 8003e34:	f7fd fe8e 	bl	8001b54 <_exit>
 8003e38:	00000000 	.word	0x00000000
 8003e3c:	200002e0 	.word	0x200002e0

08003e40 <std>:
 8003e40:	2300      	movs	r3, #0
 8003e42:	b510      	push	{r4, lr}
 8003e44:	4604      	mov	r4, r0
 8003e46:	e9c0 3300 	strd	r3, r3, [r0]
 8003e4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e4e:	6083      	str	r3, [r0, #8]
 8003e50:	8181      	strh	r1, [r0, #12]
 8003e52:	6643      	str	r3, [r0, #100]	@ 0x64
 8003e54:	81c2      	strh	r2, [r0, #14]
 8003e56:	6183      	str	r3, [r0, #24]
 8003e58:	4619      	mov	r1, r3
 8003e5a:	2208      	movs	r2, #8
 8003e5c:	305c      	adds	r0, #92	@ 0x5c
 8003e5e:	f000 f9e7 	bl	8004230 <memset>
 8003e62:	4b0d      	ldr	r3, [pc, #52]	@ (8003e98 <std+0x58>)
 8003e64:	6224      	str	r4, [r4, #32]
 8003e66:	6263      	str	r3, [r4, #36]	@ 0x24
 8003e68:	4b0c      	ldr	r3, [pc, #48]	@ (8003e9c <std+0x5c>)
 8003e6a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ea0 <std+0x60>)
 8003e6e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003e70:	4b0c      	ldr	r3, [pc, #48]	@ (8003ea4 <std+0x64>)
 8003e72:	6323      	str	r3, [r4, #48]	@ 0x30
 8003e74:	4b0c      	ldr	r3, [pc, #48]	@ (8003ea8 <std+0x68>)
 8003e76:	429c      	cmp	r4, r3
 8003e78:	d006      	beq.n	8003e88 <std+0x48>
 8003e7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003e7e:	4294      	cmp	r4, r2
 8003e80:	d002      	beq.n	8003e88 <std+0x48>
 8003e82:	33d0      	adds	r3, #208	@ 0xd0
 8003e84:	429c      	cmp	r4, r3
 8003e86:	d105      	bne.n	8003e94 <std+0x54>
 8003e88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e90:	f000 ba46 	b.w	8004320 <__retarget_lock_init_recursive>
 8003e94:	bd10      	pop	{r4, pc}
 8003e96:	bf00      	nop
 8003e98:	08004081 	.word	0x08004081
 8003e9c:	080040a3 	.word	0x080040a3
 8003ea0:	080040db 	.word	0x080040db
 8003ea4:	080040ff 	.word	0x080040ff
 8003ea8:	200001a8 	.word	0x200001a8

08003eac <stdio_exit_handler>:
 8003eac:	4a02      	ldr	r2, [pc, #8]	@ (8003eb8 <stdio_exit_handler+0xc>)
 8003eae:	4903      	ldr	r1, [pc, #12]	@ (8003ebc <stdio_exit_handler+0x10>)
 8003eb0:	4803      	ldr	r0, [pc, #12]	@ (8003ec0 <stdio_exit_handler+0x14>)
 8003eb2:	f000 b869 	b.w	8003f88 <_fwalk_sglue>
 8003eb6:	bf00      	nop
 8003eb8:	20000010 	.word	0x20000010
 8003ebc:	08004615 	.word	0x08004615
 8003ec0:	20000020 	.word	0x20000020

08003ec4 <cleanup_stdio>:
 8003ec4:	6841      	ldr	r1, [r0, #4]
 8003ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8003ef8 <cleanup_stdio+0x34>)
 8003ec8:	b510      	push	{r4, lr}
 8003eca:	4299      	cmp	r1, r3
 8003ecc:	4604      	mov	r4, r0
 8003ece:	d001      	beq.n	8003ed4 <cleanup_stdio+0x10>
 8003ed0:	f000 fba0 	bl	8004614 <_fflush_r>
 8003ed4:	68a1      	ldr	r1, [r4, #8]
 8003ed6:	4b09      	ldr	r3, [pc, #36]	@ (8003efc <cleanup_stdio+0x38>)
 8003ed8:	4299      	cmp	r1, r3
 8003eda:	d002      	beq.n	8003ee2 <cleanup_stdio+0x1e>
 8003edc:	4620      	mov	r0, r4
 8003ede:	f000 fb99 	bl	8004614 <_fflush_r>
 8003ee2:	68e1      	ldr	r1, [r4, #12]
 8003ee4:	4b06      	ldr	r3, [pc, #24]	@ (8003f00 <cleanup_stdio+0x3c>)
 8003ee6:	4299      	cmp	r1, r3
 8003ee8:	d004      	beq.n	8003ef4 <cleanup_stdio+0x30>
 8003eea:	4620      	mov	r0, r4
 8003eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ef0:	f000 bb90 	b.w	8004614 <_fflush_r>
 8003ef4:	bd10      	pop	{r4, pc}
 8003ef6:	bf00      	nop
 8003ef8:	200001a8 	.word	0x200001a8
 8003efc:	20000210 	.word	0x20000210
 8003f00:	20000278 	.word	0x20000278

08003f04 <global_stdio_init.part.0>:
 8003f04:	b510      	push	{r4, lr}
 8003f06:	4b0b      	ldr	r3, [pc, #44]	@ (8003f34 <global_stdio_init.part.0+0x30>)
 8003f08:	4c0b      	ldr	r4, [pc, #44]	@ (8003f38 <global_stdio_init.part.0+0x34>)
 8003f0a:	4a0c      	ldr	r2, [pc, #48]	@ (8003f3c <global_stdio_init.part.0+0x38>)
 8003f0c:	4620      	mov	r0, r4
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	2104      	movs	r1, #4
 8003f12:	2200      	movs	r2, #0
 8003f14:	f7ff ff94 	bl	8003e40 <std>
 8003f18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	2109      	movs	r1, #9
 8003f20:	f7ff ff8e 	bl	8003e40 <std>
 8003f24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003f28:	2202      	movs	r2, #2
 8003f2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f2e:	2112      	movs	r1, #18
 8003f30:	f7ff bf86 	b.w	8003e40 <std>
 8003f34:	200002e0 	.word	0x200002e0
 8003f38:	200001a8 	.word	0x200001a8
 8003f3c:	08003ead 	.word	0x08003ead

08003f40 <__sfp_lock_acquire>:
 8003f40:	4801      	ldr	r0, [pc, #4]	@ (8003f48 <__sfp_lock_acquire+0x8>)
 8003f42:	f000 b9ee 	b.w	8004322 <__retarget_lock_acquire_recursive>
 8003f46:	bf00      	nop
 8003f48:	200002e9 	.word	0x200002e9

08003f4c <__sfp_lock_release>:
 8003f4c:	4801      	ldr	r0, [pc, #4]	@ (8003f54 <__sfp_lock_release+0x8>)
 8003f4e:	f000 b9e9 	b.w	8004324 <__retarget_lock_release_recursive>
 8003f52:	bf00      	nop
 8003f54:	200002e9 	.word	0x200002e9

08003f58 <__sinit>:
 8003f58:	b510      	push	{r4, lr}
 8003f5a:	4604      	mov	r4, r0
 8003f5c:	f7ff fff0 	bl	8003f40 <__sfp_lock_acquire>
 8003f60:	6a23      	ldr	r3, [r4, #32]
 8003f62:	b11b      	cbz	r3, 8003f6c <__sinit+0x14>
 8003f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f68:	f7ff bff0 	b.w	8003f4c <__sfp_lock_release>
 8003f6c:	4b04      	ldr	r3, [pc, #16]	@ (8003f80 <__sinit+0x28>)
 8003f6e:	6223      	str	r3, [r4, #32]
 8003f70:	4b04      	ldr	r3, [pc, #16]	@ (8003f84 <__sinit+0x2c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1f5      	bne.n	8003f64 <__sinit+0xc>
 8003f78:	f7ff ffc4 	bl	8003f04 <global_stdio_init.part.0>
 8003f7c:	e7f2      	b.n	8003f64 <__sinit+0xc>
 8003f7e:	bf00      	nop
 8003f80:	08003ec5 	.word	0x08003ec5
 8003f84:	200002e0 	.word	0x200002e0

08003f88 <_fwalk_sglue>:
 8003f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f8c:	4607      	mov	r7, r0
 8003f8e:	4688      	mov	r8, r1
 8003f90:	4614      	mov	r4, r2
 8003f92:	2600      	movs	r6, #0
 8003f94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f98:	f1b9 0901 	subs.w	r9, r9, #1
 8003f9c:	d505      	bpl.n	8003faa <_fwalk_sglue+0x22>
 8003f9e:	6824      	ldr	r4, [r4, #0]
 8003fa0:	2c00      	cmp	r4, #0
 8003fa2:	d1f7      	bne.n	8003f94 <_fwalk_sglue+0xc>
 8003fa4:	4630      	mov	r0, r6
 8003fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003faa:	89ab      	ldrh	r3, [r5, #12]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d907      	bls.n	8003fc0 <_fwalk_sglue+0x38>
 8003fb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	d003      	beq.n	8003fc0 <_fwalk_sglue+0x38>
 8003fb8:	4629      	mov	r1, r5
 8003fba:	4638      	mov	r0, r7
 8003fbc:	47c0      	blx	r8
 8003fbe:	4306      	orrs	r6, r0
 8003fc0:	3568      	adds	r5, #104	@ 0x68
 8003fc2:	e7e9      	b.n	8003f98 <_fwalk_sglue+0x10>

08003fc4 <_puts_r>:
 8003fc4:	6a03      	ldr	r3, [r0, #32]
 8003fc6:	b570      	push	{r4, r5, r6, lr}
 8003fc8:	4605      	mov	r5, r0
 8003fca:	460e      	mov	r6, r1
 8003fcc:	6884      	ldr	r4, [r0, #8]
 8003fce:	b90b      	cbnz	r3, 8003fd4 <_puts_r+0x10>
 8003fd0:	f7ff ffc2 	bl	8003f58 <__sinit>
 8003fd4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003fd6:	07db      	lsls	r3, r3, #31
 8003fd8:	d405      	bmi.n	8003fe6 <_puts_r+0x22>
 8003fda:	89a3      	ldrh	r3, [r4, #12]
 8003fdc:	0598      	lsls	r0, r3, #22
 8003fde:	d402      	bmi.n	8003fe6 <_puts_r+0x22>
 8003fe0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003fe2:	f000 f99e 	bl	8004322 <__retarget_lock_acquire_recursive>
 8003fe6:	89a3      	ldrh	r3, [r4, #12]
 8003fe8:	0719      	lsls	r1, r3, #28
 8003fea:	d502      	bpl.n	8003ff2 <_puts_r+0x2e>
 8003fec:	6923      	ldr	r3, [r4, #16]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d135      	bne.n	800405e <_puts_r+0x9a>
 8003ff2:	4621      	mov	r1, r4
 8003ff4:	4628      	mov	r0, r5
 8003ff6:	f000 f8c5 	bl	8004184 <__swsetup_r>
 8003ffa:	b380      	cbz	r0, 800405e <_puts_r+0x9a>
 8003ffc:	f04f 35ff 	mov.w	r5, #4294967295
 8004000:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004002:	07da      	lsls	r2, r3, #31
 8004004:	d405      	bmi.n	8004012 <_puts_r+0x4e>
 8004006:	89a3      	ldrh	r3, [r4, #12]
 8004008:	059b      	lsls	r3, r3, #22
 800400a:	d402      	bmi.n	8004012 <_puts_r+0x4e>
 800400c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800400e:	f000 f989 	bl	8004324 <__retarget_lock_release_recursive>
 8004012:	4628      	mov	r0, r5
 8004014:	bd70      	pop	{r4, r5, r6, pc}
 8004016:	2b00      	cmp	r3, #0
 8004018:	da04      	bge.n	8004024 <_puts_r+0x60>
 800401a:	69a2      	ldr	r2, [r4, #24]
 800401c:	429a      	cmp	r2, r3
 800401e:	dc17      	bgt.n	8004050 <_puts_r+0x8c>
 8004020:	290a      	cmp	r1, #10
 8004022:	d015      	beq.n	8004050 <_puts_r+0x8c>
 8004024:	6823      	ldr	r3, [r4, #0]
 8004026:	1c5a      	adds	r2, r3, #1
 8004028:	6022      	str	r2, [r4, #0]
 800402a:	7019      	strb	r1, [r3, #0]
 800402c:	68a3      	ldr	r3, [r4, #8]
 800402e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004032:	3b01      	subs	r3, #1
 8004034:	60a3      	str	r3, [r4, #8]
 8004036:	2900      	cmp	r1, #0
 8004038:	d1ed      	bne.n	8004016 <_puts_r+0x52>
 800403a:	2b00      	cmp	r3, #0
 800403c:	da11      	bge.n	8004062 <_puts_r+0x9e>
 800403e:	4622      	mov	r2, r4
 8004040:	210a      	movs	r1, #10
 8004042:	4628      	mov	r0, r5
 8004044:	f000 f85f 	bl	8004106 <__swbuf_r>
 8004048:	3001      	adds	r0, #1
 800404a:	d0d7      	beq.n	8003ffc <_puts_r+0x38>
 800404c:	250a      	movs	r5, #10
 800404e:	e7d7      	b.n	8004000 <_puts_r+0x3c>
 8004050:	4622      	mov	r2, r4
 8004052:	4628      	mov	r0, r5
 8004054:	f000 f857 	bl	8004106 <__swbuf_r>
 8004058:	3001      	adds	r0, #1
 800405a:	d1e7      	bne.n	800402c <_puts_r+0x68>
 800405c:	e7ce      	b.n	8003ffc <_puts_r+0x38>
 800405e:	3e01      	subs	r6, #1
 8004060:	e7e4      	b.n	800402c <_puts_r+0x68>
 8004062:	6823      	ldr	r3, [r4, #0]
 8004064:	1c5a      	adds	r2, r3, #1
 8004066:	6022      	str	r2, [r4, #0]
 8004068:	220a      	movs	r2, #10
 800406a:	701a      	strb	r2, [r3, #0]
 800406c:	e7ee      	b.n	800404c <_puts_r+0x88>
	...

08004070 <puts>:
 8004070:	4b02      	ldr	r3, [pc, #8]	@ (800407c <puts+0xc>)
 8004072:	4601      	mov	r1, r0
 8004074:	6818      	ldr	r0, [r3, #0]
 8004076:	f7ff bfa5 	b.w	8003fc4 <_puts_r>
 800407a:	bf00      	nop
 800407c:	2000001c 	.word	0x2000001c

08004080 <__sread>:
 8004080:	b510      	push	{r4, lr}
 8004082:	460c      	mov	r4, r1
 8004084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004088:	f000 f8fc 	bl	8004284 <_read_r>
 800408c:	2800      	cmp	r0, #0
 800408e:	bfab      	itete	ge
 8004090:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004092:	89a3      	ldrhlt	r3, [r4, #12]
 8004094:	181b      	addge	r3, r3, r0
 8004096:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800409a:	bfac      	ite	ge
 800409c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800409e:	81a3      	strhlt	r3, [r4, #12]
 80040a0:	bd10      	pop	{r4, pc}

080040a2 <__swrite>:
 80040a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040a6:	461f      	mov	r7, r3
 80040a8:	898b      	ldrh	r3, [r1, #12]
 80040aa:	4605      	mov	r5, r0
 80040ac:	05db      	lsls	r3, r3, #23
 80040ae:	460c      	mov	r4, r1
 80040b0:	4616      	mov	r6, r2
 80040b2:	d505      	bpl.n	80040c0 <__swrite+0x1e>
 80040b4:	2302      	movs	r3, #2
 80040b6:	2200      	movs	r2, #0
 80040b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040bc:	f000 f8d0 	bl	8004260 <_lseek_r>
 80040c0:	89a3      	ldrh	r3, [r4, #12]
 80040c2:	4632      	mov	r2, r6
 80040c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80040c8:	81a3      	strh	r3, [r4, #12]
 80040ca:	4628      	mov	r0, r5
 80040cc:	463b      	mov	r3, r7
 80040ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040d6:	f000 b8e7 	b.w	80042a8 <_write_r>

080040da <__sseek>:
 80040da:	b510      	push	{r4, lr}
 80040dc:	460c      	mov	r4, r1
 80040de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040e2:	f000 f8bd 	bl	8004260 <_lseek_r>
 80040e6:	1c43      	adds	r3, r0, #1
 80040e8:	89a3      	ldrh	r3, [r4, #12]
 80040ea:	bf15      	itete	ne
 80040ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80040ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80040f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80040f6:	81a3      	strheq	r3, [r4, #12]
 80040f8:	bf18      	it	ne
 80040fa:	81a3      	strhne	r3, [r4, #12]
 80040fc:	bd10      	pop	{r4, pc}

080040fe <__sclose>:
 80040fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004102:	f000 b89d 	b.w	8004240 <_close_r>

08004106 <__swbuf_r>:
 8004106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004108:	460e      	mov	r6, r1
 800410a:	4614      	mov	r4, r2
 800410c:	4605      	mov	r5, r0
 800410e:	b118      	cbz	r0, 8004118 <__swbuf_r+0x12>
 8004110:	6a03      	ldr	r3, [r0, #32]
 8004112:	b90b      	cbnz	r3, 8004118 <__swbuf_r+0x12>
 8004114:	f7ff ff20 	bl	8003f58 <__sinit>
 8004118:	69a3      	ldr	r3, [r4, #24]
 800411a:	60a3      	str	r3, [r4, #8]
 800411c:	89a3      	ldrh	r3, [r4, #12]
 800411e:	071a      	lsls	r2, r3, #28
 8004120:	d501      	bpl.n	8004126 <__swbuf_r+0x20>
 8004122:	6923      	ldr	r3, [r4, #16]
 8004124:	b943      	cbnz	r3, 8004138 <__swbuf_r+0x32>
 8004126:	4621      	mov	r1, r4
 8004128:	4628      	mov	r0, r5
 800412a:	f000 f82b 	bl	8004184 <__swsetup_r>
 800412e:	b118      	cbz	r0, 8004138 <__swbuf_r+0x32>
 8004130:	f04f 37ff 	mov.w	r7, #4294967295
 8004134:	4638      	mov	r0, r7
 8004136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004138:	6823      	ldr	r3, [r4, #0]
 800413a:	6922      	ldr	r2, [r4, #16]
 800413c:	b2f6      	uxtb	r6, r6
 800413e:	1a98      	subs	r0, r3, r2
 8004140:	6963      	ldr	r3, [r4, #20]
 8004142:	4637      	mov	r7, r6
 8004144:	4283      	cmp	r3, r0
 8004146:	dc05      	bgt.n	8004154 <__swbuf_r+0x4e>
 8004148:	4621      	mov	r1, r4
 800414a:	4628      	mov	r0, r5
 800414c:	f000 fa62 	bl	8004614 <_fflush_r>
 8004150:	2800      	cmp	r0, #0
 8004152:	d1ed      	bne.n	8004130 <__swbuf_r+0x2a>
 8004154:	68a3      	ldr	r3, [r4, #8]
 8004156:	3b01      	subs	r3, #1
 8004158:	60a3      	str	r3, [r4, #8]
 800415a:	6823      	ldr	r3, [r4, #0]
 800415c:	1c5a      	adds	r2, r3, #1
 800415e:	6022      	str	r2, [r4, #0]
 8004160:	701e      	strb	r6, [r3, #0]
 8004162:	6962      	ldr	r2, [r4, #20]
 8004164:	1c43      	adds	r3, r0, #1
 8004166:	429a      	cmp	r2, r3
 8004168:	d004      	beq.n	8004174 <__swbuf_r+0x6e>
 800416a:	89a3      	ldrh	r3, [r4, #12]
 800416c:	07db      	lsls	r3, r3, #31
 800416e:	d5e1      	bpl.n	8004134 <__swbuf_r+0x2e>
 8004170:	2e0a      	cmp	r6, #10
 8004172:	d1df      	bne.n	8004134 <__swbuf_r+0x2e>
 8004174:	4621      	mov	r1, r4
 8004176:	4628      	mov	r0, r5
 8004178:	f000 fa4c 	bl	8004614 <_fflush_r>
 800417c:	2800      	cmp	r0, #0
 800417e:	d0d9      	beq.n	8004134 <__swbuf_r+0x2e>
 8004180:	e7d6      	b.n	8004130 <__swbuf_r+0x2a>
	...

08004184 <__swsetup_r>:
 8004184:	b538      	push	{r3, r4, r5, lr}
 8004186:	4b29      	ldr	r3, [pc, #164]	@ (800422c <__swsetup_r+0xa8>)
 8004188:	4605      	mov	r5, r0
 800418a:	6818      	ldr	r0, [r3, #0]
 800418c:	460c      	mov	r4, r1
 800418e:	b118      	cbz	r0, 8004198 <__swsetup_r+0x14>
 8004190:	6a03      	ldr	r3, [r0, #32]
 8004192:	b90b      	cbnz	r3, 8004198 <__swsetup_r+0x14>
 8004194:	f7ff fee0 	bl	8003f58 <__sinit>
 8004198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800419c:	0719      	lsls	r1, r3, #28
 800419e:	d422      	bmi.n	80041e6 <__swsetup_r+0x62>
 80041a0:	06da      	lsls	r2, r3, #27
 80041a2:	d407      	bmi.n	80041b4 <__swsetup_r+0x30>
 80041a4:	2209      	movs	r2, #9
 80041a6:	602a      	str	r2, [r5, #0]
 80041a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041ac:	f04f 30ff 	mov.w	r0, #4294967295
 80041b0:	81a3      	strh	r3, [r4, #12]
 80041b2:	e033      	b.n	800421c <__swsetup_r+0x98>
 80041b4:	0758      	lsls	r0, r3, #29
 80041b6:	d512      	bpl.n	80041de <__swsetup_r+0x5a>
 80041b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80041ba:	b141      	cbz	r1, 80041ce <__swsetup_r+0x4a>
 80041bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80041c0:	4299      	cmp	r1, r3
 80041c2:	d002      	beq.n	80041ca <__swsetup_r+0x46>
 80041c4:	4628      	mov	r0, r5
 80041c6:	f000 f8af 	bl	8004328 <_free_r>
 80041ca:	2300      	movs	r3, #0
 80041cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80041ce:	89a3      	ldrh	r3, [r4, #12]
 80041d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80041d4:	81a3      	strh	r3, [r4, #12]
 80041d6:	2300      	movs	r3, #0
 80041d8:	6063      	str	r3, [r4, #4]
 80041da:	6923      	ldr	r3, [r4, #16]
 80041dc:	6023      	str	r3, [r4, #0]
 80041de:	89a3      	ldrh	r3, [r4, #12]
 80041e0:	f043 0308 	orr.w	r3, r3, #8
 80041e4:	81a3      	strh	r3, [r4, #12]
 80041e6:	6923      	ldr	r3, [r4, #16]
 80041e8:	b94b      	cbnz	r3, 80041fe <__swsetup_r+0x7a>
 80041ea:	89a3      	ldrh	r3, [r4, #12]
 80041ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80041f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041f4:	d003      	beq.n	80041fe <__swsetup_r+0x7a>
 80041f6:	4621      	mov	r1, r4
 80041f8:	4628      	mov	r0, r5
 80041fa:	f000 fa58 	bl	80046ae <__smakebuf_r>
 80041fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004202:	f013 0201 	ands.w	r2, r3, #1
 8004206:	d00a      	beq.n	800421e <__swsetup_r+0x9a>
 8004208:	2200      	movs	r2, #0
 800420a:	60a2      	str	r2, [r4, #8]
 800420c:	6962      	ldr	r2, [r4, #20]
 800420e:	4252      	negs	r2, r2
 8004210:	61a2      	str	r2, [r4, #24]
 8004212:	6922      	ldr	r2, [r4, #16]
 8004214:	b942      	cbnz	r2, 8004228 <__swsetup_r+0xa4>
 8004216:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800421a:	d1c5      	bne.n	80041a8 <__swsetup_r+0x24>
 800421c:	bd38      	pop	{r3, r4, r5, pc}
 800421e:	0799      	lsls	r1, r3, #30
 8004220:	bf58      	it	pl
 8004222:	6962      	ldrpl	r2, [r4, #20]
 8004224:	60a2      	str	r2, [r4, #8]
 8004226:	e7f4      	b.n	8004212 <__swsetup_r+0x8e>
 8004228:	2000      	movs	r0, #0
 800422a:	e7f7      	b.n	800421c <__swsetup_r+0x98>
 800422c:	2000001c 	.word	0x2000001c

08004230 <memset>:
 8004230:	4603      	mov	r3, r0
 8004232:	4402      	add	r2, r0
 8004234:	4293      	cmp	r3, r2
 8004236:	d100      	bne.n	800423a <memset+0xa>
 8004238:	4770      	bx	lr
 800423a:	f803 1b01 	strb.w	r1, [r3], #1
 800423e:	e7f9      	b.n	8004234 <memset+0x4>

08004240 <_close_r>:
 8004240:	b538      	push	{r3, r4, r5, lr}
 8004242:	2300      	movs	r3, #0
 8004244:	4d05      	ldr	r5, [pc, #20]	@ (800425c <_close_r+0x1c>)
 8004246:	4604      	mov	r4, r0
 8004248:	4608      	mov	r0, r1
 800424a:	602b      	str	r3, [r5, #0]
 800424c:	f7fd fcaa 	bl	8001ba4 <_close>
 8004250:	1c43      	adds	r3, r0, #1
 8004252:	d102      	bne.n	800425a <_close_r+0x1a>
 8004254:	682b      	ldr	r3, [r5, #0]
 8004256:	b103      	cbz	r3, 800425a <_close_r+0x1a>
 8004258:	6023      	str	r3, [r4, #0]
 800425a:	bd38      	pop	{r3, r4, r5, pc}
 800425c:	200002e4 	.word	0x200002e4

08004260 <_lseek_r>:
 8004260:	b538      	push	{r3, r4, r5, lr}
 8004262:	4604      	mov	r4, r0
 8004264:	4608      	mov	r0, r1
 8004266:	4611      	mov	r1, r2
 8004268:	2200      	movs	r2, #0
 800426a:	4d05      	ldr	r5, [pc, #20]	@ (8004280 <_lseek_r+0x20>)
 800426c:	602a      	str	r2, [r5, #0]
 800426e:	461a      	mov	r2, r3
 8004270:	f7fd fcbc 	bl	8001bec <_lseek>
 8004274:	1c43      	adds	r3, r0, #1
 8004276:	d102      	bne.n	800427e <_lseek_r+0x1e>
 8004278:	682b      	ldr	r3, [r5, #0]
 800427a:	b103      	cbz	r3, 800427e <_lseek_r+0x1e>
 800427c:	6023      	str	r3, [r4, #0]
 800427e:	bd38      	pop	{r3, r4, r5, pc}
 8004280:	200002e4 	.word	0x200002e4

08004284 <_read_r>:
 8004284:	b538      	push	{r3, r4, r5, lr}
 8004286:	4604      	mov	r4, r0
 8004288:	4608      	mov	r0, r1
 800428a:	4611      	mov	r1, r2
 800428c:	2200      	movs	r2, #0
 800428e:	4d05      	ldr	r5, [pc, #20]	@ (80042a4 <_read_r+0x20>)
 8004290:	602a      	str	r2, [r5, #0]
 8004292:	461a      	mov	r2, r3
 8004294:	f7fd fc69 	bl	8001b6a <_read>
 8004298:	1c43      	adds	r3, r0, #1
 800429a:	d102      	bne.n	80042a2 <_read_r+0x1e>
 800429c:	682b      	ldr	r3, [r5, #0]
 800429e:	b103      	cbz	r3, 80042a2 <_read_r+0x1e>
 80042a0:	6023      	str	r3, [r4, #0]
 80042a2:	bd38      	pop	{r3, r4, r5, pc}
 80042a4:	200002e4 	.word	0x200002e4

080042a8 <_write_r>:
 80042a8:	b538      	push	{r3, r4, r5, lr}
 80042aa:	4604      	mov	r4, r0
 80042ac:	4608      	mov	r0, r1
 80042ae:	4611      	mov	r1, r2
 80042b0:	2200      	movs	r2, #0
 80042b2:	4d05      	ldr	r5, [pc, #20]	@ (80042c8 <_write_r+0x20>)
 80042b4:	602a      	str	r2, [r5, #0]
 80042b6:	461a      	mov	r2, r3
 80042b8:	f7fd f894 	bl	80013e4 <_write>
 80042bc:	1c43      	adds	r3, r0, #1
 80042be:	d102      	bne.n	80042c6 <_write_r+0x1e>
 80042c0:	682b      	ldr	r3, [r5, #0]
 80042c2:	b103      	cbz	r3, 80042c6 <_write_r+0x1e>
 80042c4:	6023      	str	r3, [r4, #0]
 80042c6:	bd38      	pop	{r3, r4, r5, pc}
 80042c8:	200002e4 	.word	0x200002e4

080042cc <__errno>:
 80042cc:	4b01      	ldr	r3, [pc, #4]	@ (80042d4 <__errno+0x8>)
 80042ce:	6818      	ldr	r0, [r3, #0]
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	2000001c 	.word	0x2000001c

080042d8 <__libc_init_array>:
 80042d8:	b570      	push	{r4, r5, r6, lr}
 80042da:	2600      	movs	r6, #0
 80042dc:	4d0c      	ldr	r5, [pc, #48]	@ (8004310 <__libc_init_array+0x38>)
 80042de:	4c0d      	ldr	r4, [pc, #52]	@ (8004314 <__libc_init_array+0x3c>)
 80042e0:	1b64      	subs	r4, r4, r5
 80042e2:	10a4      	asrs	r4, r4, #2
 80042e4:	42a6      	cmp	r6, r4
 80042e6:	d109      	bne.n	80042fc <__libc_init_array+0x24>
 80042e8:	f000 fa50 	bl	800478c <_init>
 80042ec:	2600      	movs	r6, #0
 80042ee:	4d0a      	ldr	r5, [pc, #40]	@ (8004318 <__libc_init_array+0x40>)
 80042f0:	4c0a      	ldr	r4, [pc, #40]	@ (800431c <__libc_init_array+0x44>)
 80042f2:	1b64      	subs	r4, r4, r5
 80042f4:	10a4      	asrs	r4, r4, #2
 80042f6:	42a6      	cmp	r6, r4
 80042f8:	d105      	bne.n	8004306 <__libc_init_array+0x2e>
 80042fa:	bd70      	pop	{r4, r5, r6, pc}
 80042fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004300:	4798      	blx	r3
 8004302:	3601      	adds	r6, #1
 8004304:	e7ee      	b.n	80042e4 <__libc_init_array+0xc>
 8004306:	f855 3b04 	ldr.w	r3, [r5], #4
 800430a:	4798      	blx	r3
 800430c:	3601      	adds	r6, #1
 800430e:	e7f2      	b.n	80042f6 <__libc_init_array+0x1e>
 8004310:	0800482c 	.word	0x0800482c
 8004314:	0800482c 	.word	0x0800482c
 8004318:	0800482c 	.word	0x0800482c
 800431c:	08004830 	.word	0x08004830

08004320 <__retarget_lock_init_recursive>:
 8004320:	4770      	bx	lr

08004322 <__retarget_lock_acquire_recursive>:
 8004322:	4770      	bx	lr

08004324 <__retarget_lock_release_recursive>:
 8004324:	4770      	bx	lr
	...

08004328 <_free_r>:
 8004328:	b538      	push	{r3, r4, r5, lr}
 800432a:	4605      	mov	r5, r0
 800432c:	2900      	cmp	r1, #0
 800432e:	d040      	beq.n	80043b2 <_free_r+0x8a>
 8004330:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004334:	1f0c      	subs	r4, r1, #4
 8004336:	2b00      	cmp	r3, #0
 8004338:	bfb8      	it	lt
 800433a:	18e4      	addlt	r4, r4, r3
 800433c:	f000 f8de 	bl	80044fc <__malloc_lock>
 8004340:	4a1c      	ldr	r2, [pc, #112]	@ (80043b4 <_free_r+0x8c>)
 8004342:	6813      	ldr	r3, [r2, #0]
 8004344:	b933      	cbnz	r3, 8004354 <_free_r+0x2c>
 8004346:	6063      	str	r3, [r4, #4]
 8004348:	6014      	str	r4, [r2, #0]
 800434a:	4628      	mov	r0, r5
 800434c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004350:	f000 b8da 	b.w	8004508 <__malloc_unlock>
 8004354:	42a3      	cmp	r3, r4
 8004356:	d908      	bls.n	800436a <_free_r+0x42>
 8004358:	6820      	ldr	r0, [r4, #0]
 800435a:	1821      	adds	r1, r4, r0
 800435c:	428b      	cmp	r3, r1
 800435e:	bf01      	itttt	eq
 8004360:	6819      	ldreq	r1, [r3, #0]
 8004362:	685b      	ldreq	r3, [r3, #4]
 8004364:	1809      	addeq	r1, r1, r0
 8004366:	6021      	streq	r1, [r4, #0]
 8004368:	e7ed      	b.n	8004346 <_free_r+0x1e>
 800436a:	461a      	mov	r2, r3
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	b10b      	cbz	r3, 8004374 <_free_r+0x4c>
 8004370:	42a3      	cmp	r3, r4
 8004372:	d9fa      	bls.n	800436a <_free_r+0x42>
 8004374:	6811      	ldr	r1, [r2, #0]
 8004376:	1850      	adds	r0, r2, r1
 8004378:	42a0      	cmp	r0, r4
 800437a:	d10b      	bne.n	8004394 <_free_r+0x6c>
 800437c:	6820      	ldr	r0, [r4, #0]
 800437e:	4401      	add	r1, r0
 8004380:	1850      	adds	r0, r2, r1
 8004382:	4283      	cmp	r3, r0
 8004384:	6011      	str	r1, [r2, #0]
 8004386:	d1e0      	bne.n	800434a <_free_r+0x22>
 8004388:	6818      	ldr	r0, [r3, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	4408      	add	r0, r1
 800438e:	6010      	str	r0, [r2, #0]
 8004390:	6053      	str	r3, [r2, #4]
 8004392:	e7da      	b.n	800434a <_free_r+0x22>
 8004394:	d902      	bls.n	800439c <_free_r+0x74>
 8004396:	230c      	movs	r3, #12
 8004398:	602b      	str	r3, [r5, #0]
 800439a:	e7d6      	b.n	800434a <_free_r+0x22>
 800439c:	6820      	ldr	r0, [r4, #0]
 800439e:	1821      	adds	r1, r4, r0
 80043a0:	428b      	cmp	r3, r1
 80043a2:	bf01      	itttt	eq
 80043a4:	6819      	ldreq	r1, [r3, #0]
 80043a6:	685b      	ldreq	r3, [r3, #4]
 80043a8:	1809      	addeq	r1, r1, r0
 80043aa:	6021      	streq	r1, [r4, #0]
 80043ac:	6063      	str	r3, [r4, #4]
 80043ae:	6054      	str	r4, [r2, #4]
 80043b0:	e7cb      	b.n	800434a <_free_r+0x22>
 80043b2:	bd38      	pop	{r3, r4, r5, pc}
 80043b4:	200002f0 	.word	0x200002f0

080043b8 <sbrk_aligned>:
 80043b8:	b570      	push	{r4, r5, r6, lr}
 80043ba:	4e0f      	ldr	r6, [pc, #60]	@ (80043f8 <sbrk_aligned+0x40>)
 80043bc:	460c      	mov	r4, r1
 80043be:	6831      	ldr	r1, [r6, #0]
 80043c0:	4605      	mov	r5, r0
 80043c2:	b911      	cbnz	r1, 80043ca <sbrk_aligned+0x12>
 80043c4:	f000 f9d2 	bl	800476c <_sbrk_r>
 80043c8:	6030      	str	r0, [r6, #0]
 80043ca:	4621      	mov	r1, r4
 80043cc:	4628      	mov	r0, r5
 80043ce:	f000 f9cd 	bl	800476c <_sbrk_r>
 80043d2:	1c43      	adds	r3, r0, #1
 80043d4:	d103      	bne.n	80043de <sbrk_aligned+0x26>
 80043d6:	f04f 34ff 	mov.w	r4, #4294967295
 80043da:	4620      	mov	r0, r4
 80043dc:	bd70      	pop	{r4, r5, r6, pc}
 80043de:	1cc4      	adds	r4, r0, #3
 80043e0:	f024 0403 	bic.w	r4, r4, #3
 80043e4:	42a0      	cmp	r0, r4
 80043e6:	d0f8      	beq.n	80043da <sbrk_aligned+0x22>
 80043e8:	1a21      	subs	r1, r4, r0
 80043ea:	4628      	mov	r0, r5
 80043ec:	f000 f9be 	bl	800476c <_sbrk_r>
 80043f0:	3001      	adds	r0, #1
 80043f2:	d1f2      	bne.n	80043da <sbrk_aligned+0x22>
 80043f4:	e7ef      	b.n	80043d6 <sbrk_aligned+0x1e>
 80043f6:	bf00      	nop
 80043f8:	200002ec 	.word	0x200002ec

080043fc <_malloc_r>:
 80043fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004400:	1ccd      	adds	r5, r1, #3
 8004402:	f025 0503 	bic.w	r5, r5, #3
 8004406:	3508      	adds	r5, #8
 8004408:	2d0c      	cmp	r5, #12
 800440a:	bf38      	it	cc
 800440c:	250c      	movcc	r5, #12
 800440e:	2d00      	cmp	r5, #0
 8004410:	4606      	mov	r6, r0
 8004412:	db01      	blt.n	8004418 <_malloc_r+0x1c>
 8004414:	42a9      	cmp	r1, r5
 8004416:	d904      	bls.n	8004422 <_malloc_r+0x26>
 8004418:	230c      	movs	r3, #12
 800441a:	6033      	str	r3, [r6, #0]
 800441c:	2000      	movs	r0, #0
 800441e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004422:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80044f8 <_malloc_r+0xfc>
 8004426:	f000 f869 	bl	80044fc <__malloc_lock>
 800442a:	f8d8 3000 	ldr.w	r3, [r8]
 800442e:	461c      	mov	r4, r3
 8004430:	bb44      	cbnz	r4, 8004484 <_malloc_r+0x88>
 8004432:	4629      	mov	r1, r5
 8004434:	4630      	mov	r0, r6
 8004436:	f7ff ffbf 	bl	80043b8 <sbrk_aligned>
 800443a:	1c43      	adds	r3, r0, #1
 800443c:	4604      	mov	r4, r0
 800443e:	d158      	bne.n	80044f2 <_malloc_r+0xf6>
 8004440:	f8d8 4000 	ldr.w	r4, [r8]
 8004444:	4627      	mov	r7, r4
 8004446:	2f00      	cmp	r7, #0
 8004448:	d143      	bne.n	80044d2 <_malloc_r+0xd6>
 800444a:	2c00      	cmp	r4, #0
 800444c:	d04b      	beq.n	80044e6 <_malloc_r+0xea>
 800444e:	6823      	ldr	r3, [r4, #0]
 8004450:	4639      	mov	r1, r7
 8004452:	4630      	mov	r0, r6
 8004454:	eb04 0903 	add.w	r9, r4, r3
 8004458:	f000 f988 	bl	800476c <_sbrk_r>
 800445c:	4581      	cmp	r9, r0
 800445e:	d142      	bne.n	80044e6 <_malloc_r+0xea>
 8004460:	6821      	ldr	r1, [r4, #0]
 8004462:	4630      	mov	r0, r6
 8004464:	1a6d      	subs	r5, r5, r1
 8004466:	4629      	mov	r1, r5
 8004468:	f7ff ffa6 	bl	80043b8 <sbrk_aligned>
 800446c:	3001      	adds	r0, #1
 800446e:	d03a      	beq.n	80044e6 <_malloc_r+0xea>
 8004470:	6823      	ldr	r3, [r4, #0]
 8004472:	442b      	add	r3, r5
 8004474:	6023      	str	r3, [r4, #0]
 8004476:	f8d8 3000 	ldr.w	r3, [r8]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	bb62      	cbnz	r2, 80044d8 <_malloc_r+0xdc>
 800447e:	f8c8 7000 	str.w	r7, [r8]
 8004482:	e00f      	b.n	80044a4 <_malloc_r+0xa8>
 8004484:	6822      	ldr	r2, [r4, #0]
 8004486:	1b52      	subs	r2, r2, r5
 8004488:	d420      	bmi.n	80044cc <_malloc_r+0xd0>
 800448a:	2a0b      	cmp	r2, #11
 800448c:	d917      	bls.n	80044be <_malloc_r+0xc2>
 800448e:	1961      	adds	r1, r4, r5
 8004490:	42a3      	cmp	r3, r4
 8004492:	6025      	str	r5, [r4, #0]
 8004494:	bf18      	it	ne
 8004496:	6059      	strne	r1, [r3, #4]
 8004498:	6863      	ldr	r3, [r4, #4]
 800449a:	bf08      	it	eq
 800449c:	f8c8 1000 	streq.w	r1, [r8]
 80044a0:	5162      	str	r2, [r4, r5]
 80044a2:	604b      	str	r3, [r1, #4]
 80044a4:	4630      	mov	r0, r6
 80044a6:	f000 f82f 	bl	8004508 <__malloc_unlock>
 80044aa:	f104 000b 	add.w	r0, r4, #11
 80044ae:	1d23      	adds	r3, r4, #4
 80044b0:	f020 0007 	bic.w	r0, r0, #7
 80044b4:	1ac2      	subs	r2, r0, r3
 80044b6:	bf1c      	itt	ne
 80044b8:	1a1b      	subne	r3, r3, r0
 80044ba:	50a3      	strne	r3, [r4, r2]
 80044bc:	e7af      	b.n	800441e <_malloc_r+0x22>
 80044be:	6862      	ldr	r2, [r4, #4]
 80044c0:	42a3      	cmp	r3, r4
 80044c2:	bf0c      	ite	eq
 80044c4:	f8c8 2000 	streq.w	r2, [r8]
 80044c8:	605a      	strne	r2, [r3, #4]
 80044ca:	e7eb      	b.n	80044a4 <_malloc_r+0xa8>
 80044cc:	4623      	mov	r3, r4
 80044ce:	6864      	ldr	r4, [r4, #4]
 80044d0:	e7ae      	b.n	8004430 <_malloc_r+0x34>
 80044d2:	463c      	mov	r4, r7
 80044d4:	687f      	ldr	r7, [r7, #4]
 80044d6:	e7b6      	b.n	8004446 <_malloc_r+0x4a>
 80044d8:	461a      	mov	r2, r3
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	42a3      	cmp	r3, r4
 80044de:	d1fb      	bne.n	80044d8 <_malloc_r+0xdc>
 80044e0:	2300      	movs	r3, #0
 80044e2:	6053      	str	r3, [r2, #4]
 80044e4:	e7de      	b.n	80044a4 <_malloc_r+0xa8>
 80044e6:	230c      	movs	r3, #12
 80044e8:	4630      	mov	r0, r6
 80044ea:	6033      	str	r3, [r6, #0]
 80044ec:	f000 f80c 	bl	8004508 <__malloc_unlock>
 80044f0:	e794      	b.n	800441c <_malloc_r+0x20>
 80044f2:	6005      	str	r5, [r0, #0]
 80044f4:	e7d6      	b.n	80044a4 <_malloc_r+0xa8>
 80044f6:	bf00      	nop
 80044f8:	200002f0 	.word	0x200002f0

080044fc <__malloc_lock>:
 80044fc:	4801      	ldr	r0, [pc, #4]	@ (8004504 <__malloc_lock+0x8>)
 80044fe:	f7ff bf10 	b.w	8004322 <__retarget_lock_acquire_recursive>
 8004502:	bf00      	nop
 8004504:	200002e8 	.word	0x200002e8

08004508 <__malloc_unlock>:
 8004508:	4801      	ldr	r0, [pc, #4]	@ (8004510 <__malloc_unlock+0x8>)
 800450a:	f7ff bf0b 	b.w	8004324 <__retarget_lock_release_recursive>
 800450e:	bf00      	nop
 8004510:	200002e8 	.word	0x200002e8

08004514 <__sflush_r>:
 8004514:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800451a:	0716      	lsls	r6, r2, #28
 800451c:	4605      	mov	r5, r0
 800451e:	460c      	mov	r4, r1
 8004520:	d454      	bmi.n	80045cc <__sflush_r+0xb8>
 8004522:	684b      	ldr	r3, [r1, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	dc02      	bgt.n	800452e <__sflush_r+0x1a>
 8004528:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800452a:	2b00      	cmp	r3, #0
 800452c:	dd48      	ble.n	80045c0 <__sflush_r+0xac>
 800452e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004530:	2e00      	cmp	r6, #0
 8004532:	d045      	beq.n	80045c0 <__sflush_r+0xac>
 8004534:	2300      	movs	r3, #0
 8004536:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800453a:	682f      	ldr	r7, [r5, #0]
 800453c:	6a21      	ldr	r1, [r4, #32]
 800453e:	602b      	str	r3, [r5, #0]
 8004540:	d030      	beq.n	80045a4 <__sflush_r+0x90>
 8004542:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004544:	89a3      	ldrh	r3, [r4, #12]
 8004546:	0759      	lsls	r1, r3, #29
 8004548:	d505      	bpl.n	8004556 <__sflush_r+0x42>
 800454a:	6863      	ldr	r3, [r4, #4]
 800454c:	1ad2      	subs	r2, r2, r3
 800454e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004550:	b10b      	cbz	r3, 8004556 <__sflush_r+0x42>
 8004552:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004554:	1ad2      	subs	r2, r2, r3
 8004556:	2300      	movs	r3, #0
 8004558:	4628      	mov	r0, r5
 800455a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800455c:	6a21      	ldr	r1, [r4, #32]
 800455e:	47b0      	blx	r6
 8004560:	1c43      	adds	r3, r0, #1
 8004562:	89a3      	ldrh	r3, [r4, #12]
 8004564:	d106      	bne.n	8004574 <__sflush_r+0x60>
 8004566:	6829      	ldr	r1, [r5, #0]
 8004568:	291d      	cmp	r1, #29
 800456a:	d82b      	bhi.n	80045c4 <__sflush_r+0xb0>
 800456c:	4a28      	ldr	r2, [pc, #160]	@ (8004610 <__sflush_r+0xfc>)
 800456e:	410a      	asrs	r2, r1
 8004570:	07d6      	lsls	r6, r2, #31
 8004572:	d427      	bmi.n	80045c4 <__sflush_r+0xb0>
 8004574:	2200      	movs	r2, #0
 8004576:	6062      	str	r2, [r4, #4]
 8004578:	6922      	ldr	r2, [r4, #16]
 800457a:	04d9      	lsls	r1, r3, #19
 800457c:	6022      	str	r2, [r4, #0]
 800457e:	d504      	bpl.n	800458a <__sflush_r+0x76>
 8004580:	1c42      	adds	r2, r0, #1
 8004582:	d101      	bne.n	8004588 <__sflush_r+0x74>
 8004584:	682b      	ldr	r3, [r5, #0]
 8004586:	b903      	cbnz	r3, 800458a <__sflush_r+0x76>
 8004588:	6560      	str	r0, [r4, #84]	@ 0x54
 800458a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800458c:	602f      	str	r7, [r5, #0]
 800458e:	b1b9      	cbz	r1, 80045c0 <__sflush_r+0xac>
 8004590:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004594:	4299      	cmp	r1, r3
 8004596:	d002      	beq.n	800459e <__sflush_r+0x8a>
 8004598:	4628      	mov	r0, r5
 800459a:	f7ff fec5 	bl	8004328 <_free_r>
 800459e:	2300      	movs	r3, #0
 80045a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80045a2:	e00d      	b.n	80045c0 <__sflush_r+0xac>
 80045a4:	2301      	movs	r3, #1
 80045a6:	4628      	mov	r0, r5
 80045a8:	47b0      	blx	r6
 80045aa:	4602      	mov	r2, r0
 80045ac:	1c50      	adds	r0, r2, #1
 80045ae:	d1c9      	bne.n	8004544 <__sflush_r+0x30>
 80045b0:	682b      	ldr	r3, [r5, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0c6      	beq.n	8004544 <__sflush_r+0x30>
 80045b6:	2b1d      	cmp	r3, #29
 80045b8:	d001      	beq.n	80045be <__sflush_r+0xaa>
 80045ba:	2b16      	cmp	r3, #22
 80045bc:	d11d      	bne.n	80045fa <__sflush_r+0xe6>
 80045be:	602f      	str	r7, [r5, #0]
 80045c0:	2000      	movs	r0, #0
 80045c2:	e021      	b.n	8004608 <__sflush_r+0xf4>
 80045c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045c8:	b21b      	sxth	r3, r3
 80045ca:	e01a      	b.n	8004602 <__sflush_r+0xee>
 80045cc:	690f      	ldr	r7, [r1, #16]
 80045ce:	2f00      	cmp	r7, #0
 80045d0:	d0f6      	beq.n	80045c0 <__sflush_r+0xac>
 80045d2:	0793      	lsls	r3, r2, #30
 80045d4:	bf18      	it	ne
 80045d6:	2300      	movne	r3, #0
 80045d8:	680e      	ldr	r6, [r1, #0]
 80045da:	bf08      	it	eq
 80045dc:	694b      	ldreq	r3, [r1, #20]
 80045de:	1bf6      	subs	r6, r6, r7
 80045e0:	600f      	str	r7, [r1, #0]
 80045e2:	608b      	str	r3, [r1, #8]
 80045e4:	2e00      	cmp	r6, #0
 80045e6:	ddeb      	ble.n	80045c0 <__sflush_r+0xac>
 80045e8:	4633      	mov	r3, r6
 80045ea:	463a      	mov	r2, r7
 80045ec:	4628      	mov	r0, r5
 80045ee:	6a21      	ldr	r1, [r4, #32]
 80045f0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80045f4:	47e0      	blx	ip
 80045f6:	2800      	cmp	r0, #0
 80045f8:	dc07      	bgt.n	800460a <__sflush_r+0xf6>
 80045fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004602:	f04f 30ff 	mov.w	r0, #4294967295
 8004606:	81a3      	strh	r3, [r4, #12]
 8004608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800460a:	4407      	add	r7, r0
 800460c:	1a36      	subs	r6, r6, r0
 800460e:	e7e9      	b.n	80045e4 <__sflush_r+0xd0>
 8004610:	dfbffffe 	.word	0xdfbffffe

08004614 <_fflush_r>:
 8004614:	b538      	push	{r3, r4, r5, lr}
 8004616:	690b      	ldr	r3, [r1, #16]
 8004618:	4605      	mov	r5, r0
 800461a:	460c      	mov	r4, r1
 800461c:	b913      	cbnz	r3, 8004624 <_fflush_r+0x10>
 800461e:	2500      	movs	r5, #0
 8004620:	4628      	mov	r0, r5
 8004622:	bd38      	pop	{r3, r4, r5, pc}
 8004624:	b118      	cbz	r0, 800462e <_fflush_r+0x1a>
 8004626:	6a03      	ldr	r3, [r0, #32]
 8004628:	b90b      	cbnz	r3, 800462e <_fflush_r+0x1a>
 800462a:	f7ff fc95 	bl	8003f58 <__sinit>
 800462e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0f3      	beq.n	800461e <_fflush_r+0xa>
 8004636:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004638:	07d0      	lsls	r0, r2, #31
 800463a:	d404      	bmi.n	8004646 <_fflush_r+0x32>
 800463c:	0599      	lsls	r1, r3, #22
 800463e:	d402      	bmi.n	8004646 <_fflush_r+0x32>
 8004640:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004642:	f7ff fe6e 	bl	8004322 <__retarget_lock_acquire_recursive>
 8004646:	4628      	mov	r0, r5
 8004648:	4621      	mov	r1, r4
 800464a:	f7ff ff63 	bl	8004514 <__sflush_r>
 800464e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004650:	4605      	mov	r5, r0
 8004652:	07da      	lsls	r2, r3, #31
 8004654:	d4e4      	bmi.n	8004620 <_fflush_r+0xc>
 8004656:	89a3      	ldrh	r3, [r4, #12]
 8004658:	059b      	lsls	r3, r3, #22
 800465a:	d4e1      	bmi.n	8004620 <_fflush_r+0xc>
 800465c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800465e:	f7ff fe61 	bl	8004324 <__retarget_lock_release_recursive>
 8004662:	e7dd      	b.n	8004620 <_fflush_r+0xc>

08004664 <__swhatbuf_r>:
 8004664:	b570      	push	{r4, r5, r6, lr}
 8004666:	460c      	mov	r4, r1
 8004668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800466c:	4615      	mov	r5, r2
 800466e:	2900      	cmp	r1, #0
 8004670:	461e      	mov	r6, r3
 8004672:	b096      	sub	sp, #88	@ 0x58
 8004674:	da0c      	bge.n	8004690 <__swhatbuf_r+0x2c>
 8004676:	89a3      	ldrh	r3, [r4, #12]
 8004678:	2100      	movs	r1, #0
 800467a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800467e:	bf14      	ite	ne
 8004680:	2340      	movne	r3, #64	@ 0x40
 8004682:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004686:	2000      	movs	r0, #0
 8004688:	6031      	str	r1, [r6, #0]
 800468a:	602b      	str	r3, [r5, #0]
 800468c:	b016      	add	sp, #88	@ 0x58
 800468e:	bd70      	pop	{r4, r5, r6, pc}
 8004690:	466a      	mov	r2, sp
 8004692:	f000 f849 	bl	8004728 <_fstat_r>
 8004696:	2800      	cmp	r0, #0
 8004698:	dbed      	blt.n	8004676 <__swhatbuf_r+0x12>
 800469a:	9901      	ldr	r1, [sp, #4]
 800469c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80046a0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80046a4:	4259      	negs	r1, r3
 80046a6:	4159      	adcs	r1, r3
 80046a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80046ac:	e7eb      	b.n	8004686 <__swhatbuf_r+0x22>

080046ae <__smakebuf_r>:
 80046ae:	898b      	ldrh	r3, [r1, #12]
 80046b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046b2:	079d      	lsls	r5, r3, #30
 80046b4:	4606      	mov	r6, r0
 80046b6:	460c      	mov	r4, r1
 80046b8:	d507      	bpl.n	80046ca <__smakebuf_r+0x1c>
 80046ba:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80046be:	6023      	str	r3, [r4, #0]
 80046c0:	6123      	str	r3, [r4, #16]
 80046c2:	2301      	movs	r3, #1
 80046c4:	6163      	str	r3, [r4, #20]
 80046c6:	b003      	add	sp, #12
 80046c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046ca:	466a      	mov	r2, sp
 80046cc:	ab01      	add	r3, sp, #4
 80046ce:	f7ff ffc9 	bl	8004664 <__swhatbuf_r>
 80046d2:	9f00      	ldr	r7, [sp, #0]
 80046d4:	4605      	mov	r5, r0
 80046d6:	4639      	mov	r1, r7
 80046d8:	4630      	mov	r0, r6
 80046da:	f7ff fe8f 	bl	80043fc <_malloc_r>
 80046de:	b948      	cbnz	r0, 80046f4 <__smakebuf_r+0x46>
 80046e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046e4:	059a      	lsls	r2, r3, #22
 80046e6:	d4ee      	bmi.n	80046c6 <__smakebuf_r+0x18>
 80046e8:	f023 0303 	bic.w	r3, r3, #3
 80046ec:	f043 0302 	orr.w	r3, r3, #2
 80046f0:	81a3      	strh	r3, [r4, #12]
 80046f2:	e7e2      	b.n	80046ba <__smakebuf_r+0xc>
 80046f4:	89a3      	ldrh	r3, [r4, #12]
 80046f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80046fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046fe:	81a3      	strh	r3, [r4, #12]
 8004700:	9b01      	ldr	r3, [sp, #4]
 8004702:	6020      	str	r0, [r4, #0]
 8004704:	b15b      	cbz	r3, 800471e <__smakebuf_r+0x70>
 8004706:	4630      	mov	r0, r6
 8004708:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800470c:	f000 f81e 	bl	800474c <_isatty_r>
 8004710:	b128      	cbz	r0, 800471e <__smakebuf_r+0x70>
 8004712:	89a3      	ldrh	r3, [r4, #12]
 8004714:	f023 0303 	bic.w	r3, r3, #3
 8004718:	f043 0301 	orr.w	r3, r3, #1
 800471c:	81a3      	strh	r3, [r4, #12]
 800471e:	89a3      	ldrh	r3, [r4, #12]
 8004720:	431d      	orrs	r5, r3
 8004722:	81a5      	strh	r5, [r4, #12]
 8004724:	e7cf      	b.n	80046c6 <__smakebuf_r+0x18>
	...

08004728 <_fstat_r>:
 8004728:	b538      	push	{r3, r4, r5, lr}
 800472a:	2300      	movs	r3, #0
 800472c:	4d06      	ldr	r5, [pc, #24]	@ (8004748 <_fstat_r+0x20>)
 800472e:	4604      	mov	r4, r0
 8004730:	4608      	mov	r0, r1
 8004732:	4611      	mov	r1, r2
 8004734:	602b      	str	r3, [r5, #0]
 8004736:	f7fd fa40 	bl	8001bba <_fstat>
 800473a:	1c43      	adds	r3, r0, #1
 800473c:	d102      	bne.n	8004744 <_fstat_r+0x1c>
 800473e:	682b      	ldr	r3, [r5, #0]
 8004740:	b103      	cbz	r3, 8004744 <_fstat_r+0x1c>
 8004742:	6023      	str	r3, [r4, #0]
 8004744:	bd38      	pop	{r3, r4, r5, pc}
 8004746:	bf00      	nop
 8004748:	200002e4 	.word	0x200002e4

0800474c <_isatty_r>:
 800474c:	b538      	push	{r3, r4, r5, lr}
 800474e:	2300      	movs	r3, #0
 8004750:	4d05      	ldr	r5, [pc, #20]	@ (8004768 <_isatty_r+0x1c>)
 8004752:	4604      	mov	r4, r0
 8004754:	4608      	mov	r0, r1
 8004756:	602b      	str	r3, [r5, #0]
 8004758:	f7fd fa3e 	bl	8001bd8 <_isatty>
 800475c:	1c43      	adds	r3, r0, #1
 800475e:	d102      	bne.n	8004766 <_isatty_r+0x1a>
 8004760:	682b      	ldr	r3, [r5, #0]
 8004762:	b103      	cbz	r3, 8004766 <_isatty_r+0x1a>
 8004764:	6023      	str	r3, [r4, #0]
 8004766:	bd38      	pop	{r3, r4, r5, pc}
 8004768:	200002e4 	.word	0x200002e4

0800476c <_sbrk_r>:
 800476c:	b538      	push	{r3, r4, r5, lr}
 800476e:	2300      	movs	r3, #0
 8004770:	4d05      	ldr	r5, [pc, #20]	@ (8004788 <_sbrk_r+0x1c>)
 8004772:	4604      	mov	r4, r0
 8004774:	4608      	mov	r0, r1
 8004776:	602b      	str	r3, [r5, #0]
 8004778:	f7fd fa44 	bl	8001c04 <_sbrk>
 800477c:	1c43      	adds	r3, r0, #1
 800477e:	d102      	bne.n	8004786 <_sbrk_r+0x1a>
 8004780:	682b      	ldr	r3, [r5, #0]
 8004782:	b103      	cbz	r3, 8004786 <_sbrk_r+0x1a>
 8004784:	6023      	str	r3, [r4, #0]
 8004786:	bd38      	pop	{r3, r4, r5, pc}
 8004788:	200002e4 	.word	0x200002e4

0800478c <_init>:
 800478c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800478e:	bf00      	nop
 8004790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004792:	bc08      	pop	{r3}
 8004794:	469e      	mov	lr, r3
 8004796:	4770      	bx	lr

08004798 <_fini>:
 8004798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479a:	bf00      	nop
 800479c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800479e:	bc08      	pop	{r3}
 80047a0:	469e      	mov	lr, r3
 80047a2:	4770      	bx	lr
