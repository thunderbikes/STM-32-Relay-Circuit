
MOSFET Control3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003820  08000184  08000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080039a4  080039a4  000049a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a24  08003a24  0000506c  2**0
                  CONTENTS
  4 .ARM          00000008  08003a24  08003a24  00004a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a2c  08003a2c  0000506c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a2c  08003a2c  00004a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a30  08003a30  00004a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08003a34  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  2000006c  08003aa0  0000506c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08003aa0  0000533c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ddcb  00000000  00000000  00005095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002233  00000000  00000000  00012e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec8  00000000  00000000  00015098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b7e  00000000  00000000  00015f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001faa2  00000000  00000000  00016ade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc6e  00000000  00000000  00036580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0952  00000000  00000000  000461ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00106b40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004518  00000000  00000000  00106b84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  0010b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	@ (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000006c 	.word	0x2000006c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	0800398c 	.word	0x0800398c

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	@ (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000070 	.word	0x20000070
 80001c0:	0800398c 	.word	0x0800398c

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b968 	b.w	80004ac <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9d08      	ldr	r5, [sp, #32]
 80001fa:	460c      	mov	r4, r1
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d14e      	bne.n	800029e <__udivmoddi4+0xaa>
 8000200:	4694      	mov	ip, r2
 8000202:	458c      	cmp	ip, r1
 8000204:	4686      	mov	lr, r0
 8000206:	fab2 f282 	clz	r2, r2
 800020a:	d962      	bls.n	80002d2 <__udivmoddi4+0xde>
 800020c:	b14a      	cbz	r2, 8000222 <__udivmoddi4+0x2e>
 800020e:	f1c2 0320 	rsb	r3, r2, #32
 8000212:	4091      	lsls	r1, r2
 8000214:	fa20 f303 	lsr.w	r3, r0, r3
 8000218:	fa0c fc02 	lsl.w	ip, ip, r2
 800021c:	4319      	orrs	r1, r3
 800021e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000222:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000226:	fbb1 f4f7 	udiv	r4, r1, r7
 800022a:	fb07 1114 	mls	r1, r7, r4, r1
 800022e:	fa1f f68c 	uxth.w	r6, ip
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023a:	fb04 f106 	mul.w	r1, r4, r6
 800023e:	4299      	cmp	r1, r3
 8000240:	d90a      	bls.n	8000258 <__udivmoddi4+0x64>
 8000242:	eb1c 0303 	adds.w	r3, ip, r3
 8000246:	f104 30ff 	add.w	r0, r4, #4294967295
 800024a:	f080 8110 	bcs.w	800046e <__udivmoddi4+0x27a>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 810d 	bls.w	800046e <__udivmoddi4+0x27a>
 8000254:	3c02      	subs	r4, #2
 8000256:	4463      	add	r3, ip
 8000258:	1a59      	subs	r1, r3, r1
 800025a:	fbb1 f0f7 	udiv	r0, r1, r7
 800025e:	fb07 1110 	mls	r1, r7, r0, r1
 8000262:	fb00 f606 	mul.w	r6, r0, r6
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	429e      	cmp	r6, r3
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x94>
 8000272:	eb1c 0303 	adds.w	r3, ip, r3
 8000276:	f100 31ff 	add.w	r1, r0, #4294967295
 800027a:	f080 80fa 	bcs.w	8000472 <__udivmoddi4+0x27e>
 800027e:	429e      	cmp	r6, r3
 8000280:	f240 80f7 	bls.w	8000472 <__udivmoddi4+0x27e>
 8000284:	4463      	add	r3, ip
 8000286:	3802      	subs	r0, #2
 8000288:	2100      	movs	r1, #0
 800028a:	1b9b      	subs	r3, r3, r6
 800028c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa6>
 8000292:	40d3      	lsrs	r3, r2
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xba>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb4>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa6>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x150>
 80002b6:	42a3      	cmp	r3, r4
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xcc>
 80002ba:	4290      	cmp	r0, r2
 80002bc:	f0c0 80ee 	bcc.w	800049c <__udivmoddi4+0x2a8>
 80002c0:	1a86      	subs	r6, r0, r2
 80002c2:	eb64 0303 	sbc.w	r3, r4, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	d0e6      	beq.n	800029a <__udivmoddi4+0xa6>
 80002cc:	e9c5 6300 	strd	r6, r3, [r5]
 80002d0:	e7e3      	b.n	800029a <__udivmoddi4+0xa6>
 80002d2:	2a00      	cmp	r2, #0
 80002d4:	f040 808f 	bne.w	80003f6 <__udivmoddi4+0x202>
 80002d8:	eba1 040c 	sub.w	r4, r1, ip
 80002dc:	2101      	movs	r1, #1
 80002de:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e2:	fa1f f78c 	uxth.w	r7, ip
 80002e6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ea:	fb08 4416 	mls	r4, r8, r6, r4
 80002ee:	fb07 f006 	mul.w	r0, r7, r6
 80002f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	4298      	cmp	r0, r3
 80002fc:	d908      	bls.n	8000310 <__udivmoddi4+0x11c>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 34ff 	add.w	r4, r6, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x11a>
 8000308:	4298      	cmp	r0, r3
 800030a:	f200 80cb 	bhi.w	80004a4 <__udivmoddi4+0x2b0>
 800030e:	4626      	mov	r6, r4
 8000310:	1a1c      	subs	r4, r3, r0
 8000312:	fbb4 f0f8 	udiv	r0, r4, r8
 8000316:	fb08 4410 	mls	r4, r8, r0, r4
 800031a:	fb00 f707 	mul.w	r7, r0, r7
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	429f      	cmp	r7, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x148>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x146>
 8000334:	429f      	cmp	r7, r3
 8000336:	f200 80ae 	bhi.w	8000496 <__udivmoddi4+0x2a2>
 800033a:	4620      	mov	r0, r4
 800033c:	1bdb      	subs	r3, r3, r7
 800033e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x9c>
 8000344:	f1c1 0720 	rsb	r7, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 fc07 	lsr.w	ip, r2, r7
 800034e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000352:	fa24 f607 	lsr.w	r6, r4, r7
 8000356:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800035a:	fbb6 f8f9 	udiv	r8, r6, r9
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	fb09 6618 	mls	r6, r9, r8, r6
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	408c      	lsls	r4, r1
 800036c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000370:	fb08 f00e 	mul.w	r0, r8, lr
 8000374:	431c      	orrs	r4, r3
 8000376:	0c23      	lsrs	r3, r4, #16
 8000378:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800037c:	4298      	cmp	r0, r3
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x1a6>
 8000384:	eb1c 0303 	adds.w	r3, ip, r3
 8000388:	f108 36ff 	add.w	r6, r8, #4294967295
 800038c:	f080 8081 	bcs.w	8000492 <__udivmoddi4+0x29e>
 8000390:	4298      	cmp	r0, r3
 8000392:	d97e      	bls.n	8000492 <__udivmoddi4+0x29e>
 8000394:	f1a8 0802 	sub.w	r8, r8, #2
 8000398:	4463      	add	r3, ip
 800039a:	1a1e      	subs	r6, r3, r0
 800039c:	fbb6 f3f9 	udiv	r3, r6, r9
 80003a0:	fb09 6613 	mls	r6, r9, r3, r6
 80003a4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003a8:	b2a4      	uxth	r4, r4
 80003aa:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x1d0>
 80003b2:	eb1c 0404 	adds.w	r4, ip, r4
 80003b6:	f103 30ff 	add.w	r0, r3, #4294967295
 80003ba:	d266      	bcs.n	800048a <__udivmoddi4+0x296>
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d964      	bls.n	800048a <__udivmoddi4+0x296>
 80003c0:	3b02      	subs	r3, #2
 80003c2:	4464      	add	r4, ip
 80003c4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003c8:	fba0 8302 	umull	r8, r3, r0, r2
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	429c      	cmp	r4, r3
 80003d2:	46c6      	mov	lr, r8
 80003d4:	461e      	mov	r6, r3
 80003d6:	d350      	bcc.n	800047a <__udivmoddi4+0x286>
 80003d8:	d04d      	beq.n	8000476 <__udivmoddi4+0x282>
 80003da:	b155      	cbz	r5, 80003f2 <__udivmoddi4+0x1fe>
 80003dc:	ebba 030e 	subs.w	r3, sl, lr
 80003e0:	eb64 0406 	sbc.w	r4, r4, r6
 80003e4:	fa04 f707 	lsl.w	r7, r4, r7
 80003e8:	40cb      	lsrs	r3, r1
 80003ea:	431f      	orrs	r7, r3
 80003ec:	40cc      	lsrs	r4, r1
 80003ee:	e9c5 7400 	strd	r7, r4, [r5]
 80003f2:	2100      	movs	r1, #0
 80003f4:	e751      	b.n	800029a <__udivmoddi4+0xa6>
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	40d9      	lsrs	r1, r3
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	fa20 f303 	lsr.w	r3, r0, r3
 8000408:	fa00 fe02 	lsl.w	lr, r0, r2
 800040c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000410:	fb08 1110 	mls	r1, r8, r0, r1
 8000414:	4094      	lsls	r4, r2
 8000416:	431c      	orrs	r4, r3
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	0c23      	lsrs	r3, r4, #16
 800041e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000422:	fb00 f107 	mul.w	r1, r0, r7
 8000426:	4299      	cmp	r1, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x248>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000432:	d22c      	bcs.n	800048e <__udivmoddi4+0x29a>
 8000434:	4299      	cmp	r1, r3
 8000436:	d92a      	bls.n	800048e <__udivmoddi4+0x29a>
 8000438:	3802      	subs	r0, #2
 800043a:	4463      	add	r3, ip
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	fbb3 f1f8 	udiv	r1, r3, r8
 8000442:	fb08 3311 	mls	r3, r8, r1, r3
 8000446:	b2a4      	uxth	r4, r4
 8000448:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800044c:	fb01 f307 	mul.w	r3, r1, r7
 8000450:	42a3      	cmp	r3, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x272>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f101 36ff 	add.w	r6, r1, #4294967295
 800045c:	d213      	bcs.n	8000486 <__udivmoddi4+0x292>
 800045e:	42a3      	cmp	r3, r4
 8000460:	d911      	bls.n	8000486 <__udivmoddi4+0x292>
 8000462:	3902      	subs	r1, #2
 8000464:	4464      	add	r4, ip
 8000466:	1ae4      	subs	r4, r4, r3
 8000468:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800046c:	e73b      	b.n	80002e6 <__udivmoddi4+0xf2>
 800046e:	4604      	mov	r4, r0
 8000470:	e6f2      	b.n	8000258 <__udivmoddi4+0x64>
 8000472:	4608      	mov	r0, r1
 8000474:	e708      	b.n	8000288 <__udivmoddi4+0x94>
 8000476:	45c2      	cmp	sl, r8
 8000478:	d2af      	bcs.n	80003da <__udivmoddi4+0x1e6>
 800047a:	ebb8 0e02 	subs.w	lr, r8, r2
 800047e:	eb63 060c 	sbc.w	r6, r3, ip
 8000482:	3801      	subs	r0, #1
 8000484:	e7a9      	b.n	80003da <__udivmoddi4+0x1e6>
 8000486:	4631      	mov	r1, r6
 8000488:	e7ed      	b.n	8000466 <__udivmoddi4+0x272>
 800048a:	4603      	mov	r3, r0
 800048c:	e79a      	b.n	80003c4 <__udivmoddi4+0x1d0>
 800048e:	4630      	mov	r0, r6
 8000490:	e7d4      	b.n	800043c <__udivmoddi4+0x248>
 8000492:	46b0      	mov	r8, r6
 8000494:	e781      	b.n	800039a <__udivmoddi4+0x1a6>
 8000496:	4463      	add	r3, ip
 8000498:	3802      	subs	r0, #2
 800049a:	e74f      	b.n	800033c <__udivmoddi4+0x148>
 800049c:	4606      	mov	r6, r0
 800049e:	4623      	mov	r3, r4
 80004a0:	4608      	mov	r0, r1
 80004a2:	e711      	b.n	80002c8 <__udivmoddi4+0xd4>
 80004a4:	3e02      	subs	r6, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	e732      	b.n	8000310 <__udivmoddi4+0x11c>
 80004aa:	bf00      	nop

080004ac <__aeabi_idiv0>:
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop

080004b0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004b8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004bc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80004c0:	f003 0301 	and.w	r3, r3, #1
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d013      	beq.n	80004f0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004c8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004cc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80004d0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d00b      	beq.n	80004f0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004d8:	e000      	b.n	80004dc <ITM_SendChar+0x2c>
    {
      __NOP();
 80004da:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80004dc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d0f9      	beq.n	80004da <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80004e6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004ea:	687a      	ldr	r2, [r7, #4]
 80004ec:	b2d2      	uxtb	r2, r2
 80004ee:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80004f0:	687b      	ldr	r3, [r7, #4]
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr

080004fc <allRelaysOpen>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void allRelaysOpen() {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HVC_POS_PORT, HVC_POS_Pin, GPIO_PIN_RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	2101      	movs	r1, #1
 8000504:	4814      	ldr	r0, [pc, #80]	@ (8000558 <allRelaysOpen+0x5c>)
 8000506:	f001 fcde 	bl	8001ec6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HVC_NEG_PORT, HVC_NEG_Pin, GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	2102      	movs	r1, #2
 800050e:	4812      	ldr	r0, [pc, #72]	@ (8000558 <allRelaysOpen+0x5c>)
 8000510:	f001 fcd9 	bl	8001ec6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CHARGE_NEG_PORT, CHARGE_NEG_Pin, GPIO_PIN_RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	2110      	movs	r1, #16
 8000518:	480f      	ldr	r0, [pc, #60]	@ (8000558 <allRelaysOpen+0x5c>)
 800051a:	f001 fcd4 	bl	8001ec6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CHARGE_POS_PORT, CHARGE_POS_Pin, GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	2108      	movs	r1, #8
 8000522:	480d      	ldr	r0, [pc, #52]	@ (8000558 <allRelaysOpen+0x5c>)
 8000524:	f001 fccf 	bl	8001ec6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PUMP_ENABLE_PORT, PUMP_ENABLE_Pin, GPIO_PIN_RESET);
 8000528:	2200      	movs	r2, #0
 800052a:	2180      	movs	r1, #128	@ 0x80
 800052c:	480a      	ldr	r0, [pc, #40]	@ (8000558 <allRelaysOpen+0x5c>)
 800052e:	f001 fcca 	bl	8001ec6 <HAL_GPIO_WritePin>

	HAL_Delay(1000);
 8000532:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000536:	f000 fe79 	bl	800122c <HAL_Delay>

	check_low(R1_AUX_PORT, R1_AUX_Pin);
 800053a:	2110      	movs	r1, #16
 800053c:	4807      	ldr	r0, [pc, #28]	@ (800055c <allRelaysOpen+0x60>)
 800053e:	f000 fb87 	bl	8000c50 <check_low>
	check_low(R2_AUX_PORT, R2_AUX_Pin);
 8000542:	2120      	movs	r1, #32
 8000544:	4805      	ldr	r0, [pc, #20]	@ (800055c <allRelaysOpen+0x60>)
 8000546:	f000 fb83 	bl	8000c50 <check_low>
	check_low(R3_AUX_PORT, R3_AUX_Pin);
 800054a:	2140      	movs	r1, #64	@ 0x40
 800054c:	4803      	ldr	r0, [pc, #12]	@ (800055c <allRelaysOpen+0x60>)
 800054e:	f000 fb7f 	bl	8000c50 <check_low>
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40020800 	.word	0x40020800
 800055c:	40020400 	.word	0x40020400

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000564:	f000 fdf4 	bl	8001150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000568:	f000 f824 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056c:	f000 f9c2 	bl	80008f4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000570:	f000 f924 	bl	80007bc <MX_TIM2_Init>
  MX_SPI1_Init();
 8000574:	f000 f8ec 	bl	8000750 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000578:	f000 f864 	bl	8000644 <MX_ADC1_Init>
  MX_TIM3_Init();
 800057c:	f000 f96c 	bl	8000858 <MX_TIM3_Init>
  MX_CAN1_Init();
 8000580:	f000 f8b2 	bl	80006e8 <MX_CAN1_Init>
	  if (Reading_Pin('c') == 1 && Reading_Pin('I') == 0 && operation == 0) {
	  		//make sure no accidental charging during operation ^^^-ray
	  		set_charging();
	  	}
	  	*/
	  HAL_GPIO_WritePin(BLINK_TEST_PORT, BLINK_TEST_Pin, GPIO_PIN_SET);
 8000584:	2201      	movs	r2, #1
 8000586:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800058a:	4809      	ldr	r0, [pc, #36]	@ (80005b0 <main+0x50>)
 800058c:	f001 fc9b 	bl	8001ec6 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000590:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000594:	f000 fe4a 	bl	800122c <HAL_Delay>
	  HAL_GPIO_WritePin(BLINK_TEST_PORT, BLINK_TEST_Pin, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800059e:	4804      	ldr	r0, [pc, #16]	@ (80005b0 <main+0x50>)
 80005a0:	f001 fc91 	bl	8001ec6 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80005a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005a8:	f000 fe40 	bl	800122c <HAL_Delay>
	  HAL_GPIO_WritePin(BLINK_TEST_PORT, BLINK_TEST_Pin, GPIO_PIN_SET);
 80005ac:	bf00      	nop
 80005ae:	e7e9      	b.n	8000584 <main+0x24>
 80005b0:	40020000 	.word	0x40020000

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b092      	sub	sp, #72	@ 0x48
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0318 	add.w	r3, r7, #24
 80005be:	2230      	movs	r2, #48	@ 0x30
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f002 ff34 	bl	8003430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
 80005d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d6:	2302      	movs	r3, #2
 80005d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005da:	2301      	movs	r3, #1
 80005dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005de:	2310      	movs	r3, #16
 80005e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e2:	2302      	movs	r3, #2
 80005e4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e6:	2300      	movs	r3, #0
 80005e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005ea:	2308      	movs	r3, #8
 80005ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005ee:	23c0      	movs	r3, #192	@ 0xc0
 80005f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005f2:	2304      	movs	r3, #4
 80005f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005f6:	2304      	movs	r3, #4
 80005f8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fa:	f107 0318 	add.w	r3, r7, #24
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 fc7a 	bl	8001ef8 <HAL_RCC_OscConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800060a:	f000 fb43 	bl	8000c94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060e:	230f      	movs	r3, #15
 8000610:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000612:	2302      	movs	r3, #2
 8000614:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800061a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800061e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000620:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000624:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	2103      	movs	r1, #3
 800062a:	4618      	mov	r0, r3
 800062c:	f001 feb8 	bl	80023a0 <HAL_RCC_ClockConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000636:	f000 fb2d 	bl	8000c94 <Error_Handler>
  }
}
 800063a:	bf00      	nop
 800063c:	3748      	adds	r7, #72	@ 0x48
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800064a:	463b      	mov	r3, r7
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000656:	4b21      	ldr	r3, [pc, #132]	@ (80006dc <MX_ADC1_Init+0x98>)
 8000658:	4a21      	ldr	r2, [pc, #132]	@ (80006e0 <MX_ADC1_Init+0x9c>)
 800065a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800065c:	4b1f      	ldr	r3, [pc, #124]	@ (80006dc <MX_ADC1_Init+0x98>)
 800065e:	2200      	movs	r2, #0
 8000660:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000662:	4b1e      	ldr	r3, [pc, #120]	@ (80006dc <MX_ADC1_Init+0x98>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000668:	4b1c      	ldr	r3, [pc, #112]	@ (80006dc <MX_ADC1_Init+0x98>)
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800066e:	4b1b      	ldr	r3, [pc, #108]	@ (80006dc <MX_ADC1_Init+0x98>)
 8000670:	2200      	movs	r2, #0
 8000672:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000674:	4b19      	ldr	r3, [pc, #100]	@ (80006dc <MX_ADC1_Init+0x98>)
 8000676:	2200      	movs	r2, #0
 8000678:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800067c:	4b17      	ldr	r3, [pc, #92]	@ (80006dc <MX_ADC1_Init+0x98>)
 800067e:	2200      	movs	r2, #0
 8000680:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000682:	4b16      	ldr	r3, [pc, #88]	@ (80006dc <MX_ADC1_Init+0x98>)
 8000684:	4a17      	ldr	r2, [pc, #92]	@ (80006e4 <MX_ADC1_Init+0xa0>)
 8000686:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000688:	4b14      	ldr	r3, [pc, #80]	@ (80006dc <MX_ADC1_Init+0x98>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800068e:	4b13      	ldr	r3, [pc, #76]	@ (80006dc <MX_ADC1_Init+0x98>)
 8000690:	2201      	movs	r2, #1
 8000692:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000694:	4b11      	ldr	r3, [pc, #68]	@ (80006dc <MX_ADC1_Init+0x98>)
 8000696:	2200      	movs	r2, #0
 8000698:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800069c:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <MX_ADC1_Init+0x98>)
 800069e:	2201      	movs	r2, #1
 80006a0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006a2:	480e      	ldr	r0, [pc, #56]	@ (80006dc <MX_ADC1_Init+0x98>)
 80006a4:	f000 fde6 	bl	8001274 <HAL_ADC_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006ae:	f000 faf1 	bl	8000c94 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006b6:	2301      	movs	r3, #1
 80006b8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006be:	463b      	mov	r3, r7
 80006c0:	4619      	mov	r1, r3
 80006c2:	4806      	ldr	r0, [pc, #24]	@ (80006dc <MX_ADC1_Init+0x98>)
 80006c4:	f000 fe1a 	bl	80012fc <HAL_ADC_ConfigChannel>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006ce:	f000 fae1 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000090 	.word	0x20000090
 80006e0:	40012000 	.word	0x40012000
 80006e4:	0f000001 	.word	0x0f000001

080006e8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006ec:	4b16      	ldr	r3, [pc, #88]	@ (8000748 <MX_CAN1_Init+0x60>)
 80006ee:	4a17      	ldr	r2, [pc, #92]	@ (800074c <MX_CAN1_Init+0x64>)
 80006f0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80006f2:	4b15      	ldr	r3, [pc, #84]	@ (8000748 <MX_CAN1_Init+0x60>)
 80006f4:	2210      	movs	r2, #16
 80006f6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006f8:	4b13      	ldr	r3, [pc, #76]	@ (8000748 <MX_CAN1_Init+0x60>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006fe:	4b12      	ldr	r3, [pc, #72]	@ (8000748 <MX_CAN1_Init+0x60>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000704:	4b10      	ldr	r3, [pc, #64]	@ (8000748 <MX_CAN1_Init+0x60>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800070a:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <MX_CAN1_Init+0x60>)
 800070c:	2200      	movs	r2, #0
 800070e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000710:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <MX_CAN1_Init+0x60>)
 8000712:	2200      	movs	r2, #0
 8000714:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000716:	4b0c      	ldr	r3, [pc, #48]	@ (8000748 <MX_CAN1_Init+0x60>)
 8000718:	2200      	movs	r2, #0
 800071a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800071c:	4b0a      	ldr	r3, [pc, #40]	@ (8000748 <MX_CAN1_Init+0x60>)
 800071e:	2200      	movs	r2, #0
 8000720:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000722:	4b09      	ldr	r3, [pc, #36]	@ (8000748 <MX_CAN1_Init+0x60>)
 8000724:	2200      	movs	r2, #0
 8000726:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000728:	4b07      	ldr	r3, [pc, #28]	@ (8000748 <MX_CAN1_Init+0x60>)
 800072a:	2200      	movs	r2, #0
 800072c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800072e:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <MX_CAN1_Init+0x60>)
 8000730:	2200      	movs	r2, #0
 8000732:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000734:	4804      	ldr	r0, [pc, #16]	@ (8000748 <MX_CAN1_Init+0x60>)
 8000736:	f001 f807 	bl	8001748 <HAL_CAN_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000740:	f000 faa8 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	200000d8 	.word	0x200000d8
 800074c:	40006400 	.word	0x40006400

08000750 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000754:	4b17      	ldr	r3, [pc, #92]	@ (80007b4 <MX_SPI1_Init+0x64>)
 8000756:	4a18      	ldr	r2, [pc, #96]	@ (80007b8 <MX_SPI1_Init+0x68>)
 8000758:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800075a:	4b16      	ldr	r3, [pc, #88]	@ (80007b4 <MX_SPI1_Init+0x64>)
 800075c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000760:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000762:	4b14      	ldr	r3, [pc, #80]	@ (80007b4 <MX_SPI1_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000768:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <MX_SPI1_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800076e:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <MX_SPI1_Init+0x64>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000774:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <MX_SPI1_Init+0x64>)
 8000776:	2200      	movs	r2, #0
 8000778:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800077a:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <MX_SPI1_Init+0x64>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000780:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <MX_SPI1_Init+0x64>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000786:	4b0b      	ldr	r3, [pc, #44]	@ (80007b4 <MX_SPI1_Init+0x64>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800078c:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <MX_SPI1_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000792:	4b08      	ldr	r3, [pc, #32]	@ (80007b4 <MX_SPI1_Init+0x64>)
 8000794:	2200      	movs	r2, #0
 8000796:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000798:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <MX_SPI1_Init+0x64>)
 800079a:	220a      	movs	r2, #10
 800079c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <MX_SPI1_Init+0x64>)
 80007a0:	f001 ffb0 	bl	8002704 <HAL_SPI_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 80007aa:	f000 fa73 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000100 	.word	0x20000100
 80007b8:	40013000 	.word	0x40013000

080007bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c2:	f107 0308 	add.w	r3, r7, #8
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d0:	463b      	mov	r3, r7
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000854 <MX_TIM2_Init+0x98>)
 80007da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 959;
 80007e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000854 <MX_TIM2_Init+0x98>)
 80007e2:	f240 32bf 	movw	r2, #959	@ 0x3bf
 80007e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000854 <MX_TIM2_Init+0x98>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 80007ee:	4b19      	ldr	r3, [pc, #100]	@ (8000854 <MX_TIM2_Init+0x98>)
 80007f0:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80007f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f6:	4b17      	ldr	r3, [pc, #92]	@ (8000854 <MX_TIM2_Init+0x98>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007fc:	4b15      	ldr	r3, [pc, #84]	@ (8000854 <MX_TIM2_Init+0x98>)
 80007fe:	2280      	movs	r2, #128	@ 0x80
 8000800:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000802:	4814      	ldr	r0, [pc, #80]	@ (8000854 <MX_TIM2_Init+0x98>)
 8000804:	f002 f807 	bl	8002816 <HAL_TIM_Base_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800080e:	f000 fa41 	bl	8000c94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000812:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000816:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000818:	f107 0308 	add.w	r3, r7, #8
 800081c:	4619      	mov	r1, r3
 800081e:	480d      	ldr	r0, [pc, #52]	@ (8000854 <MX_TIM2_Init+0x98>)
 8000820:	f002 f950 	bl	8002ac4 <HAL_TIM_ConfigClockSource>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800082a:	f000 fa33 	bl	8000c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082e:	2300      	movs	r3, #0
 8000830:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000836:	463b      	mov	r3, r7
 8000838:	4619      	mov	r1, r3
 800083a:	4806      	ldr	r0, [pc, #24]	@ (8000854 <MX_TIM2_Init+0x98>)
 800083c:	f002 fb62 	bl	8002f04 <HAL_TIMEx_MasterConfigSynchronization>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000846:	f000 fa25 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	3718      	adds	r7, #24
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000158 	.word	0x20000158

08000858 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800086c:	463b      	mov	r3, r7
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000874:	4b1d      	ldr	r3, [pc, #116]	@ (80008ec <MX_TIM3_Init+0x94>)
 8000876:	4a1e      	ldr	r2, [pc, #120]	@ (80008f0 <MX_TIM3_Init+0x98>)
 8000878:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9599;
 800087a:	4b1c      	ldr	r3, [pc, #112]	@ (80008ec <MX_TIM3_Init+0x94>)
 800087c:	f242 527f 	movw	r2, #9599	@ 0x257f
 8000880:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000882:	4b1a      	ldr	r3, [pc, #104]	@ (80008ec <MX_TIM3_Init+0x94>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 8000888:	4b18      	ldr	r3, [pc, #96]	@ (80008ec <MX_TIM3_Init+0x94>)
 800088a:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 800088e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000890:	4b16      	ldr	r3, [pc, #88]	@ (80008ec <MX_TIM3_Init+0x94>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000896:	4b15      	ldr	r3, [pc, #84]	@ (80008ec <MX_TIM3_Init+0x94>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800089c:	4813      	ldr	r0, [pc, #76]	@ (80008ec <MX_TIM3_Init+0x94>)
 800089e:	f001 ffba 	bl	8002816 <HAL_TIM_Base_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80008a8:	f000 f9f4 	bl	8000c94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008b2:	f107 0308 	add.w	r3, r7, #8
 80008b6:	4619      	mov	r1, r3
 80008b8:	480c      	ldr	r0, [pc, #48]	@ (80008ec <MX_TIM3_Init+0x94>)
 80008ba:	f002 f903 	bl	8002ac4 <HAL_TIM_ConfigClockSource>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80008c4:	f000 f9e6 	bl	8000c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c8:	2300      	movs	r3, #0
 80008ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008d0:	463b      	mov	r3, r7
 80008d2:	4619      	mov	r1, r3
 80008d4:	4805      	ldr	r0, [pc, #20]	@ (80008ec <MX_TIM3_Init+0x94>)
 80008d6:	f002 fb15 	bl	8002f04 <HAL_TIMEx_MasterConfigSynchronization>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80008e0:	f000 f9d8 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	3718      	adds	r7, #24
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	200001a0 	.word	0x200001a0
 80008f0:	40000400 	.word	0x40000400

080008f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b088      	sub	sp, #32
 80008f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
 8000908:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	4b3d      	ldr	r3, [pc, #244]	@ (8000a04 <MX_GPIO_Init+0x110>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	4a3c      	ldr	r2, [pc, #240]	@ (8000a04 <MX_GPIO_Init+0x110>)
 8000914:	f043 0304 	orr.w	r3, r3, #4
 8000918:	6313      	str	r3, [r2, #48]	@ 0x30
 800091a:	4b3a      	ldr	r3, [pc, #232]	@ (8000a04 <MX_GPIO_Init+0x110>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	f003 0304 	and.w	r3, r3, #4
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	4b36      	ldr	r3, [pc, #216]	@ (8000a04 <MX_GPIO_Init+0x110>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	4a35      	ldr	r2, [pc, #212]	@ (8000a04 <MX_GPIO_Init+0x110>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6313      	str	r3, [r2, #48]	@ 0x30
 8000936:	4b33      	ldr	r3, [pc, #204]	@ (8000a04 <MX_GPIO_Init+0x110>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	4b2f      	ldr	r3, [pc, #188]	@ (8000a04 <MX_GPIO_Init+0x110>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	4a2e      	ldr	r2, [pc, #184]	@ (8000a04 <MX_GPIO_Init+0x110>)
 800094c:	f043 0302 	orr.w	r3, r3, #2
 8000950:	6313      	str	r3, [r2, #48]	@ 0x30
 8000952:	4b2c      	ldr	r3, [pc, #176]	@ (8000a04 <MX_GPIO_Init+0x110>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	f003 0302 	and.w	r3, r3, #2
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, HVC_POS_Pin|HVC_NEG_Pin|P_CHARGE_Pin|CHARGE_POS_Pin
 800095e:	2200      	movs	r2, #0
 8000960:	219f      	movs	r1, #159	@ 0x9f
 8000962:	4829      	ldr	r0, [pc, #164]	@ (8000a08 <MX_GPIO_Init+0x114>)
 8000964:	f001 faaf 	bl	8001ec6 <HAL_GPIO_WritePin>
                          |CHARGE_NEG_Pin|PUMP_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CTRL_OK_Pin|BLINK_TEST_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 800096e:	4827      	ldr	r0, [pc, #156]	@ (8000a0c <MX_GPIO_Init+0x118>)
 8000970:	f001 faa9 	bl	8001ec6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IMD_IO_L_Pin IGNITION_Pin CHARGE_ENABLE_Pin IMD_IO_H_Pin */
  GPIO_InitStruct.Pin = IMD_IO_L_Pin|IGNITION_Pin|CHARGE_ENABLE_Pin|IMD_IO_H_Pin;
 8000974:	f243 0360 	movw	r3, #12384	@ 0x3060
 8000978:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000982:	f107 030c 	add.w	r3, r7, #12
 8000986:	4619      	mov	r1, r3
 8000988:	481f      	ldr	r0, [pc, #124]	@ (8000a08 <MX_GPIO_Init+0x114>)
 800098a:	f001 f8e7 	bl	8001b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : HVC_POS_Pin HVC_NEG_Pin P_CHARGE_Pin CHARGE_POS_Pin
                           CHARGE_NEG_Pin PUMP_ENABLE_Pin */
  GPIO_InitStruct.Pin = HVC_POS_Pin|HVC_NEG_Pin|P_CHARGE_Pin|CHARGE_POS_Pin
 800098e:	239f      	movs	r3, #159	@ 0x9f
 8000990:	60fb      	str	r3, [r7, #12]
                          |CHARGE_NEG_Pin|PUMP_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	4619      	mov	r1, r3
 80009a4:	4818      	ldr	r0, [pc, #96]	@ (8000a08 <MX_GPIO_Init+0x114>)
 80009a6:	f001 f8d9 	bl	8001b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : BMS_INPUT1_Pin BMS_INPUT2_Pin BMS_INPUT3_Pin SHDWN_ST_Pin */
  GPIO_InitStruct.Pin = BMS_INPUT1_Pin|BMS_INPUT2_Pin|BMS_INPUT3_Pin|SHDWN_ST_Pin;
 80009aa:	f240 230e 	movw	r3, #526	@ 0x20e
 80009ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b0:	2300      	movs	r3, #0
 80009b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	4619      	mov	r1, r3
 80009be:	4813      	ldr	r0, [pc, #76]	@ (8000a0c <MX_GPIO_Init+0x118>)
 80009c0:	f001 f8cc 	bl	8001b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : BMS_OK_L_Pin IMD_OK_L_Pin R1_AUX_Pin R2_AUX_Pin
                           R3_AUX_Pin R4_AUX_Pin */
  GPIO_InitStruct.Pin = BMS_OK_L_Pin|IMD_OK_L_Pin|R1_AUX_Pin|R2_AUX_Pin
 80009c4:	23f3      	movs	r3, #243	@ 0xf3
 80009c6:	60fb      	str	r3, [r7, #12]
                          |R3_AUX_Pin|R4_AUX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c8:	2300      	movs	r3, #0
 80009ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	4619      	mov	r1, r3
 80009d6:	480e      	ldr	r0, [pc, #56]	@ (8000a10 <MX_GPIO_Init+0x11c>)
 80009d8:	f001 f8c0 	bl	8001b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : CTRL_OK_Pin BLINK_TEST_Pin */
  GPIO_InitStruct.Pin = CTRL_OK_Pin|BLINK_TEST_Pin;
 80009dc:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80009e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 030c 	add.w	r3, r7, #12
 80009f2:	4619      	mov	r1, r3
 80009f4:	4805      	ldr	r0, [pc, #20]	@ (8000a0c <MX_GPIO_Init+0x118>)
 80009f6:	f001 f8b1 	bl	8001b5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009fa:	bf00      	nop
 80009fc:	3720      	adds	r7, #32
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020800 	.word	0x40020800
 8000a0c:	40020000 	.word	0x40020000
 8000a10:	40020400 	.word	0x40020400

08000a14 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
 8000a24:	e009      	b.n	8000a3a <_write+0x26>
		ITM_SendChar(*ptr++);
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	1c5a      	adds	r2, r3, #1
 8000a2a:	60ba      	str	r2, [r7, #8]
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff fd3e 	bl	80004b0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	3301      	adds	r3, #1
 8000a38:	617b      	str	r3, [r7, #20]
 8000a3a:	697a      	ldr	r2, [r7, #20]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	dbf1      	blt.n	8000a26 <_write+0x12>
	}
	return len;
 8000a42:	687b      	ldr	r3, [r7, #4]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
// Check if the interrupt comes from TIM2
	if(htim->Instance == TIM3){
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a73      	ldr	r2, [pc, #460]	@ (8000c28 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d102      	bne.n	8000a64 <HAL_TIM_PeriodElapsedCallback+0x18>
		can_voltage = 103.6; 	// MANUAL SET VOLTAGE
 8000a5e:	4b73      	ldr	r3, [pc, #460]	@ (8000c2c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000a60:	4a73      	ldr	r2, [pc, #460]	@ (8000c30 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000a62:	601a      	str	r2, [r3, #0]
		}
	if (htim->Instance == TIM2) {
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a6c:	f040 80d8 	bne.w	8000c20 <HAL_TIM_PeriodElapsedCallback+0x1d4>
		if (HAL_GPIO_ReadPin(SHDWN_ST_PORT, SHDWN_ST_Pin) == GPIO_PIN_SET) {
 8000a70:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a74:	486f      	ldr	r0, [pc, #444]	@ (8000c34 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000a76:	f001 fa0f 	bl	8001e98 <HAL_GPIO_ReadPin>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d102      	bne.n	8000a86 <HAL_TIM_PeriodElapsedCallback+0x3a>
			Status = SHUTDOWN;
 8000a80:	4b6d      	ldr	r3, [pc, #436]	@ (8000c38 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	701a      	strb	r2, [r3, #0]
		}

		switch (Status) {
 8000a86:	4b6c      	ldr	r3, [pc, #432]	@ (8000c38 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b06      	cmp	r3, #6
 8000a8c:	f200 80ba 	bhi.w	8000c04 <HAL_TIM_PeriodElapsedCallback+0x1b8>
 8000a90:	a201      	add	r2, pc, #4	@ (adr r2, 8000a98 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a96:	bf00      	nop
 8000a98:	08000ab5 	.word	0x08000ab5
 8000a9c:	08000ae9 	.word	0x08000ae9
 8000aa0:	08000b1f 	.word	0x08000b1f
 8000aa4:	08000b4d 	.word	0x08000b4d
 8000aa8:	08000b7b 	.word	0x08000b7b
 8000aac:	08000ba9 	.word	0x08000ba9
 8000ab0:	08000bd7 	.word	0x08000bd7
		case UPDATING:
			if (updating_start_tick == 0) { // Initialize start tick on first entry
 8000ab4:	4b61      	ldr	r3, [pc, #388]	@ (8000c3c <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d104      	bne.n	8000ac6 <HAL_TIM_PeriodElapsedCallback+0x7a>
				updating_start_tick = HAL_GetTick();
 8000abc:	f000 fbac 	bl	8001218 <HAL_GetTick>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	4a5e      	ldr	r2, [pc, #376]	@ (8000c3c <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000ac4:	6013      	str	r3, [r2, #0]
			}
				// Check if 30 seconds have elapsed
			if ((HAL_GetTick() - updating_start_tick) > 30000) {
 8000ac6:	f000 fba7 	bl	8001218 <HAL_GetTick>
 8000aca:	4602      	mov	r2, r0
 8000acc:	4b5b      	ldr	r3, [pc, #364]	@ (8000c3c <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	f240 8097 	bls.w	8000c0a <HAL_TIM_PeriodElapsedCallback+0x1be>
				updating_start_tick = 0;  // Reset for next use
 8000adc:	4b57      	ldr	r3, [pc, #348]	@ (8000c3c <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
				Error_Handler();
 8000ae2:	f000 f8d7 	bl	8000c94 <Error_Handler>
			}
			break;
 8000ae6:	e090      	b.n	8000c0a <HAL_TIM_PeriodElapsedCallback+0x1be>
		case SHUTDOWN:
			if (HAL_GPIO_ReadPin(IMD_OK_L_PORT, IMD_OK_L_Pin)
 8000ae8:	2102      	movs	r1, #2
 8000aea:	4855      	ldr	r0, [pc, #340]	@ (8000c40 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000aec:	f001 f9d4 	bl	8001e98 <HAL_GPIO_ReadPin>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d103      	bne.n	8000afe <HAL_TIM_PeriodElapsedCallback+0xb2>
					== GPIO_PIN_RESET) {
				printf("IMD NOT OK.\n");
 8000af6:	4853      	ldr	r0, [pc, #332]	@ (8000c44 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000af8:	f002 fbba 	bl	8003270 <puts>
 8000afc:	e00d      	b.n	8000b1a <HAL_TIM_PeriodElapsedCallback+0xce>
			} else if (HAL_GPIO_ReadPin(BMS_OK_L_PORT, BMS_OK_L_Pin)
 8000afe:	2101      	movs	r1, #1
 8000b00:	484f      	ldr	r0, [pc, #316]	@ (8000c40 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000b02:	f001 f9c9 	bl	8001e98 <HAL_GPIO_ReadPin>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d103      	bne.n	8000b14 <HAL_TIM_PeriodElapsedCallback+0xc8>
					== GPIO_PIN_RESET) {
				printf("BMS NOT OK.\n");
 8000b0c:	484e      	ldr	r0, [pc, #312]	@ (8000c48 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000b0e:	f002 fbaf 	bl	8003270 <puts>
 8000b12:	e002      	b.n	8000b1a <HAL_TIM_PeriodElapsedCallback+0xce>
			} else {
				printf("Cause of shutdown is unknown.\n");
 8000b14:	484d      	ldr	r0, [pc, #308]	@ (8000c4c <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000b16:	f002 fbab 	bl	8003270 <puts>
			}
			Error_Handler();
 8000b1a:	f000 f8bb 	bl	8000c94 <Error_Handler>
		case STANDBY:
			//i forgot which AUX pins we need to check for standby -ray
			if (HAL_GPIO_ReadPin(R1_AUX_PORT, R1_AUX_Pin) == GPIO_PIN_RESET) { //please double check all AUX pins -ray
 8000b1e:	2110      	movs	r1, #16
 8000b20:	4847      	ldr	r0, [pc, #284]	@ (8000c40 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000b22:	f001 f9b9 	bl	8001e98 <HAL_GPIO_ReadPin>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d10d      	bne.n	8000b48 <HAL_TIM_PeriodElapsedCallback+0xfc>
				if (HAL_GPIO_ReadPin(R2_AUX_PORT, R2_AUX_Pin)
 8000b2c:	2120      	movs	r1, #32
 8000b2e:	4844      	ldr	r0, [pc, #272]	@ (8000c40 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000b30:	f001 f9b2 	bl	8001e98 <HAL_GPIO_ReadPin>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d106      	bne.n	8000b48 <HAL_TIM_PeriodElapsedCallback+0xfc>
						== GPIO_PIN_RESET) { //also 3 if statements seems a bit more readable
					if (HAL_GPIO_ReadPin(R3_AUX_PORT, R3_AUX_Pin)
 8000b3a:	2140      	movs	r1, #64	@ 0x40
 8000b3c:	4840      	ldr	r0, [pc, #256]	@ (8000c40 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000b3e:	f001 f9ab 	bl	8001e98 <HAL_GPIO_ReadPin>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d062      	beq.n	8000c0e <HAL_TIM_PeriodElapsedCallback+0x1c2>
							== GPIO_PIN_RESET) {
						break;
					}
				}
			}
			Error_Handler();
 8000b48:	f000 f8a4 	bl	8000c94 <Error_Handler>
		case CHARGING:
			//i dont know which AUX pins we need to check for charging -ray
			if (HAL_GPIO_ReadPin(R1_AUX_PORT, R1_AUX_Pin) == GPIO_PIN_RESET) { //please double check all AUX pins -ray
 8000b4c:	2110      	movs	r1, #16
 8000b4e:	483c      	ldr	r0, [pc, #240]	@ (8000c40 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000b50:	f001 f9a2 	bl	8001e98 <HAL_GPIO_ReadPin>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d10d      	bne.n	8000b76 <HAL_TIM_PeriodElapsedCallback+0x12a>
				if (HAL_GPIO_ReadPin(R2_AUX_PORT, R2_AUX_Pin)
 8000b5a:	2120      	movs	r1, #32
 8000b5c:	4838      	ldr	r0, [pc, #224]	@ (8000c40 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000b5e:	f001 f99b 	bl	8001e98 <HAL_GPIO_ReadPin>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d106      	bne.n	8000b76 <HAL_TIM_PeriodElapsedCallback+0x12a>
						== GPIO_PIN_RESET) { //also 3 if statements seems a bit more readable
					if (HAL_GPIO_ReadPin(R3_AUX_PORT, R3_AUX_Pin)
 8000b68:	2140      	movs	r1, #64	@ 0x40
 8000b6a:	4835      	ldr	r0, [pc, #212]	@ (8000c40 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000b6c:	f001 f994 	bl	8001e98 <HAL_GPIO_ReadPin>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d04d      	beq.n	8000c12 <HAL_TIM_PeriodElapsedCallback+0x1c6>
							== GPIO_PIN_RESET) {
						break;
					}
				}
			}
			Error_Handler();
 8000b76:	f000 f88d 	bl	8000c94 <Error_Handler>
		case PRECHARGE:
			if (HAL_GPIO_ReadPin(R1_AUX_PORT, R1_AUX_Pin) == GPIO_PIN_RESET) { //please double check all AUX pins -ray
 8000b7a:	2110      	movs	r1, #16
 8000b7c:	4830      	ldr	r0, [pc, #192]	@ (8000c40 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000b7e:	f001 f98b 	bl	8001e98 <HAL_GPIO_ReadPin>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d10d      	bne.n	8000ba4 <HAL_TIM_PeriodElapsedCallback+0x158>
				if (HAL_GPIO_ReadPin(R2_AUX_PORT, R2_AUX_Pin) == GPIO_PIN_SET) { //also 3 if statements seems a bit more readable
 8000b88:	2120      	movs	r1, #32
 8000b8a:	482d      	ldr	r0, [pc, #180]	@ (8000c40 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000b8c:	f001 f984 	bl	8001e98 <HAL_GPIO_ReadPin>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d106      	bne.n	8000ba4 <HAL_TIM_PeriodElapsedCallback+0x158>
					if (HAL_GPIO_ReadPin(R3_AUX_PORT, R3_AUX_Pin)
 8000b96:	2140      	movs	r1, #64	@ 0x40
 8000b98:	4829      	ldr	r0, [pc, #164]	@ (8000c40 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000b9a:	f001 f97d 	bl	8001e98 <HAL_GPIO_ReadPin>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d038      	beq.n	8000c16 <HAL_TIM_PeriodElapsedCallback+0x1ca>
							== GPIO_PIN_SET) {
						break;
					}
				}
			}
			Error_Handler();
 8000ba4:	f000 f876 	bl	8000c94 <Error_Handler>
		case OPERATION:
			if (HAL_GPIO_ReadPin(R1_AUX_PORT, R1_AUX_Pin) == GPIO_PIN_SET) {
 8000ba8:	2110      	movs	r1, #16
 8000baa:	4825      	ldr	r0, [pc, #148]	@ (8000c40 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000bac:	f001 f974 	bl	8001e98 <HAL_GPIO_ReadPin>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d10d      	bne.n	8000bd2 <HAL_TIM_PeriodElapsedCallback+0x186>
				if (HAL_GPIO_ReadPin(R2_AUX_PORT, R2_AUX_Pin) == GPIO_PIN_SET) {
 8000bb6:	2120      	movs	r1, #32
 8000bb8:	4821      	ldr	r0, [pc, #132]	@ (8000c40 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000bba:	f001 f96d 	bl	8001e98 <HAL_GPIO_ReadPin>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d106      	bne.n	8000bd2 <HAL_TIM_PeriodElapsedCallback+0x186>
					if (HAL_GPIO_ReadPin(R3_AUX_PORT, R3_AUX_Pin)
 8000bc4:	2140      	movs	r1, #64	@ 0x40
 8000bc6:	481e      	ldr	r0, [pc, #120]	@ (8000c40 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000bc8:	f001 f966 	bl	8001e98 <HAL_GPIO_ReadPin>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d023      	beq.n	8000c1a <HAL_TIM_PeriodElapsedCallback+0x1ce>
							== GPIO_PIN_RESET) {
						break;
					}
				}
			}
			Error_Handler();
 8000bd2:	f000 f85f 	bl	8000c94 <Error_Handler>
		case DISCHARGE:
			if (HAL_GPIO_ReadPin(R1_AUX_PORT, R1_AUX_Pin) == GPIO_PIN_RESET) {
 8000bd6:	2110      	movs	r1, #16
 8000bd8:	4819      	ldr	r0, [pc, #100]	@ (8000c40 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000bda:	f001 f95d 	bl	8001e98 <HAL_GPIO_ReadPin>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d10d      	bne.n	8000c00 <HAL_TIM_PeriodElapsedCallback+0x1b4>
				if (HAL_GPIO_ReadPin(R2_AUX_PORT, R3_AUX_Pin)
 8000be4:	2140      	movs	r1, #64	@ 0x40
 8000be6:	4816      	ldr	r0, [pc, #88]	@ (8000c40 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000be8:	f001 f956 	bl	8001e98 <HAL_GPIO_ReadPin>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d106      	bne.n	8000c00 <HAL_TIM_PeriodElapsedCallback+0x1b4>
						== GPIO_PIN_RESET) {
					if (HAL_GPIO_ReadPin(R3_AUX_PORT, R3_AUX_Pin)
 8000bf2:	2140      	movs	r1, #64	@ 0x40
 8000bf4:	4812      	ldr	r0, [pc, #72]	@ (8000c40 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000bf6:	f001 f94f 	bl	8001e98 <HAL_GPIO_ReadPin>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d00e      	beq.n	8000c1e <HAL_TIM_PeriodElapsedCallback+0x1d2>
							== GPIO_PIN_RESET) {
						break;
					}
				}
			}
			Error_Handler();
 8000c00:	f000 f848 	bl	8000c94 <Error_Handler>
		default:
			Error_Handler();
 8000c04:	f000 f846 	bl	8000c94 <Error_Handler>
		}
	}
}
 8000c08:	e00a      	b.n	8000c20 <HAL_TIM_PeriodElapsedCallback+0x1d4>
			break;
 8000c0a:	bf00      	nop
 8000c0c:	e008      	b.n	8000c20 <HAL_TIM_PeriodElapsedCallback+0x1d4>
						break;
 8000c0e:	bf00      	nop
 8000c10:	e006      	b.n	8000c20 <HAL_TIM_PeriodElapsedCallback+0x1d4>
						break;
 8000c12:	bf00      	nop
 8000c14:	e004      	b.n	8000c20 <HAL_TIM_PeriodElapsedCallback+0x1d4>
						break;
 8000c16:	bf00      	nop
 8000c18:	e002      	b.n	8000c20 <HAL_TIM_PeriodElapsedCallback+0x1d4>
						break;
 8000c1a:	bf00      	nop
 8000c1c:	e000      	b.n	8000c20 <HAL_TIM_PeriodElapsedCallback+0x1d4>
						break;
 8000c1e:	bf00      	nop
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40000400 	.word	0x40000400
 8000c2c:	20000088 	.word	0x20000088
 8000c30:	42cf3333 	.word	0x42cf3333
 8000c34:	40020000 	.word	0x40020000
 8000c38:	20000000 	.word	0x20000000
 8000c3c:	2000008c 	.word	0x2000008c
 8000c40:	40020400 	.word	0x40020400
 8000c44:	080039a4 	.word	0x080039a4
 8000c48:	080039b0 	.word	0x080039b0
 8000c4c:	080039bc 	.word	0x080039bc

08000c50 <check_low>:
		}
	}
	Error_Handler();
}

static inline void check_low(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	807b      	strh	r3, [r7, #2]
    for (int i = 0; i < 5; ++i) {
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	e00d      	b.n	8000c7e <check_low+0x2e>
        HAL_Delay(100);
 8000c62:	2064      	movs	r0, #100	@ 0x64
 8000c64:	f000 fae2 	bl	800122c <HAL_Delay>
        if (!HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)) {
 8000c68:	887b      	ldrh	r3, [r7, #2]
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f001 f913 	bl	8001e98 <HAL_GPIO_ReadPin>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d008      	beq.n	8000c8a <check_low+0x3a>
    for (int i = 0; i < 5; ++i) {
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	2b04      	cmp	r3, #4
 8000c82:	ddee      	ble.n	8000c62 <check_low+0x12>
            return;
        }
    }
    Error_Handler(); // Trigger error handler if the pin state is not low after retries
 8000c84:	f000 f806 	bl	8000c94 <Error_Handler>
 8000c88:	e000      	b.n	8000c8c <check_low+0x3c>
            return;
 8000c8a:	bf00      	nop
}
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c98:	b672      	cpsid	i
}
 8000c9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		allRelaysOpen();
 8000c9c:	f7ff fc2e 	bl	80004fc <allRelaysOpen>
		HAL_GPIO_WritePin(CTRL_OK_GPIO_Port, CTRL_OK_Pin, GPIO_PIN_RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ca6:	4803      	ldr	r0, [pc, #12]	@ (8000cb4 <Error_Handler+0x20>)
 8000ca8:	f001 f90d 	bl	8001ec6 <HAL_GPIO_WritePin>
		exit(0);
 8000cac:	2000      	movs	r0, #0
 8000cae:	f002 f9b5 	bl	800301c <exit>
 8000cb2:	bf00      	nop
 8000cb4:	40020000 	.word	0x40020000

08000cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d00 <HAL_MspInit+0x48>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc6:	4a0e      	ldr	r2, [pc, #56]	@ (8000d00 <HAL_MspInit+0x48>)
 8000cc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ccc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cce:	4b0c      	ldr	r3, [pc, #48]	@ (8000d00 <HAL_MspInit+0x48>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	603b      	str	r3, [r7, #0]
 8000cde:	4b08      	ldr	r3, [pc, #32]	@ (8000d00 <HAL_MspInit+0x48>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce2:	4a07      	ldr	r2, [pc, #28]	@ (8000d00 <HAL_MspInit+0x48>)
 8000ce4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ce8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cea:	4b05      	ldr	r3, [pc, #20]	@ (8000d00 <HAL_MspInit+0x48>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr
 8000d00:	40023800 	.word	0x40023800

08000d04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	@ 0x28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a17      	ldr	r2, [pc, #92]	@ (8000d80 <HAL_ADC_MspInit+0x7c>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d127      	bne.n	8000d76 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	4b16      	ldr	r3, [pc, #88]	@ (8000d84 <HAL_ADC_MspInit+0x80>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2e:	4a15      	ldr	r2, [pc, #84]	@ (8000d84 <HAL_ADC_MspInit+0x80>)
 8000d30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d36:	4b13      	ldr	r3, [pc, #76]	@ (8000d84 <HAL_ADC_MspInit+0x80>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	4b0f      	ldr	r3, [pc, #60]	@ (8000d84 <HAL_ADC_MspInit+0x80>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d84 <HAL_ADC_MspInit+0x80>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d52:	4b0c      	ldr	r3, [pc, #48]	@ (8000d84 <HAL_ADC_MspInit+0x80>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = HV_SENSE_Pin;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d62:	2303      	movs	r3, #3
 8000d64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(HV_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4805      	ldr	r0, [pc, #20]	@ (8000d88 <HAL_ADC_MspInit+0x84>)
 8000d72:	f000 fef3 	bl	8001b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d76:	bf00      	nop
 8000d78:	3728      	adds	r7, #40	@ 0x28
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40012000 	.word	0x40012000
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020000 	.word	0x40020000

08000d8c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	@ 0x28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a19      	ldr	r2, [pc, #100]	@ (8000e10 <HAL_CAN_MspInit+0x84>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d12c      	bne.n	8000e08 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	4b18      	ldr	r3, [pc, #96]	@ (8000e14 <HAL_CAN_MspInit+0x88>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db6:	4a17      	ldr	r2, [pc, #92]	@ (8000e14 <HAL_CAN_MspInit+0x88>)
 8000db8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dbe:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <HAL_CAN_MspInit+0x88>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <HAL_CAN_MspInit+0x88>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	4a10      	ldr	r2, [pc, #64]	@ (8000e14 <HAL_CAN_MspInit+0x88>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dda:	4b0e      	ldr	r3, [pc, #56]	@ (8000e14 <HAL_CAN_MspInit+0x88>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000de6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df4:	2303      	movs	r3, #3
 8000df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000df8:	2309      	movs	r3, #9
 8000dfa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	4619      	mov	r1, r3
 8000e02:	4805      	ldr	r0, [pc, #20]	@ (8000e18 <HAL_CAN_MspInit+0x8c>)
 8000e04:	f000 feaa 	bl	8001b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000e08:	bf00      	nop
 8000e0a:	3728      	adds	r7, #40	@ 0x28
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40006400 	.word	0x40006400
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40020000 	.word	0x40020000

08000e1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	@ 0x28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a19      	ldr	r2, [pc, #100]	@ (8000ea0 <HAL_SPI_MspInit+0x84>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d12b      	bne.n	8000e96 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	4b18      	ldr	r3, [pc, #96]	@ (8000ea4 <HAL_SPI_MspInit+0x88>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e46:	4a17      	ldr	r2, [pc, #92]	@ (8000ea4 <HAL_SPI_MspInit+0x88>)
 8000e48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ea4 <HAL_SPI_MspInit+0x88>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ea4 <HAL_SPI_MspInit+0x88>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	4a10      	ldr	r2, [pc, #64]	@ (8000ea4 <HAL_SPI_MspInit+0x88>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea4 <HAL_SPI_MspInit+0x88>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e76:	23f0      	movs	r3, #240	@ 0xf0
 8000e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e82:	2303      	movs	r3, #3
 8000e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e86:	2305      	movs	r3, #5
 8000e88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4805      	ldr	r0, [pc, #20]	@ (8000ea8 <HAL_SPI_MspInit+0x8c>)
 8000e92:	f000 fe63 	bl	8001b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e96:	bf00      	nop
 8000e98:	3728      	adds	r7, #40	@ 0x28
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40013000 	.word	0x40013000
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40020000 	.word	0x40020000

08000eac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ebc:	d116      	bne.n	8000eec <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f2c <HAL_TIM_Base_MspInit+0x80>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec6:	4a19      	ldr	r2, [pc, #100]	@ (8000f2c <HAL_TIM_Base_MspInit+0x80>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ece:	4b17      	ldr	r3, [pc, #92]	@ (8000f2c <HAL_TIM_Base_MspInit+0x80>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	201c      	movs	r0, #28
 8000ee0:	f000 fe05 	bl	8001aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ee4:	201c      	movs	r0, #28
 8000ee6:	f000 fe1e 	bl	8001b26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000eea:	e01a      	b.n	8000f22 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0f      	ldr	r2, [pc, #60]	@ (8000f30 <HAL_TIM_Base_MspInit+0x84>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d115      	bne.n	8000f22 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <HAL_TIM_Base_MspInit+0x80>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efe:	4a0b      	ldr	r2, [pc, #44]	@ (8000f2c <HAL_TIM_Base_MspInit+0x80>)
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f06:	4b09      	ldr	r3, [pc, #36]	@ (8000f2c <HAL_TIM_Base_MspInit+0x80>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	201d      	movs	r0, #29
 8000f18:	f000 fde9 	bl	8001aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f1c:	201d      	movs	r0, #29
 8000f1e:	f000 fe02 	bl	8001b26 <HAL_NVIC_EnableIRQ>
}
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40000400 	.word	0x40000400

08000f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <NMI_Handler+0x4>

08000f3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <HardFault_Handler+0x4>

08000f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <MemManage_Handler+0x4>

08000f4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <BusFault_Handler+0x4>

08000f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <UsageFault_Handler+0x4>

08000f5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr

08000f68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr

08000f74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr

08000f80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f84:	f000 f936 	bl	80011f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f90:	4802      	ldr	r0, [pc, #8]	@ (8000f9c <TIM2_IRQHandler+0x10>)
 8000f92:	f001 fc8f 	bl	80028b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000158 	.word	0x20000158

08000fa0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000fa4:	4802      	ldr	r0, [pc, #8]	@ (8000fb0 <TIM3_IRQHandler+0x10>)
 8000fa6:	f001 fc85 	bl	80028b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200001a0 	.word	0x200001a0

08000fb4 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000fbe:	f002 fa85 	bl	80034cc <__errno>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2216      	movs	r2, #22
 8000fc6:	601a      	str	r2, [r3, #0]
  return -1;
 8000fc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <_exit>:

void _exit (int status)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ffe7 	bl	8000fb4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000fe6:	bf00      	nop
 8000fe8:	e7fd      	b.n	8000fe6 <_exit+0x12>

08000fea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b086      	sub	sp, #24
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	60f8      	str	r0, [r7, #12]
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	e00a      	b.n	8001012 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ffc:	f3af 8000 	nop.w
 8001000:	4601      	mov	r1, r0
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	1c5a      	adds	r2, r3, #1
 8001006:	60ba      	str	r2, [r7, #8]
 8001008:	b2ca      	uxtb	r2, r1
 800100a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	3301      	adds	r3, #1
 8001010:	617b      	str	r3, [r7, #20]
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	429a      	cmp	r2, r3
 8001018:	dbf0      	blt.n	8000ffc <_read+0x12>
  }

  return len;
 800101a:	687b      	ldr	r3, [r7, #4]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800102c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr

0800103a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800103a:	b480      	push	{r7}
 800103c:	b083      	sub	sp, #12
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
 8001042:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800104a:	605a      	str	r2, [r3, #4]
  return 0;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr

08001058 <_isatty>:

int _isatty(int file)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001060:	2301      	movs	r3, #1
}
 8001062:	4618      	mov	r0, r3
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr

0800106c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800108c:	4a14      	ldr	r2, [pc, #80]	@ (80010e0 <_sbrk+0x5c>)
 800108e:	4b15      	ldr	r3, [pc, #84]	@ (80010e4 <_sbrk+0x60>)
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001098:	4b13      	ldr	r3, [pc, #76]	@ (80010e8 <_sbrk+0x64>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d102      	bne.n	80010a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010a0:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <_sbrk+0x64>)
 80010a2:	4a12      	ldr	r2, [pc, #72]	@ (80010ec <_sbrk+0x68>)
 80010a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010a6:	4b10      	ldr	r3, [pc, #64]	@ (80010e8 <_sbrk+0x64>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d207      	bcs.n	80010c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010b4:	f002 fa0a 	bl	80034cc <__errno>
 80010b8:	4603      	mov	r3, r0
 80010ba:	220c      	movs	r2, #12
 80010bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010be:	f04f 33ff 	mov.w	r3, #4294967295
 80010c2:	e009      	b.n	80010d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010c4:	4b08      	ldr	r3, [pc, #32]	@ (80010e8 <_sbrk+0x64>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ca:	4b07      	ldr	r3, [pc, #28]	@ (80010e8 <_sbrk+0x64>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	4a05      	ldr	r2, [pc, #20]	@ (80010e8 <_sbrk+0x64>)
 80010d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010d6:	68fb      	ldr	r3, [r7, #12]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	2000c000 	.word	0x2000c000
 80010e4:	00000400 	.word	0x00000400
 80010e8:	200001e8 	.word	0x200001e8
 80010ec:	20000340 	.word	0x20000340

080010f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr

080010fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001134 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8001100:	f7ff fff6 	bl	80010f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001104:	480c      	ldr	r0, [pc, #48]	@ (8001138 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001106:	490d      	ldr	r1, [pc, #52]	@ (800113c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001108:	4a0d      	ldr	r2, [pc, #52]	@ (8001140 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800110a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800110c:	e002      	b.n	8001114 <LoopCopyDataInit>

0800110e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800110e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001112:	3304      	adds	r3, #4

08001114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001118:	d3f9      	bcc.n	800110e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111a:	4a0a      	ldr	r2, [pc, #40]	@ (8001144 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800111c:	4c0a      	ldr	r4, [pc, #40]	@ (8001148 <LoopFillZerobss+0x22>)
  movs r3, #0
 800111e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001120:	e001      	b.n	8001126 <LoopFillZerobss>

08001122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001124:	3204      	adds	r2, #4

08001126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001128:	d3fb      	bcc.n	8001122 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800112a:	f002 f9d5 	bl	80034d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800112e:	f7ff fa17 	bl	8000560 <main>
  bx  lr    
 8001132:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001134:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800113c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001140:	08003a34 	.word	0x08003a34
  ldr r2, =_sbss
 8001144:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001148:	2000033c 	.word	0x2000033c

0800114c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800114c:	e7fe      	b.n	800114c <ADC_IRQHandler>
	...

08001150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001154:	4b0e      	ldr	r3, [pc, #56]	@ (8001190 <HAL_Init+0x40>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a0d      	ldr	r2, [pc, #52]	@ (8001190 <HAL_Init+0x40>)
 800115a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800115e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001160:	4b0b      	ldr	r3, [pc, #44]	@ (8001190 <HAL_Init+0x40>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a0a      	ldr	r2, [pc, #40]	@ (8001190 <HAL_Init+0x40>)
 8001166:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800116a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800116c:	4b08      	ldr	r3, [pc, #32]	@ (8001190 <HAL_Init+0x40>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a07      	ldr	r2, [pc, #28]	@ (8001190 <HAL_Init+0x40>)
 8001172:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001176:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001178:	2003      	movs	r0, #3
 800117a:	f000 fcad 	bl	8001ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800117e:	200f      	movs	r0, #15
 8001180:	f000 f808 	bl	8001194 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001184:	f7ff fd98 	bl	8000cb8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023c00 	.word	0x40023c00

08001194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800119c:	4b12      	ldr	r3, [pc, #72]	@ (80011e8 <HAL_InitTick+0x54>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b12      	ldr	r3, [pc, #72]	@ (80011ec <HAL_InitTick+0x58>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	4619      	mov	r1, r3
 80011a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 fcc5 	bl	8001b42 <HAL_SYSTICK_Config>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e00e      	b.n	80011e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b0f      	cmp	r3, #15
 80011c6:	d80a      	bhi.n	80011de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c8:	2200      	movs	r2, #0
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295
 80011d0:	f000 fc8d 	bl	8001aee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d4:	4a06      	ldr	r2, [pc, #24]	@ (80011f0 <HAL_InitTick+0x5c>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	e000      	b.n	80011e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000004 	.word	0x20000004
 80011ec:	2000000c 	.word	0x2000000c
 80011f0:	20000008 	.word	0x20000008

080011f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f8:	4b05      	ldr	r3, [pc, #20]	@ (8001210 <HAL_IncTick+0x1c>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b05      	ldr	r3, [pc, #20]	@ (8001214 <HAL_IncTick+0x20>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4413      	add	r3, r2
 8001204:	4a03      	ldr	r2, [pc, #12]	@ (8001214 <HAL_IncTick+0x20>)
 8001206:	6013      	str	r3, [r2, #0]
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	2000000c 	.word	0x2000000c
 8001214:	200001ec 	.word	0x200001ec

08001218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return uwTick;
 800121c:	4b02      	ldr	r3, [pc, #8]	@ (8001228 <HAL_GetTick+0x10>)
 800121e:	681b      	ldr	r3, [r3, #0]
}
 8001220:	4618      	mov	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	200001ec 	.word	0x200001ec

0800122c <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001234:	f7ff fff0 	bl	8001218 <HAL_GetTick>
 8001238:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001244:	d005      	beq.n	8001252 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001246:	4b0a      	ldr	r3, [pc, #40]	@ (8001270 <HAL_Delay+0x44>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4413      	add	r3, r2
 8001250:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001252:	bf00      	nop
 8001254:	f7ff ffe0 	bl	8001218 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	429a      	cmp	r2, r3
 8001262:	d8f7      	bhi.n	8001254 <HAL_Delay+0x28>
  {
  }
}
 8001264:	bf00      	nop
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	2000000c 	.word	0x2000000c

08001274 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800127c:	2300      	movs	r3, #0
 800127e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d101      	bne.n	800128a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e033      	b.n	80012f2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128e:	2b00      	cmp	r3, #0
 8001290:	d109      	bne.n	80012a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff fd36 	bl	8000d04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012aa:	f003 0310 	and.w	r3, r3, #16
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d118      	bne.n	80012e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80012ba:	f023 0302 	bic.w	r3, r3, #2
 80012be:	f043 0202 	orr.w	r2, r3, #2
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f000 f938 	bl	800153c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d6:	f023 0303 	bic.w	r3, r3, #3
 80012da:	f043 0201 	orr.w	r2, r3, #1
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80012e2:	e001      	b.n	80012e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001310:	2b01      	cmp	r3, #1
 8001312:	d101      	bne.n	8001318 <HAL_ADC_ConfigChannel+0x1c>
 8001314:	2302      	movs	r3, #2
 8001316:	e103      	b.n	8001520 <HAL_ADC_ConfigChannel+0x224>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2201      	movs	r2, #1
 800131c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b09      	cmp	r3, #9
 8001326:	d925      	bls.n	8001374 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	68d9      	ldr	r1, [r3, #12]
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	b29b      	uxth	r3, r3
 8001334:	461a      	mov	r2, r3
 8001336:	4613      	mov	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	4413      	add	r3, r2
 800133c:	3b1e      	subs	r3, #30
 800133e:	2207      	movs	r2, #7
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43da      	mvns	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	400a      	ands	r2, r1
 800134c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	68d9      	ldr	r1, [r3, #12]
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	b29b      	uxth	r3, r3
 800135e:	4618      	mov	r0, r3
 8001360:	4603      	mov	r3, r0
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	4403      	add	r3, r0
 8001366:	3b1e      	subs	r3, #30
 8001368:	409a      	lsls	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	430a      	orrs	r2, r1
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	e022      	b.n	80013ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6919      	ldr	r1, [r3, #16]
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	b29b      	uxth	r3, r3
 8001380:	461a      	mov	r2, r3
 8001382:	4613      	mov	r3, r2
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	4413      	add	r3, r2
 8001388:	2207      	movs	r2, #7
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43da      	mvns	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	400a      	ands	r2, r1
 8001396:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6919      	ldr	r1, [r3, #16]
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	4618      	mov	r0, r3
 80013aa:	4603      	mov	r3, r0
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	4403      	add	r3, r0
 80013b0:	409a      	lsls	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b06      	cmp	r3, #6
 80013c0:	d824      	bhi.n	800140c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	4613      	mov	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	3b05      	subs	r3, #5
 80013d4:	221f      	movs	r2, #31
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43da      	mvns	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	400a      	ands	r2, r1
 80013e2:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	4618      	mov	r0, r3
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685a      	ldr	r2, [r3, #4]
 80013f6:	4613      	mov	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	3b05      	subs	r3, #5
 80013fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	430a      	orrs	r2, r1
 8001408:	635a      	str	r2, [r3, #52]	@ 0x34
 800140a:	e04c      	b.n	80014a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b0c      	cmp	r3, #12
 8001412:	d824      	bhi.n	800145e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	4613      	mov	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4413      	add	r3, r2
 8001424:	3b23      	subs	r3, #35	@ 0x23
 8001426:	221f      	movs	r2, #31
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43da      	mvns	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	400a      	ands	r2, r1
 8001434:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	b29b      	uxth	r3, r3
 8001442:	4618      	mov	r0, r3
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	4613      	mov	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	3b23      	subs	r3, #35	@ 0x23
 8001450:	fa00 f203 	lsl.w	r2, r0, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	430a      	orrs	r2, r1
 800145a:	631a      	str	r2, [r3, #48]	@ 0x30
 800145c:	e023      	b.n	80014a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	3b41      	subs	r3, #65	@ 0x41
 8001470:	221f      	movs	r2, #31
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	400a      	ands	r2, r1
 800147e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	b29b      	uxth	r3, r3
 800148c:	4618      	mov	r0, r3
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	3b41      	subs	r3, #65	@ 0x41
 800149a:	fa00 f203 	lsl.w	r2, r0, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a20      	ldr	r2, [pc, #128]	@ (800152c <HAL_ADC_ConfigChannel+0x230>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d109      	bne.n	80014c4 <HAL_ADC_ConfigChannel+0x1c8>
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b12      	cmp	r3, #18
 80014b6:	d105      	bne.n	80014c4 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80014b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001530 <HAL_ADC_ConfigChannel+0x234>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	4a1c      	ldr	r2, [pc, #112]	@ (8001530 <HAL_ADC_ConfigChannel+0x234>)
 80014be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014c2:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a18      	ldr	r2, [pc, #96]	@ (800152c <HAL_ADC_ConfigChannel+0x230>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d123      	bne.n	8001516 <HAL_ADC_ConfigChannel+0x21a>
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b10      	cmp	r3, #16
 80014d4:	d003      	beq.n	80014de <HAL_ADC_ConfigChannel+0x1e2>
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b11      	cmp	r3, #17
 80014dc:	d11b      	bne.n	8001516 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80014de:	4b14      	ldr	r3, [pc, #80]	@ (8001530 <HAL_ADC_ConfigChannel+0x234>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	4a13      	ldr	r2, [pc, #76]	@ (8001530 <HAL_ADC_ConfigChannel+0x234>)
 80014e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80014e8:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2b10      	cmp	r3, #16
 80014f0:	d111      	bne.n	8001516 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014f2:	4b10      	ldr	r3, [pc, #64]	@ (8001534 <HAL_ADC_ConfigChannel+0x238>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a10      	ldr	r2, [pc, #64]	@ (8001538 <HAL_ADC_ConfigChannel+0x23c>)
 80014f8:	fba2 2303 	umull	r2, r3, r2, r3
 80014fc:	0c9a      	lsrs	r2, r3, #18
 80014fe:	4613      	mov	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8001508:	e002      	b.n	8001510 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	3b01      	subs	r3, #1
 800150e:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f9      	bne.n	800150a <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40012000 	.word	0x40012000
 8001530:	40012300 	.word	0x40012300
 8001534:	20000004 	.word	0x20000004
 8001538:	431bde83 	.word	0x431bde83

0800153c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001544:	4b7e      	ldr	r3, [pc, #504]	@ (8001740 <ADC_Init+0x204>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	4a7d      	ldr	r2, [pc, #500]	@ (8001740 <ADC_Init+0x204>)
 800154a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800154e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001550:	4b7b      	ldr	r3, [pc, #492]	@ (8001740 <ADC_Init+0x204>)
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	4979      	ldr	r1, [pc, #484]	@ (8001740 <ADC_Init+0x204>)
 800155a:	4313      	orrs	r3, r2
 800155c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800156c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6859      	ldr	r1, [r3, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	021a      	lsls	r2, r3, #8
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	430a      	orrs	r2, r1
 8001580:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001590:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6859      	ldr	r1, [r3, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	430a      	orrs	r2, r1
 80015a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6899      	ldr	r1, [r3, #8]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68da      	ldr	r2, [r3, #12]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ca:	4a5e      	ldr	r2, [pc, #376]	@ (8001744 <ADC_Init+0x208>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d022      	beq.n	8001616 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6899      	ldr	r1, [r3, #8]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	689a      	ldr	r2, [r3, #8]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001600:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6899      	ldr	r1, [r3, #8]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	430a      	orrs	r2, r1
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	e00f      	b.n	8001636 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001624:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001634:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 0202 	bic.w	r2, r2, #2
 8001644:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6899      	ldr	r1, [r3, #8]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	7e1b      	ldrb	r3, [r3, #24]
 8001650:	005a      	lsls	r2, r3, #1
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	430a      	orrs	r2, r1
 8001658:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d027      	beq.n	80016b4 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001672:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001682:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001688:	3b01      	subs	r3, #1
 800168a:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 800168e:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001690:	68fa      	ldr	r2, [r7, #12]
 8001692:	fa92 f2a2 	rbit	r2, r2
 8001696:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001698:	68ba      	ldr	r2, [r7, #8]
 800169a:	fab2 f282 	clz	r2, r2
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	fa03 f102 	lsl.w	r1, r3, r2
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	e007      	b.n	80016c4 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80016d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	3b01      	subs	r3, #1
 80016e0:	051a      	lsls	r2, r3, #20
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80016f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6899      	ldr	r1, [r3, #8]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001706:	025a      	lsls	r2, r3, #9
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	430a      	orrs	r2, r1
 800170e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800171e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6899      	ldr	r1, [r3, #8]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	029a      	lsls	r2, r3, #10
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	430a      	orrs	r2, r1
 8001732:	609a      	str	r2, [r3, #8]
}
 8001734:	bf00      	nop
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	40012300 	.word	0x40012300
 8001744:	0f000001 	.word	0x0f000001

08001748 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e0ed      	b.n	8001936 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d102      	bne.n	800176c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff fb10 	bl	8000d8c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0201 	orr.w	r2, r2, #1
 800177a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800177c:	f7ff fd4c 	bl	8001218 <HAL_GetTick>
 8001780:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001782:	e012      	b.n	80017aa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001784:	f7ff fd48 	bl	8001218 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b0a      	cmp	r3, #10
 8001790:	d90b      	bls.n	80017aa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001796:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2205      	movs	r2, #5
 80017a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e0c5      	b.n	8001936 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0e5      	beq.n	8001784 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f022 0202 	bic.w	r2, r2, #2
 80017c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017c8:	f7ff fd26 	bl	8001218 <HAL_GetTick>
 80017cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017ce:	e012      	b.n	80017f6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017d0:	f7ff fd22 	bl	8001218 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b0a      	cmp	r3, #10
 80017dc:	d90b      	bls.n	80017f6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2205      	movs	r2, #5
 80017ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e09f      	b.n	8001936 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1e5      	bne.n	80017d0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	7e1b      	ldrb	r3, [r3, #24]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d108      	bne.n	800181e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	e007      	b.n	800182e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800182c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	7e5b      	ldrb	r3, [r3, #25]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d108      	bne.n	8001848 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	e007      	b.n	8001858 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001856:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	7e9b      	ldrb	r3, [r3, #26]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d108      	bne.n	8001872 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f042 0220 	orr.w	r2, r2, #32
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	e007      	b.n	8001882 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 0220 	bic.w	r2, r2, #32
 8001880:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	7edb      	ldrb	r3, [r3, #27]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d108      	bne.n	800189c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 0210 	bic.w	r2, r2, #16
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	e007      	b.n	80018ac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f042 0210 	orr.w	r2, r2, #16
 80018aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	7f1b      	ldrb	r3, [r3, #28]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d108      	bne.n	80018c6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f042 0208 	orr.w	r2, r2, #8
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	e007      	b.n	80018d6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 0208 	bic.w	r2, r2, #8
 80018d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	7f5b      	ldrb	r3, [r3, #29]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d108      	bne.n	80018f0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f042 0204 	orr.w	r2, r2, #4
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	e007      	b.n	8001900 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 0204 	bic.w	r2, r2, #4
 80018fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	431a      	orrs	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	ea42 0103 	orr.w	r1, r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	1e5a      	subs	r2, r3, #1
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	430a      	orrs	r2, r1
 8001924:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <__NVIC_SetPriorityGrouping>:
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001950:	4b0c      	ldr	r3, [pc, #48]	@ (8001984 <__NVIC_SetPriorityGrouping+0x44>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800195c:	4013      	ands	r3, r2
 800195e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001968:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800196c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001972:	4a04      	ldr	r2, [pc, #16]	@ (8001984 <__NVIC_SetPriorityGrouping+0x44>)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	60d3      	str	r3, [r2, #12]
}
 8001978:	bf00      	nop
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <__NVIC_GetPriorityGrouping>:
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800198c:	4b04      	ldr	r3, [pc, #16]	@ (80019a0 <__NVIC_GetPriorityGrouping+0x18>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	0a1b      	lsrs	r3, r3, #8
 8001992:	f003 0307 	and.w	r3, r3, #7
}
 8001996:	4618      	mov	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <__NVIC_EnableIRQ>:
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	db0b      	blt.n	80019ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	f003 021f 	and.w	r2, r3, #31
 80019bc:	4906      	ldr	r1, [pc, #24]	@ (80019d8 <__NVIC_EnableIRQ+0x34>)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	095b      	lsrs	r3, r3, #5
 80019c4:	2001      	movs	r0, #1
 80019c6:	fa00 f202 	lsl.w	r2, r0, r2
 80019ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr
 80019d8:	e000e100 	.word	0xe000e100

080019dc <__NVIC_SetPriority>:
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	6039      	str	r1, [r7, #0]
 80019e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	db0a      	blt.n	8001a06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	490c      	ldr	r1, [pc, #48]	@ (8001a28 <__NVIC_SetPriority+0x4c>)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	0112      	lsls	r2, r2, #4
 80019fc:	b2d2      	uxtb	r2, r2
 80019fe:	440b      	add	r3, r1
 8001a00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001a04:	e00a      	b.n	8001a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	4908      	ldr	r1, [pc, #32]	@ (8001a2c <__NVIC_SetPriority+0x50>)
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	3b04      	subs	r3, #4
 8001a14:	0112      	lsls	r2, r2, #4
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	440b      	add	r3, r1
 8001a1a:	761a      	strb	r2, [r3, #24]
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	e000e100 	.word	0xe000e100
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <NVIC_EncodePriority>:
{
 8001a30:	b480      	push	{r7}
 8001a32:	b089      	sub	sp, #36	@ 0x24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f1c3 0307 	rsb	r3, r3, #7
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	bf28      	it	cs
 8001a4e:	2304      	movcs	r3, #4
 8001a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3304      	adds	r3, #4
 8001a56:	2b06      	cmp	r3, #6
 8001a58:	d902      	bls.n	8001a60 <NVIC_EncodePriority+0x30>
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3b03      	subs	r3, #3
 8001a5e:	e000      	b.n	8001a62 <NVIC_EncodePriority+0x32>
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a64:	f04f 32ff 	mov.w	r2, #4294967295
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43da      	mvns	r2, r3
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	401a      	ands	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a78:	f04f 31ff 	mov.w	r1, #4294967295
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a82:	43d9      	mvns	r1, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a88:	4313      	orrs	r3, r2
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3724      	adds	r7, #36	@ 0x24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr

08001a94 <SysTick_Config>:
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001aa4:	d301      	bcc.n	8001aaa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e00f      	b.n	8001aca <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad4 <SysTick_Config+0x40>)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ab2:	210f      	movs	r1, #15
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab8:	f7ff ff90 	bl	80019dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001abc:	4b05      	ldr	r3, [pc, #20]	@ (8001ad4 <SysTick_Config+0x40>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac2:	4b04      	ldr	r3, [pc, #16]	@ (8001ad4 <SysTick_Config+0x40>)
 8001ac4:	2207      	movs	r2, #7
 8001ac6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	e000e010 	.word	0xe000e010

08001ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff ff2d 	bl	8001940 <__NVIC_SetPriorityGrouping>
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b086      	sub	sp, #24
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4603      	mov	r3, r0
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	607a      	str	r2, [r7, #4]
 8001afa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b00:	f7ff ff42 	bl	8001988 <__NVIC_GetPriorityGrouping>
 8001b04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	68b9      	ldr	r1, [r7, #8]
 8001b0a:	6978      	ldr	r0, [r7, #20]
 8001b0c:	f7ff ff90 	bl	8001a30 <NVIC_EncodePriority>
 8001b10:	4602      	mov	r2, r0
 8001b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b16:	4611      	mov	r1, r2
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff5f 	bl	80019dc <__NVIC_SetPriority>
}
 8001b1e:	bf00      	nop
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ff35 	bl	80019a4 <__NVIC_EnableIRQ>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff ffa2 	bl	8001a94 <SysTick_Config>
 8001b50:	4603      	mov	r3, r0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
	...

08001b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b087      	sub	sp, #28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b6a:	e16f      	b.n	8001e4c <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	2101      	movs	r1, #1
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	fa01 f303 	lsl.w	r3, r1, r3
 8001b78:	4013      	ands	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 8161 	beq.w	8001e46 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d005      	beq.n	8001b9c <HAL_GPIO_Init+0x40>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 0303 	and.w	r3, r3, #3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d130      	bne.n	8001bfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	68da      	ldr	r2, [r3, #12]
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	4013      	ands	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	091b      	lsrs	r3, r3, #4
 8001be8:	f003 0201 	and.w	r2, r3, #1
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	2b03      	cmp	r3, #3
 8001c08:	d017      	beq.n	8001c3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	2203      	movs	r2, #3
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d123      	bne.n	8001c8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	08da      	lsrs	r2, r3, #3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3208      	adds	r2, #8
 8001c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	220f      	movs	r2, #15
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	4013      	ands	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	691a      	ldr	r2, [r3, #16]
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	08da      	lsrs	r2, r3, #3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3208      	adds	r2, #8
 8001c88:	6939      	ldr	r1, [r7, #16]
 8001c8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	2203      	movs	r2, #3
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f003 0203 	and.w	r2, r3, #3
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 80bb 	beq.w	8001e46 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	4b64      	ldr	r3, [pc, #400]	@ (8001e68 <HAL_GPIO_Init+0x30c>)
 8001cd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd8:	4a63      	ldr	r2, [pc, #396]	@ (8001e68 <HAL_GPIO_Init+0x30c>)
 8001cda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cde:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ce0:	4b61      	ldr	r3, [pc, #388]	@ (8001e68 <HAL_GPIO_Init+0x30c>)
 8001ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cec:	4a5f      	ldr	r2, [pc, #380]	@ (8001e6c <HAL_GPIO_Init+0x310>)
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	089b      	lsrs	r3, r3, #2
 8001cf2:	3302      	adds	r3, #2
 8001cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	220f      	movs	r2, #15
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a57      	ldr	r2, [pc, #348]	@ (8001e70 <HAL_GPIO_Init+0x314>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d031      	beq.n	8001d7c <HAL_GPIO_Init+0x220>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a56      	ldr	r2, [pc, #344]	@ (8001e74 <HAL_GPIO_Init+0x318>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d02b      	beq.n	8001d78 <HAL_GPIO_Init+0x21c>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a55      	ldr	r2, [pc, #340]	@ (8001e78 <HAL_GPIO_Init+0x31c>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d025      	beq.n	8001d74 <HAL_GPIO_Init+0x218>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a54      	ldr	r2, [pc, #336]	@ (8001e7c <HAL_GPIO_Init+0x320>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d01f      	beq.n	8001d70 <HAL_GPIO_Init+0x214>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a53      	ldr	r2, [pc, #332]	@ (8001e80 <HAL_GPIO_Init+0x324>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d019      	beq.n	8001d6c <HAL_GPIO_Init+0x210>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a52      	ldr	r2, [pc, #328]	@ (8001e84 <HAL_GPIO_Init+0x328>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d013      	beq.n	8001d68 <HAL_GPIO_Init+0x20c>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a51      	ldr	r2, [pc, #324]	@ (8001e88 <HAL_GPIO_Init+0x32c>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d00d      	beq.n	8001d64 <HAL_GPIO_Init+0x208>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a50      	ldr	r2, [pc, #320]	@ (8001e8c <HAL_GPIO_Init+0x330>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d007      	beq.n	8001d60 <HAL_GPIO_Init+0x204>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a4f      	ldr	r2, [pc, #316]	@ (8001e90 <HAL_GPIO_Init+0x334>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d101      	bne.n	8001d5c <HAL_GPIO_Init+0x200>
 8001d58:	2308      	movs	r3, #8
 8001d5a:	e010      	b.n	8001d7e <HAL_GPIO_Init+0x222>
 8001d5c:	2309      	movs	r3, #9
 8001d5e:	e00e      	b.n	8001d7e <HAL_GPIO_Init+0x222>
 8001d60:	2307      	movs	r3, #7
 8001d62:	e00c      	b.n	8001d7e <HAL_GPIO_Init+0x222>
 8001d64:	2306      	movs	r3, #6
 8001d66:	e00a      	b.n	8001d7e <HAL_GPIO_Init+0x222>
 8001d68:	2305      	movs	r3, #5
 8001d6a:	e008      	b.n	8001d7e <HAL_GPIO_Init+0x222>
 8001d6c:	2304      	movs	r3, #4
 8001d6e:	e006      	b.n	8001d7e <HAL_GPIO_Init+0x222>
 8001d70:	2303      	movs	r3, #3
 8001d72:	e004      	b.n	8001d7e <HAL_GPIO_Init+0x222>
 8001d74:	2302      	movs	r3, #2
 8001d76:	e002      	b.n	8001d7e <HAL_GPIO_Init+0x222>
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e000      	b.n	8001d7e <HAL_GPIO_Init+0x222>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	f002 0203 	and.w	r2, r2, #3
 8001d84:	0092      	lsls	r2, r2, #2
 8001d86:	4093      	lsls	r3, r2
 8001d88:	461a      	mov	r2, r3
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d90:	4936      	ldr	r1, [pc, #216]	@ (8001e6c <HAL_GPIO_Init+0x310>)
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	089b      	lsrs	r3, r3, #2
 8001d96:	3302      	adds	r3, #2
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d9e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e94 <HAL_GPIO_Init+0x338>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	43db      	mvns	r3, r3
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	4013      	ands	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001dc2:	4a34      	ldr	r2, [pc, #208]	@ (8001e94 <HAL_GPIO_Init+0x338>)
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dc8:	4b32      	ldr	r3, [pc, #200]	@ (8001e94 <HAL_GPIO_Init+0x338>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001dec:	4a29      	ldr	r2, [pc, #164]	@ (8001e94 <HAL_GPIO_Init+0x338>)
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001df2:	4b28      	ldr	r3, [pc, #160]	@ (8001e94 <HAL_GPIO_Init+0x338>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e16:	4a1f      	ldr	r2, [pc, #124]	@ (8001e94 <HAL_GPIO_Init+0x338>)
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8001e94 <HAL_GPIO_Init+0x338>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	43db      	mvns	r3, r3
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e40:	4a14      	ldr	r2, [pc, #80]	@ (8001e94 <HAL_GPIO_Init+0x338>)
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	fa22 f303 	lsr.w	r3, r2, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f47f ae88 	bne.w	8001b6c <HAL_GPIO_Init+0x10>
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	bf00      	nop
 8001e60:	371c      	adds	r7, #28
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40013800 	.word	0x40013800
 8001e70:	40020000 	.word	0x40020000
 8001e74:	40020400 	.word	0x40020400
 8001e78:	40020800 	.word	0x40020800
 8001e7c:	40020c00 	.word	0x40020c00
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40021400 	.word	0x40021400
 8001e88:	40021800 	.word	0x40021800
 8001e8c:	40021c00 	.word	0x40021c00
 8001e90:	40022000 	.word	0x40022000
 8001e94:	40013c00 	.word	0x40013c00

08001e98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691a      	ldr	r2, [r3, #16]
 8001ea8:	887b      	ldrh	r3, [r7, #2]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d002      	beq.n	8001eb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	73fb      	strb	r3, [r7, #15]
 8001eb4:	e001      	b.n	8001eba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr

08001ec6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	460b      	mov	r3, r1
 8001ed0:	807b      	strh	r3, [r7, #2]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ed6:	787b      	ldrb	r3, [r7, #1]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001edc:	887a      	ldrh	r2, [r7, #2]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ee2:	e003      	b.n	8001eec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ee4:	887b      	ldrh	r3, [r7, #2]
 8001ee6:	041a      	lsls	r2, r3, #16
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	619a      	str	r2, [r3, #24]
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr
	...

08001ef8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08a      	sub	sp, #40	@ 0x28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e23b      	b.n	8002382 <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d050      	beq.n	8001fb8 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f16:	4b9e      	ldr	r3, [pc, #632]	@ (8002190 <HAL_RCC_OscConfig+0x298>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	d00c      	beq.n	8001f3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f22:	4b9b      	ldr	r3, [pc, #620]	@ (8002190 <HAL_RCC_OscConfig+0x298>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d112      	bne.n	8001f54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f2e:	4b98      	ldr	r3, [pc, #608]	@ (8002190 <HAL_RCC_OscConfig+0x298>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f3a:	d10b      	bne.n	8001f54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f3c:	4b94      	ldr	r3, [pc, #592]	@ (8002190 <HAL_RCC_OscConfig+0x298>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d036      	beq.n	8001fb6 <HAL_RCC_OscConfig+0xbe>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d132      	bne.n	8001fb6 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e216      	b.n	8002382 <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	4b8e      	ldr	r3, [pc, #568]	@ (8002194 <HAL_RCC_OscConfig+0x29c>)
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d013      	beq.n	8001f8e <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f66:	f7ff f957 	bl	8001218 <HAL_GetTick>
 8001f6a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f6e:	f7ff f953 	bl	8001218 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	6a3b      	ldr	r3, [r7, #32]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b64      	cmp	r3, #100	@ 0x64
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e200      	b.n	8002382 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f80:	4b83      	ldr	r3, [pc, #524]	@ (8002190 <HAL_RCC_OscConfig+0x298>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0f0      	beq.n	8001f6e <HAL_RCC_OscConfig+0x76>
 8001f8c:	e014      	b.n	8001fb8 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8e:	f7ff f943 	bl	8001218 <HAL_GetTick>
 8001f92:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f96:	f7ff f93f 	bl	8001218 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	6a3b      	ldr	r3, [r7, #32]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b64      	cmp	r3, #100	@ 0x64
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e1ec      	b.n	8002382 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa8:	4b79      	ldr	r3, [pc, #484]	@ (8002190 <HAL_RCC_OscConfig+0x298>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1f0      	bne.n	8001f96 <HAL_RCC_OscConfig+0x9e>
 8001fb4:	e000      	b.n	8001fb8 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d077      	beq.n	80020b4 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fc4:	4b72      	ldr	r3, [pc, #456]	@ (8002190 <HAL_RCC_OscConfig+0x298>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 030c 	and.w	r3, r3, #12
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00b      	beq.n	8001fe8 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fd0:	4b6f      	ldr	r3, [pc, #444]	@ (8002190 <HAL_RCC_OscConfig+0x298>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d126      	bne.n	800202a <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fdc:	4b6c      	ldr	r3, [pc, #432]	@ (8002190 <HAL_RCC_OscConfig+0x298>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d120      	bne.n	800202a <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe8:	4b69      	ldr	r3, [pc, #420]	@ (8002190 <HAL_RCC_OscConfig+0x298>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d005      	beq.n	8002000 <HAL_RCC_OscConfig+0x108>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d001      	beq.n	8002000 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e1c0      	b.n	8002382 <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002000:	4b63      	ldr	r3, [pc, #396]	@ (8002190 <HAL_RCC_OscConfig+0x298>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	21f8      	movs	r1, #248	@ 0xf8
 800200e:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002010:	69b9      	ldr	r1, [r7, #24]
 8002012:	fa91 f1a1 	rbit	r1, r1
 8002016:	6179      	str	r1, [r7, #20]
  return result;
 8002018:	6979      	ldr	r1, [r7, #20]
 800201a:	fab1 f181 	clz	r1, r1
 800201e:	b2c9      	uxtb	r1, r1
 8002020:	408b      	lsls	r3, r1
 8002022:	495b      	ldr	r1, [pc, #364]	@ (8002190 <HAL_RCC_OscConfig+0x298>)
 8002024:	4313      	orrs	r3, r2
 8002026:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002028:	e044      	b.n	80020b4 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d02a      	beq.n	8002088 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002032:	4b59      	ldr	r3, [pc, #356]	@ (8002198 <HAL_RCC_OscConfig+0x2a0>)
 8002034:	2201      	movs	r2, #1
 8002036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002038:	f7ff f8ee 	bl	8001218 <HAL_GetTick>
 800203c:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002040:	f7ff f8ea 	bl	8001218 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	6a3b      	ldr	r3, [r7, #32]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e197      	b.n	8002382 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002052:	4b4f      	ldr	r3, [pc, #316]	@ (8002190 <HAL_RCC_OscConfig+0x298>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0f0      	beq.n	8002040 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205e:	4b4c      	ldr	r3, [pc, #304]	@ (8002190 <HAL_RCC_OscConfig+0x298>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	21f8      	movs	r1, #248	@ 0xf8
 800206c:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206e:	6939      	ldr	r1, [r7, #16]
 8002070:	fa91 f1a1 	rbit	r1, r1
 8002074:	60f9      	str	r1, [r7, #12]
  return result;
 8002076:	68f9      	ldr	r1, [r7, #12]
 8002078:	fab1 f181 	clz	r1, r1
 800207c:	b2c9      	uxtb	r1, r1
 800207e:	408b      	lsls	r3, r1
 8002080:	4943      	ldr	r1, [pc, #268]	@ (8002190 <HAL_RCC_OscConfig+0x298>)
 8002082:	4313      	orrs	r3, r2
 8002084:	600b      	str	r3, [r1, #0]
 8002086:	e015      	b.n	80020b4 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002088:	4b43      	ldr	r3, [pc, #268]	@ (8002198 <HAL_RCC_OscConfig+0x2a0>)
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208e:	f7ff f8c3 	bl	8001218 <HAL_GetTick>
 8002092:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002096:	f7ff f8bf 	bl	8001218 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	6a3b      	ldr	r3, [r7, #32]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e16c      	b.n	8002382 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a8:	4b39      	ldr	r3, [pc, #228]	@ (8002190 <HAL_RCC_OscConfig+0x298>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1f0      	bne.n	8002096 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0308 	and.w	r3, r3, #8
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d030      	beq.n	8002122 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d016      	beq.n	80020f6 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020c8:	4b34      	ldr	r3, [pc, #208]	@ (800219c <HAL_RCC_OscConfig+0x2a4>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ce:	f7ff f8a3 	bl	8001218 <HAL_GetTick>
 80020d2:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d6:	f7ff f89f 	bl	8001218 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	6a3b      	ldr	r3, [r7, #32]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e14c      	b.n	8002382 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e8:	4b29      	ldr	r3, [pc, #164]	@ (8002190 <HAL_RCC_OscConfig+0x298>)
 80020ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0f0      	beq.n	80020d6 <HAL_RCC_OscConfig+0x1de>
 80020f4:	e015      	b.n	8002122 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f6:	4b29      	ldr	r3, [pc, #164]	@ (800219c <HAL_RCC_OscConfig+0x2a4>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020fc:	f7ff f88c 	bl	8001218 <HAL_GetTick>
 8002100:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002104:	f7ff f888 	bl	8001218 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	6a3b      	ldr	r3, [r7, #32]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e135      	b.n	8002382 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002116:	4b1e      	ldr	r3, [pc, #120]	@ (8002190 <HAL_RCC_OscConfig+0x298>)
 8002118:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0304 	and.w	r3, r3, #4
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 8087 	beq.w	800223e <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002130:	2300      	movs	r3, #0
 8002132:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002136:	4b16      	ldr	r3, [pc, #88]	@ (8002190 <HAL_RCC_OscConfig+0x298>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d110      	bne.n	8002164 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	60bb      	str	r3, [r7, #8]
 8002146:	4b12      	ldr	r3, [pc, #72]	@ (8002190 <HAL_RCC_OscConfig+0x298>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214a:	4a11      	ldr	r2, [pc, #68]	@ (8002190 <HAL_RCC_OscConfig+0x298>)
 800214c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002150:	6413      	str	r3, [r2, #64]	@ 0x40
 8002152:	4b0f      	ldr	r3, [pc, #60]	@ (8002190 <HAL_RCC_OscConfig+0x298>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800215a:	60bb      	str	r3, [r7, #8]
 800215c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800215e:	2301      	movs	r3, #1
 8002160:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002164:	4b0e      	ldr	r3, [pc, #56]	@ (80021a0 <HAL_RCC_OscConfig+0x2a8>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a0d      	ldr	r2, [pc, #52]	@ (80021a0 <HAL_RCC_OscConfig+0x2a8>)
 800216a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800216e:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002170:	4b0b      	ldr	r3, [pc, #44]	@ (80021a0 <HAL_RCC_OscConfig+0x2a8>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002178:	2b00      	cmp	r3, #0
 800217a:	d122      	bne.n	80021c2 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800217c:	4b08      	ldr	r3, [pc, #32]	@ (80021a0 <HAL_RCC_OscConfig+0x2a8>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a07      	ldr	r2, [pc, #28]	@ (80021a0 <HAL_RCC_OscConfig+0x2a8>)
 8002182:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002186:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002188:	f7ff f846 	bl	8001218 <HAL_GetTick>
 800218c:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800218e:	e012      	b.n	80021b6 <HAL_RCC_OscConfig+0x2be>
 8002190:	40023800 	.word	0x40023800
 8002194:	40023802 	.word	0x40023802
 8002198:	42470000 	.word	0x42470000
 800219c:	42470e80 	.word	0x42470e80
 80021a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021a4:	f7ff f838 	bl	8001218 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e0e5      	b.n	8002382 <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b6:	4b75      	ldr	r3, [pc, #468]	@ (800238c <HAL_RCC_OscConfig+0x494>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0f0      	beq.n	80021a4 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	4b72      	ldr	r3, [pc, #456]	@ (8002390 <HAL_RCC_OscConfig+0x498>)
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d015      	beq.n	8002200 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d4:	f7ff f820 	bl	8001218 <HAL_GetTick>
 80021d8:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021da:	e00a      	b.n	80021f2 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021dc:	f7ff f81c 	bl	8001218 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	6a3b      	ldr	r3, [r7, #32]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e0c7      	b.n	8002382 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f2:	4b68      	ldr	r3, [pc, #416]	@ (8002394 <HAL_RCC_OscConfig+0x49c>)
 80021f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0ee      	beq.n	80021dc <HAL_RCC_OscConfig+0x2e4>
 80021fe:	e014      	b.n	800222a <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002200:	f7ff f80a 	bl	8001218 <HAL_GetTick>
 8002204:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002206:	e00a      	b.n	800221e <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002208:	f7ff f806 	bl	8001218 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	6a3b      	ldr	r3, [r7, #32]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002216:	4293      	cmp	r3, r2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e0b1      	b.n	8002382 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800221e:	4b5d      	ldr	r3, [pc, #372]	@ (8002394 <HAL_RCC_OscConfig+0x49c>)
 8002220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1ee      	bne.n	8002208 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800222a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800222e:	2b01      	cmp	r3, #1
 8002230:	d105      	bne.n	800223e <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002232:	4b58      	ldr	r3, [pc, #352]	@ (8002394 <HAL_RCC_OscConfig+0x49c>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002236:	4a57      	ldr	r2, [pc, #348]	@ (8002394 <HAL_RCC_OscConfig+0x49c>)
 8002238:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800223c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 809c 	beq.w	8002380 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002248:	4b52      	ldr	r3, [pc, #328]	@ (8002394 <HAL_RCC_OscConfig+0x49c>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 030c 	and.w	r3, r3, #12
 8002250:	2b08      	cmp	r3, #8
 8002252:	d061      	beq.n	8002318 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	2b02      	cmp	r3, #2
 800225a:	d146      	bne.n	80022ea <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225c:	4b4e      	ldr	r3, [pc, #312]	@ (8002398 <HAL_RCC_OscConfig+0x4a0>)
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002262:	f7fe ffd9 	bl	8001218 <HAL_GetTick>
 8002266:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800226a:	f7fe ffd5 	bl	8001218 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	6a3b      	ldr	r3, [r7, #32]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b64      	cmp	r3, #100	@ 0x64
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e082      	b.n	8002382 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800227c:	4b45      	ldr	r3, [pc, #276]	@ (8002394 <HAL_RCC_OscConfig+0x49c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1f0      	bne.n	800226a <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002288:	4b42      	ldr	r3, [pc, #264]	@ (8002394 <HAL_RCC_OscConfig+0x49c>)
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	4b43      	ldr	r3, [pc, #268]	@ (800239c <HAL_RCC_OscConfig+0x4a4>)
 800228e:	4013      	ands	r3, r2
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	69d1      	ldr	r1, [r2, #28]
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6a12      	ldr	r2, [r2, #32]
 8002298:	4311      	orrs	r1, r2
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800229e:	0192      	lsls	r2, r2, #6
 80022a0:	4311      	orrs	r1, r2
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80022a6:	0612      	lsls	r2, r2, #24
 80022a8:	4311      	orrs	r1, r2
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80022ae:	0852      	lsrs	r2, r2, #1
 80022b0:	3a01      	subs	r2, #1
 80022b2:	0412      	lsls	r2, r2, #16
 80022b4:	430a      	orrs	r2, r1
 80022b6:	4937      	ldr	r1, [pc, #220]	@ (8002394 <HAL_RCC_OscConfig+0x49c>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022bc:	4b36      	ldr	r3, [pc, #216]	@ (8002398 <HAL_RCC_OscConfig+0x4a0>)
 80022be:	2201      	movs	r2, #1
 80022c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c2:	f7fe ffa9 	bl	8001218 <HAL_GetTick>
 80022c6:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ca:	f7fe ffa5 	bl	8001218 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b64      	cmp	r3, #100	@ 0x64
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e052      	b.n	8002382 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002394 <HAL_RCC_OscConfig+0x49c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0f0      	beq.n	80022ca <HAL_RCC_OscConfig+0x3d2>
 80022e8:	e04a      	b.n	8002380 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002398 <HAL_RCC_OscConfig+0x4a0>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f0:	f7fe ff92 	bl	8001218 <HAL_GetTick>
 80022f4:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f8:	f7fe ff8e 	bl	8001218 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	6a3b      	ldr	r3, [r7, #32]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b64      	cmp	r3, #100	@ 0x64
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e03b      	b.n	8002382 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800230a:	4b22      	ldr	r3, [pc, #136]	@ (8002394 <HAL_RCC_OscConfig+0x49c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0x400>
 8002316:	e033      	b.n	8002380 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d101      	bne.n	8002324 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e02e      	b.n	8002382 <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8002324:	4b1b      	ldr	r3, [pc, #108]	@ (8002394 <HAL_RCC_OscConfig+0x49c>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	429a      	cmp	r2, r3
 8002336:	d121      	bne.n	800237c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002342:	429a      	cmp	r2, r3
 8002344:	d11a      	bne.n	800237c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002346:	69fa      	ldr	r2, [r7, #28]
 8002348:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800234c:	4013      	ands	r3, r2
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002352:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002354:	4293      	cmp	r3, r2
 8002356:	d111      	bne.n	800237c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002362:	085b      	lsrs	r3, r3, #1
 8002364:	3b01      	subs	r3, #1
 8002366:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002368:	429a      	cmp	r2, r3
 800236a:	d107      	bne.n	800237c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002376:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002378:	429a      	cmp	r2, r3
 800237a:	d001      	beq.n	8002380 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e000      	b.n	8002382 <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3728      	adds	r7, #40	@ 0x28
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40007000 	.word	0x40007000
 8002390:	40023870 	.word	0x40023870
 8002394:	40023800 	.word	0x40023800
 8002398:	42470060 	.word	0x42470060
 800239c:	f0bc8000 	.word	0xf0bc8000

080023a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e0d2      	b.n	800255a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023b4:	4b6b      	ldr	r3, [pc, #428]	@ (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 030f 	and.w	r3, r3, #15
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d90c      	bls.n	80023dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c2:	4b68      	ldr	r3, [pc, #416]	@ (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ca:	4b66      	ldr	r3, [pc, #408]	@ (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d001      	beq.n	80023dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e0be      	b.n	800255a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d020      	beq.n	800242a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023f4:	4b5c      	ldr	r3, [pc, #368]	@ (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	4a5b      	ldr	r2, [pc, #364]	@ (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 80023fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	2b00      	cmp	r3, #0
 800240a:	d005      	beq.n	8002418 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 800240c:	4b56      	ldr	r3, [pc, #344]	@ (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	4a55      	ldr	r2, [pc, #340]	@ (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 8002412:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002416:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002418:	4b53      	ldr	r3, [pc, #332]	@ (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	4950      	ldr	r1, [pc, #320]	@ (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 8002426:	4313      	orrs	r3, r2
 8002428:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d040      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d107      	bne.n	800244e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243e:	4b4a      	ldr	r3, [pc, #296]	@ (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d115      	bne.n	8002476 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e085      	b.n	800255a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d107      	bne.n	8002466 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002456:	4b44      	ldr	r3, [pc, #272]	@ (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d109      	bne.n	8002476 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e079      	b.n	800255a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002466:	4b40      	ldr	r3, [pc, #256]	@ (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e071      	b.n	800255a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002476:	4b3c      	ldr	r3, [pc, #240]	@ (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f023 0203 	bic.w	r2, r3, #3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	4939      	ldr	r1, [pc, #228]	@ (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 8002484:	4313      	orrs	r3, r2
 8002486:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002488:	f7fe fec6 	bl	8001218 <HAL_GetTick>
 800248c:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248e:	e00a      	b.n	80024a6 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002490:	f7fe fec2 	bl	8001218 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800249e:	4293      	cmp	r3, r2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e059      	b.n	800255a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a6:	4b30      	ldr	r3, [pc, #192]	@ (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 020c 	and.w	r2, r3, #12
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d1eb      	bne.n	8002490 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 030f 	and.w	r3, r3, #15
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d20c      	bcs.n	80024e0 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c6:	4b27      	ldr	r3, [pc, #156]	@ (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ce:	4b25      	ldr	r3, [pc, #148]	@ (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d001      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e03c      	b.n	800255a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	491b      	ldr	r1, [pc, #108]	@ (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d009      	beq.n	800251e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800250a:	4b17      	ldr	r3, [pc, #92]	@ (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	4913      	ldr	r1, [pc, #76]	@ (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 800251a:	4313      	orrs	r3, r2
 800251c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800251e:	f000 f82b 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 8002522:	4601      	mov	r1, r0
 8002524:	4b10      	ldr	r3, [pc, #64]	@ (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800252c:	22f0      	movs	r2, #240	@ 0xf0
 800252e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	fa92 f2a2 	rbit	r2, r2
 8002536:	60fa      	str	r2, [r7, #12]
  return result;
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	fab2 f282 	clz	r2, r2
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	40d3      	lsrs	r3, r2
 8002542:	4a0a      	ldr	r2, [pc, #40]	@ (800256c <HAL_RCC_ClockConfig+0x1cc>)
 8002544:	5cd3      	ldrb	r3, [r2, r3]
 8002546:	fa21 f303 	lsr.w	r3, r1, r3
 800254a:	4a09      	ldr	r2, [pc, #36]	@ (8002570 <HAL_RCC_ClockConfig+0x1d0>)
 800254c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800254e:	4b09      	ldr	r3, [pc, #36]	@ (8002574 <HAL_RCC_ClockConfig+0x1d4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe fe1e 	bl	8001194 <HAL_InitTick>

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40023c00 	.word	0x40023c00
 8002568:	40023800 	.word	0x40023800
 800256c:	08003a14 	.word	0x08003a14
 8002570:	20000004 	.word	0x20000004
 8002574:	20000008 	.word	0x20000008

08002578 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800257c:	b090      	sub	sp, #64	@ 0x40
 800257e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	637b      	str	r3, [r7, #52]	@ 0x34
 8002584:	2300      	movs	r3, #0
 8002586:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002588:	2300      	movs	r3, #0
 800258a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800258c:	2300      	movs	r3, #0
 800258e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002590:	4b59      	ldr	r3, [pc, #356]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f003 030c 	and.w	r3, r3, #12
 8002598:	2b08      	cmp	r3, #8
 800259a:	d00d      	beq.n	80025b8 <HAL_RCC_GetSysClockFreq+0x40>
 800259c:	2b08      	cmp	r3, #8
 800259e:	f200 80a2 	bhi.w	80026e6 <HAL_RCC_GetSysClockFreq+0x16e>
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d002      	beq.n	80025ac <HAL_RCC_GetSysClockFreq+0x34>
 80025a6:	2b04      	cmp	r3, #4
 80025a8:	d003      	beq.n	80025b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80025aa:	e09c      	b.n	80026e6 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025ac:	4b53      	ldr	r3, [pc, #332]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x184>)
 80025ae:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80025b0:	e09c      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025b2:	4b53      	ldr	r3, [pc, #332]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x188>)
 80025b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80025b6:	e099      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025b8:	4b4f      	ldr	r3, [pc, #316]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025c0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025c2:	4b4d      	ldr	r3, [pc, #308]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d027      	beq.n	800261e <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ce:	4b4a      	ldr	r3, [pc, #296]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	099b      	lsrs	r3, r3, #6
 80025d4:	2200      	movs	r2, #0
 80025d6:	623b      	str	r3, [r7, #32]
 80025d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80025e0:	2100      	movs	r1, #0
 80025e2:	4b47      	ldr	r3, [pc, #284]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x188>)
 80025e4:	fb03 f201 	mul.w	r2, r3, r1
 80025e8:	2300      	movs	r3, #0
 80025ea:	fb00 f303 	mul.w	r3, r0, r3
 80025ee:	4413      	add	r3, r2
 80025f0:	4a43      	ldr	r2, [pc, #268]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x188>)
 80025f2:	fba0 2102 	umull	r2, r1, r0, r2
 80025f6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80025f8:	62ba      	str	r2, [r7, #40]	@ 0x28
 80025fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025fc:	4413      	add	r3, r2
 80025fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002602:	2200      	movs	r2, #0
 8002604:	61bb      	str	r3, [r7, #24]
 8002606:	61fa      	str	r2, [r7, #28]
 8002608:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800260c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002610:	f7fd fdd8 	bl	80001c4 <__aeabi_uldivmod>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4613      	mov	r3, r2
 800261a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800261c:	e055      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800261e:	4b36      	ldr	r3, [pc, #216]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	099b      	lsrs	r3, r3, #6
 8002624:	2200      	movs	r2, #0
 8002626:	613b      	str	r3, [r7, #16]
 8002628:	617a      	str	r2, [r7, #20]
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002630:	f04f 0b00 	mov.w	fp, #0
 8002634:	4652      	mov	r2, sl
 8002636:	465b      	mov	r3, fp
 8002638:	f04f 0000 	mov.w	r0, #0
 800263c:	f04f 0100 	mov.w	r1, #0
 8002640:	0159      	lsls	r1, r3, #5
 8002642:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002646:	0150      	lsls	r0, r2, #5
 8002648:	4602      	mov	r2, r0
 800264a:	460b      	mov	r3, r1
 800264c:	ebb2 080a 	subs.w	r8, r2, sl
 8002650:	eb63 090b 	sbc.w	r9, r3, fp
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	f04f 0300 	mov.w	r3, #0
 800265c:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002660:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002664:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002668:	ebb2 0408 	subs.w	r4, r2, r8
 800266c:	eb63 0509 	sbc.w	r5, r3, r9
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	00eb      	lsls	r3, r5, #3
 800267a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800267e:	00e2      	lsls	r2, r4, #3
 8002680:	4614      	mov	r4, r2
 8002682:	461d      	mov	r5, r3
 8002684:	eb14 030a 	adds.w	r3, r4, sl
 8002688:	603b      	str	r3, [r7, #0]
 800268a:	eb45 030b 	adc.w	r3, r5, fp
 800268e:	607b      	str	r3, [r7, #4]
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	f04f 0300 	mov.w	r3, #0
 8002698:	e9d7 4500 	ldrd	r4, r5, [r7]
 800269c:	4629      	mov	r1, r5
 800269e:	028b      	lsls	r3, r1, #10
 80026a0:	4620      	mov	r0, r4
 80026a2:	4629      	mov	r1, r5
 80026a4:	4604      	mov	r4, r0
 80026a6:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80026aa:	4601      	mov	r1, r0
 80026ac:	028a      	lsls	r2, r1, #10
 80026ae:	4610      	mov	r0, r2
 80026b0:	4619      	mov	r1, r3
 80026b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026b4:	2200      	movs	r2, #0
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	60fa      	str	r2, [r7, #12]
 80026ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026be:	f7fd fd81 	bl	80001c4 <__aeabi_uldivmod>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4613      	mov	r3, r2
 80026c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026ca:	4b0b      	ldr	r3, [pc, #44]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	0c1b      	lsrs	r3, r3, #16
 80026d0:	f003 0303 	and.w	r3, r3, #3
 80026d4:	3301      	adds	r3, #1
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80026da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80026dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026de:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80026e4:	e002      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026e6:	4b05      	ldr	r3, [pc, #20]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x184>)
 80026e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80026ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3740      	adds	r7, #64	@ 0x40
 80026f2:	46bd      	mov	sp, r7
 80026f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026f8:	40023800 	.word	0x40023800
 80026fc:	00f42400 	.word	0x00f42400
 8002700:	017d7840 	.word	0x017d7840

08002704 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e07b      	b.n	800280e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271a:	2b00      	cmp	r3, #0
 800271c:	d108      	bne.n	8002730 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002726:	d009      	beq.n	800273c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	61da      	str	r2, [r3, #28]
 800272e:	e005      	b.n	800273c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d106      	bne.n	800275c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7fe fb60 	bl	8000e1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2202      	movs	r2, #2
 8002760:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002772:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002784:	431a      	orrs	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	431a      	orrs	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027ac:	431a      	orrs	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027c0:	ea42 0103 	orr.w	r1, r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	0c1b      	lsrs	r3, r3, #16
 80027da:	f003 0104 	and.w	r1, r3, #4
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e2:	f003 0210 	and.w	r2, r3, #16
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	69da      	ldr	r2, [r3, #28]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b082      	sub	sp, #8
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e041      	b.n	80028ac <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	d106      	bne.n	8002842 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f7fe fb35 	bl	8000eac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2202      	movs	r2, #2
 8002846:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3304      	adds	r3, #4
 8002852:	4619      	mov	r1, r3
 8002854:	4610      	mov	r0, r2
 8002856:	f000 fa21 	bl	8002c9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d122      	bne.n	8002910 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d11b      	bne.n	8002910 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f06f 0202 	mvn.w	r2, #2
 80028e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f9b4 	bl	8002c64 <HAL_TIM_IC_CaptureCallback>
 80028fc:	e005      	b.n	800290a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f9a7 	bl	8002c52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f9b6 	bl	8002c76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	f003 0304 	and.w	r3, r3, #4
 800291a:	2b04      	cmp	r3, #4
 800291c:	d122      	bne.n	8002964 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	2b04      	cmp	r3, #4
 800292a:	d11b      	bne.n	8002964 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f06f 0204 	mvn.w	r2, #4
 8002934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2202      	movs	r2, #2
 800293a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f98a 	bl	8002c64 <HAL_TIM_IC_CaptureCallback>
 8002950:	e005      	b.n	800295e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f97d 	bl	8002c52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 f98c 	bl	8002c76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b08      	cmp	r3, #8
 8002970:	d122      	bne.n	80029b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	2b08      	cmp	r3, #8
 800297e:	d11b      	bne.n	80029b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f06f 0208 	mvn.w	r2, #8
 8002988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2204      	movs	r2, #4
 800298e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f960 	bl	8002c64 <HAL_TIM_IC_CaptureCallback>
 80029a4:	e005      	b.n	80029b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f953 	bl	8002c52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f962 	bl	8002c76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	f003 0310 	and.w	r3, r3, #16
 80029c2:	2b10      	cmp	r3, #16
 80029c4:	d122      	bne.n	8002a0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f003 0310 	and.w	r3, r3, #16
 80029d0:	2b10      	cmp	r3, #16
 80029d2:	d11b      	bne.n	8002a0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f06f 0210 	mvn.w	r2, #16
 80029dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2208      	movs	r2, #8
 80029e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f936 	bl	8002c64 <HAL_TIM_IC_CaptureCallback>
 80029f8:	e005      	b.n	8002a06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f929 	bl	8002c52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f938 	bl	8002c76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d10e      	bne.n	8002a38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d107      	bne.n	8002a38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f06f 0201 	mvn.w	r2, #1
 8002a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7fe f80a 	bl	8000a4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a42:	2b80      	cmp	r3, #128	@ 0x80
 8002a44:	d10e      	bne.n	8002a64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a50:	2b80      	cmp	r3, #128	@ 0x80
 8002a52:	d107      	bne.n	8002a64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 fad3 	bl	800300a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a6e:	2b40      	cmp	r3, #64	@ 0x40
 8002a70:	d10e      	bne.n	8002a90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a7c:	2b40      	cmp	r3, #64	@ 0x40
 8002a7e:	d107      	bne.n	8002a90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f8fc 	bl	8002c88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	f003 0320 	and.w	r3, r3, #32
 8002a9a:	2b20      	cmp	r3, #32
 8002a9c:	d10e      	bne.n	8002abc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	f003 0320 	and.w	r3, r3, #32
 8002aa8:	2b20      	cmp	r3, #32
 8002aaa:	d107      	bne.n	8002abc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f06f 0220 	mvn.w	r2, #32
 8002ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 fa9e 	bl	8002ff8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002abc:	bf00      	nop
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_TIM_ConfigClockSource+0x1c>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e0b4      	b.n	8002c4a <HAL_TIM_ConfigClockSource+0x186>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2202      	movs	r2, #2
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002afe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b18:	d03e      	beq.n	8002b98 <HAL_TIM_ConfigClockSource+0xd4>
 8002b1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b1e:	f200 8087 	bhi.w	8002c30 <HAL_TIM_ConfigClockSource+0x16c>
 8002b22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b26:	f000 8086 	beq.w	8002c36 <HAL_TIM_ConfigClockSource+0x172>
 8002b2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b2e:	d87f      	bhi.n	8002c30 <HAL_TIM_ConfigClockSource+0x16c>
 8002b30:	2b70      	cmp	r3, #112	@ 0x70
 8002b32:	d01a      	beq.n	8002b6a <HAL_TIM_ConfigClockSource+0xa6>
 8002b34:	2b70      	cmp	r3, #112	@ 0x70
 8002b36:	d87b      	bhi.n	8002c30 <HAL_TIM_ConfigClockSource+0x16c>
 8002b38:	2b60      	cmp	r3, #96	@ 0x60
 8002b3a:	d050      	beq.n	8002bde <HAL_TIM_ConfigClockSource+0x11a>
 8002b3c:	2b60      	cmp	r3, #96	@ 0x60
 8002b3e:	d877      	bhi.n	8002c30 <HAL_TIM_ConfigClockSource+0x16c>
 8002b40:	2b50      	cmp	r3, #80	@ 0x50
 8002b42:	d03c      	beq.n	8002bbe <HAL_TIM_ConfigClockSource+0xfa>
 8002b44:	2b50      	cmp	r3, #80	@ 0x50
 8002b46:	d873      	bhi.n	8002c30 <HAL_TIM_ConfigClockSource+0x16c>
 8002b48:	2b40      	cmp	r3, #64	@ 0x40
 8002b4a:	d058      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0x13a>
 8002b4c:	2b40      	cmp	r3, #64	@ 0x40
 8002b4e:	d86f      	bhi.n	8002c30 <HAL_TIM_ConfigClockSource+0x16c>
 8002b50:	2b30      	cmp	r3, #48	@ 0x30
 8002b52:	d064      	beq.n	8002c1e <HAL_TIM_ConfigClockSource+0x15a>
 8002b54:	2b30      	cmp	r3, #48	@ 0x30
 8002b56:	d86b      	bhi.n	8002c30 <HAL_TIM_ConfigClockSource+0x16c>
 8002b58:	2b20      	cmp	r3, #32
 8002b5a:	d060      	beq.n	8002c1e <HAL_TIM_ConfigClockSource+0x15a>
 8002b5c:	2b20      	cmp	r3, #32
 8002b5e:	d867      	bhi.n	8002c30 <HAL_TIM_ConfigClockSource+0x16c>
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d05c      	beq.n	8002c1e <HAL_TIM_ConfigClockSource+0x15a>
 8002b64:	2b10      	cmp	r3, #16
 8002b66:	d05a      	beq.n	8002c1e <HAL_TIM_ConfigClockSource+0x15a>
 8002b68:	e062      	b.n	8002c30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b7a:	f000 f9a4 	bl	8002ec6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002b8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	609a      	str	r2, [r3, #8]
      break;
 8002b96:	e04f      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ba8:	f000 f98d 	bl	8002ec6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bba:	609a      	str	r2, [r3, #8]
      break;
 8002bbc:	e03c      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bca:	461a      	mov	r2, r3
 8002bcc:	f000 f904 	bl	8002dd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2150      	movs	r1, #80	@ 0x50
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 f95b 	bl	8002e92 <TIM_ITRx_SetConfig>
      break;
 8002bdc:	e02c      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bea:	461a      	mov	r2, r3
 8002bec:	f000 f922 	bl	8002e34 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2160      	movs	r1, #96	@ 0x60
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 f94b 	bl	8002e92 <TIM_ITRx_SetConfig>
      break;
 8002bfc:	e01c      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	f000 f8e4 	bl	8002dd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2140      	movs	r1, #64	@ 0x40
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 f93b 	bl	8002e92 <TIM_ITRx_SetConfig>
      break;
 8002c1c:	e00c      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4619      	mov	r1, r3
 8002c28:	4610      	mov	r0, r2
 8002c2a:	f000 f932 	bl	8002e92 <TIM_ITRx_SetConfig>
      break;
 8002c2e:	e003      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	73fb      	strb	r3, [r7, #15]
      break;
 8002c34:	e000      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr

08002c64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bc80      	pop	{r7}
 8002c74:	4770      	bx	lr

08002c76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr

08002c88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr
	...

08002c9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a3f      	ldr	r2, [pc, #252]	@ (8002dac <TIM_Base_SetConfig+0x110>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d013      	beq.n	8002cdc <TIM_Base_SetConfig+0x40>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cba:	d00f      	beq.n	8002cdc <TIM_Base_SetConfig+0x40>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a3c      	ldr	r2, [pc, #240]	@ (8002db0 <TIM_Base_SetConfig+0x114>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d00b      	beq.n	8002cdc <TIM_Base_SetConfig+0x40>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a3b      	ldr	r2, [pc, #236]	@ (8002db4 <TIM_Base_SetConfig+0x118>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d007      	beq.n	8002cdc <TIM_Base_SetConfig+0x40>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a3a      	ldr	r2, [pc, #232]	@ (8002db8 <TIM_Base_SetConfig+0x11c>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d003      	beq.n	8002cdc <TIM_Base_SetConfig+0x40>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a39      	ldr	r2, [pc, #228]	@ (8002dbc <TIM_Base_SetConfig+0x120>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d108      	bne.n	8002cee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ce2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a2e      	ldr	r2, [pc, #184]	@ (8002dac <TIM_Base_SetConfig+0x110>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d02b      	beq.n	8002d4e <TIM_Base_SetConfig+0xb2>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cfc:	d027      	beq.n	8002d4e <TIM_Base_SetConfig+0xb2>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a2b      	ldr	r2, [pc, #172]	@ (8002db0 <TIM_Base_SetConfig+0x114>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d023      	beq.n	8002d4e <TIM_Base_SetConfig+0xb2>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a2a      	ldr	r2, [pc, #168]	@ (8002db4 <TIM_Base_SetConfig+0x118>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d01f      	beq.n	8002d4e <TIM_Base_SetConfig+0xb2>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a29      	ldr	r2, [pc, #164]	@ (8002db8 <TIM_Base_SetConfig+0x11c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d01b      	beq.n	8002d4e <TIM_Base_SetConfig+0xb2>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a28      	ldr	r2, [pc, #160]	@ (8002dbc <TIM_Base_SetConfig+0x120>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d017      	beq.n	8002d4e <TIM_Base_SetConfig+0xb2>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a27      	ldr	r2, [pc, #156]	@ (8002dc0 <TIM_Base_SetConfig+0x124>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d013      	beq.n	8002d4e <TIM_Base_SetConfig+0xb2>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a26      	ldr	r2, [pc, #152]	@ (8002dc4 <TIM_Base_SetConfig+0x128>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d00f      	beq.n	8002d4e <TIM_Base_SetConfig+0xb2>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a25      	ldr	r2, [pc, #148]	@ (8002dc8 <TIM_Base_SetConfig+0x12c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00b      	beq.n	8002d4e <TIM_Base_SetConfig+0xb2>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a24      	ldr	r2, [pc, #144]	@ (8002dcc <TIM_Base_SetConfig+0x130>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d007      	beq.n	8002d4e <TIM_Base_SetConfig+0xb2>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a23      	ldr	r2, [pc, #140]	@ (8002dd0 <TIM_Base_SetConfig+0x134>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d003      	beq.n	8002d4e <TIM_Base_SetConfig+0xb2>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a22      	ldr	r2, [pc, #136]	@ (8002dd4 <TIM_Base_SetConfig+0x138>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d108      	bne.n	8002d60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a09      	ldr	r2, [pc, #36]	@ (8002dac <TIM_Base_SetConfig+0x110>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d003      	beq.n	8002d94 <TIM_Base_SetConfig+0xf8>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a0b      	ldr	r2, [pc, #44]	@ (8002dbc <TIM_Base_SetConfig+0x120>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d103      	bne.n	8002d9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	691a      	ldr	r2, [r3, #16]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	615a      	str	r2, [r3, #20]
}
 8002da2:	bf00      	nop
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr
 8002dac:	40010000 	.word	0x40010000
 8002db0:	40000400 	.word	0x40000400
 8002db4:	40000800 	.word	0x40000800
 8002db8:	40000c00 	.word	0x40000c00
 8002dbc:	40010400 	.word	0x40010400
 8002dc0:	40014000 	.word	0x40014000
 8002dc4:	40014400 	.word	0x40014400
 8002dc8:	40014800 	.word	0x40014800
 8002dcc:	40001800 	.word	0x40001800
 8002dd0:	40001c00 	.word	0x40001c00
 8002dd4:	40002000 	.word	0x40002000

08002dd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	f023 0201 	bic.w	r2, r3, #1
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f023 030a 	bic.w	r3, r3, #10
 8002e14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	621a      	str	r2, [r3, #32]
}
 8002e2a:	bf00      	nop
 8002e2c:	371c      	adds	r7, #28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr

08002e34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	f023 0210 	bic.w	r2, r3, #16
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	031b      	lsls	r3, r3, #12
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002e70:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	621a      	str	r2, [r3, #32]
}
 8002e88:	bf00      	nop
 8002e8a:	371c      	adds	r7, #28
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr

08002e92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b085      	sub	sp, #20
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
 8002e9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ea8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f043 0307 	orr.w	r3, r3, #7
 8002eb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	609a      	str	r2, [r3, #8]
}
 8002ebc:	bf00      	nop
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr

08002ec6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b087      	sub	sp, #28
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	60f8      	str	r0, [r7, #12]
 8002ece:	60b9      	str	r1, [r7, #8]
 8002ed0:	607a      	str	r2, [r7, #4]
 8002ed2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ee0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	021a      	lsls	r2, r3, #8
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	609a      	str	r2, [r3, #8]
}
 8002efa:	bf00      	nop
 8002efc:	371c      	adds	r7, #28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr

08002f04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d101      	bne.n	8002f1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e05a      	b.n	8002fd2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a20      	ldr	r2, [pc, #128]	@ (8002fdc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d022      	beq.n	8002fa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f68:	d01d      	beq.n	8002fa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a1c      	ldr	r2, [pc, #112]	@ (8002fe0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d018      	beq.n	8002fa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a1a      	ldr	r2, [pc, #104]	@ (8002fe4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d013      	beq.n	8002fa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a19      	ldr	r2, [pc, #100]	@ (8002fe8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d00e      	beq.n	8002fa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a17      	ldr	r2, [pc, #92]	@ (8002fec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d009      	beq.n	8002fa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a16      	ldr	r2, [pc, #88]	@ (8002ff0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d004      	beq.n	8002fa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a14      	ldr	r2, [pc, #80]	@ (8002ff4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d10c      	bne.n	8002fc0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	68ba      	ldr	r2, [r7, #8]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3714      	adds	r7, #20
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr
 8002fdc:	40010000 	.word	0x40010000
 8002fe0:	40000400 	.word	0x40000400
 8002fe4:	40000800 	.word	0x40000800
 8002fe8:	40000c00 	.word	0x40000c00
 8002fec:	40010400 	.word	0x40010400
 8002ff0:	40014000 	.word	0x40014000
 8002ff4:	40001800 	.word	0x40001800

08002ff8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr

0800300a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800300a:	b480      	push	{r7}
 800300c:	b083      	sub	sp, #12
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr

0800301c <exit>:
 800301c:	b508      	push	{r3, lr}
 800301e:	4b06      	ldr	r3, [pc, #24]	@ (8003038 <exit+0x1c>)
 8003020:	4604      	mov	r4, r0
 8003022:	b113      	cbz	r3, 800302a <exit+0xe>
 8003024:	2100      	movs	r1, #0
 8003026:	f3af 8000 	nop.w
 800302a:	4b04      	ldr	r3, [pc, #16]	@ (800303c <exit+0x20>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	b103      	cbz	r3, 8003032 <exit+0x16>
 8003030:	4798      	blx	r3
 8003032:	4620      	mov	r0, r4
 8003034:	f7fd ffce 	bl	8000fd4 <_exit>
 8003038:	00000000 	.word	0x00000000
 800303c:	20000328 	.word	0x20000328

08003040 <std>:
 8003040:	2300      	movs	r3, #0
 8003042:	b510      	push	{r4, lr}
 8003044:	4604      	mov	r4, r0
 8003046:	e9c0 3300 	strd	r3, r3, [r0]
 800304a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800304e:	6083      	str	r3, [r0, #8]
 8003050:	8181      	strh	r1, [r0, #12]
 8003052:	6643      	str	r3, [r0, #100]	@ 0x64
 8003054:	81c2      	strh	r2, [r0, #14]
 8003056:	6183      	str	r3, [r0, #24]
 8003058:	4619      	mov	r1, r3
 800305a:	2208      	movs	r2, #8
 800305c:	305c      	adds	r0, #92	@ 0x5c
 800305e:	f000 f9e7 	bl	8003430 <memset>
 8003062:	4b0d      	ldr	r3, [pc, #52]	@ (8003098 <std+0x58>)
 8003064:	6224      	str	r4, [r4, #32]
 8003066:	6263      	str	r3, [r4, #36]	@ 0x24
 8003068:	4b0c      	ldr	r3, [pc, #48]	@ (800309c <std+0x5c>)
 800306a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800306c:	4b0c      	ldr	r3, [pc, #48]	@ (80030a0 <std+0x60>)
 800306e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003070:	4b0c      	ldr	r3, [pc, #48]	@ (80030a4 <std+0x64>)
 8003072:	6323      	str	r3, [r4, #48]	@ 0x30
 8003074:	4b0c      	ldr	r3, [pc, #48]	@ (80030a8 <std+0x68>)
 8003076:	429c      	cmp	r4, r3
 8003078:	d006      	beq.n	8003088 <std+0x48>
 800307a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800307e:	4294      	cmp	r4, r2
 8003080:	d002      	beq.n	8003088 <std+0x48>
 8003082:	33d0      	adds	r3, #208	@ 0xd0
 8003084:	429c      	cmp	r4, r3
 8003086:	d105      	bne.n	8003094 <std+0x54>
 8003088:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800308c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003090:	f000 ba46 	b.w	8003520 <__retarget_lock_init_recursive>
 8003094:	bd10      	pop	{r4, pc}
 8003096:	bf00      	nop
 8003098:	08003281 	.word	0x08003281
 800309c:	080032a3 	.word	0x080032a3
 80030a0:	080032db 	.word	0x080032db
 80030a4:	080032ff 	.word	0x080032ff
 80030a8:	200001f0 	.word	0x200001f0

080030ac <stdio_exit_handler>:
 80030ac:	4a02      	ldr	r2, [pc, #8]	@ (80030b8 <stdio_exit_handler+0xc>)
 80030ae:	4903      	ldr	r1, [pc, #12]	@ (80030bc <stdio_exit_handler+0x10>)
 80030b0:	4803      	ldr	r0, [pc, #12]	@ (80030c0 <stdio_exit_handler+0x14>)
 80030b2:	f000 b869 	b.w	8003188 <_fwalk_sglue>
 80030b6:	bf00      	nop
 80030b8:	20000010 	.word	0x20000010
 80030bc:	08003815 	.word	0x08003815
 80030c0:	20000020 	.word	0x20000020

080030c4 <cleanup_stdio>:
 80030c4:	6841      	ldr	r1, [r0, #4]
 80030c6:	4b0c      	ldr	r3, [pc, #48]	@ (80030f8 <cleanup_stdio+0x34>)
 80030c8:	b510      	push	{r4, lr}
 80030ca:	4299      	cmp	r1, r3
 80030cc:	4604      	mov	r4, r0
 80030ce:	d001      	beq.n	80030d4 <cleanup_stdio+0x10>
 80030d0:	f000 fba0 	bl	8003814 <_fflush_r>
 80030d4:	68a1      	ldr	r1, [r4, #8]
 80030d6:	4b09      	ldr	r3, [pc, #36]	@ (80030fc <cleanup_stdio+0x38>)
 80030d8:	4299      	cmp	r1, r3
 80030da:	d002      	beq.n	80030e2 <cleanup_stdio+0x1e>
 80030dc:	4620      	mov	r0, r4
 80030de:	f000 fb99 	bl	8003814 <_fflush_r>
 80030e2:	68e1      	ldr	r1, [r4, #12]
 80030e4:	4b06      	ldr	r3, [pc, #24]	@ (8003100 <cleanup_stdio+0x3c>)
 80030e6:	4299      	cmp	r1, r3
 80030e8:	d004      	beq.n	80030f4 <cleanup_stdio+0x30>
 80030ea:	4620      	mov	r0, r4
 80030ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030f0:	f000 bb90 	b.w	8003814 <_fflush_r>
 80030f4:	bd10      	pop	{r4, pc}
 80030f6:	bf00      	nop
 80030f8:	200001f0 	.word	0x200001f0
 80030fc:	20000258 	.word	0x20000258
 8003100:	200002c0 	.word	0x200002c0

08003104 <global_stdio_init.part.0>:
 8003104:	b510      	push	{r4, lr}
 8003106:	4b0b      	ldr	r3, [pc, #44]	@ (8003134 <global_stdio_init.part.0+0x30>)
 8003108:	4c0b      	ldr	r4, [pc, #44]	@ (8003138 <global_stdio_init.part.0+0x34>)
 800310a:	4a0c      	ldr	r2, [pc, #48]	@ (800313c <global_stdio_init.part.0+0x38>)
 800310c:	4620      	mov	r0, r4
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	2104      	movs	r1, #4
 8003112:	2200      	movs	r2, #0
 8003114:	f7ff ff94 	bl	8003040 <std>
 8003118:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800311c:	2201      	movs	r2, #1
 800311e:	2109      	movs	r1, #9
 8003120:	f7ff ff8e 	bl	8003040 <std>
 8003124:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003128:	2202      	movs	r2, #2
 800312a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800312e:	2112      	movs	r1, #18
 8003130:	f7ff bf86 	b.w	8003040 <std>
 8003134:	20000328 	.word	0x20000328
 8003138:	200001f0 	.word	0x200001f0
 800313c:	080030ad 	.word	0x080030ad

08003140 <__sfp_lock_acquire>:
 8003140:	4801      	ldr	r0, [pc, #4]	@ (8003148 <__sfp_lock_acquire+0x8>)
 8003142:	f000 b9ee 	b.w	8003522 <__retarget_lock_acquire_recursive>
 8003146:	bf00      	nop
 8003148:	20000331 	.word	0x20000331

0800314c <__sfp_lock_release>:
 800314c:	4801      	ldr	r0, [pc, #4]	@ (8003154 <__sfp_lock_release+0x8>)
 800314e:	f000 b9e9 	b.w	8003524 <__retarget_lock_release_recursive>
 8003152:	bf00      	nop
 8003154:	20000331 	.word	0x20000331

08003158 <__sinit>:
 8003158:	b510      	push	{r4, lr}
 800315a:	4604      	mov	r4, r0
 800315c:	f7ff fff0 	bl	8003140 <__sfp_lock_acquire>
 8003160:	6a23      	ldr	r3, [r4, #32]
 8003162:	b11b      	cbz	r3, 800316c <__sinit+0x14>
 8003164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003168:	f7ff bff0 	b.w	800314c <__sfp_lock_release>
 800316c:	4b04      	ldr	r3, [pc, #16]	@ (8003180 <__sinit+0x28>)
 800316e:	6223      	str	r3, [r4, #32]
 8003170:	4b04      	ldr	r3, [pc, #16]	@ (8003184 <__sinit+0x2c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1f5      	bne.n	8003164 <__sinit+0xc>
 8003178:	f7ff ffc4 	bl	8003104 <global_stdio_init.part.0>
 800317c:	e7f2      	b.n	8003164 <__sinit+0xc>
 800317e:	bf00      	nop
 8003180:	080030c5 	.word	0x080030c5
 8003184:	20000328 	.word	0x20000328

08003188 <_fwalk_sglue>:
 8003188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800318c:	4607      	mov	r7, r0
 800318e:	4688      	mov	r8, r1
 8003190:	4614      	mov	r4, r2
 8003192:	2600      	movs	r6, #0
 8003194:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003198:	f1b9 0901 	subs.w	r9, r9, #1
 800319c:	d505      	bpl.n	80031aa <_fwalk_sglue+0x22>
 800319e:	6824      	ldr	r4, [r4, #0]
 80031a0:	2c00      	cmp	r4, #0
 80031a2:	d1f7      	bne.n	8003194 <_fwalk_sglue+0xc>
 80031a4:	4630      	mov	r0, r6
 80031a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031aa:	89ab      	ldrh	r3, [r5, #12]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d907      	bls.n	80031c0 <_fwalk_sglue+0x38>
 80031b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80031b4:	3301      	adds	r3, #1
 80031b6:	d003      	beq.n	80031c0 <_fwalk_sglue+0x38>
 80031b8:	4629      	mov	r1, r5
 80031ba:	4638      	mov	r0, r7
 80031bc:	47c0      	blx	r8
 80031be:	4306      	orrs	r6, r0
 80031c0:	3568      	adds	r5, #104	@ 0x68
 80031c2:	e7e9      	b.n	8003198 <_fwalk_sglue+0x10>

080031c4 <_puts_r>:
 80031c4:	6a03      	ldr	r3, [r0, #32]
 80031c6:	b570      	push	{r4, r5, r6, lr}
 80031c8:	4605      	mov	r5, r0
 80031ca:	460e      	mov	r6, r1
 80031cc:	6884      	ldr	r4, [r0, #8]
 80031ce:	b90b      	cbnz	r3, 80031d4 <_puts_r+0x10>
 80031d0:	f7ff ffc2 	bl	8003158 <__sinit>
 80031d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80031d6:	07db      	lsls	r3, r3, #31
 80031d8:	d405      	bmi.n	80031e6 <_puts_r+0x22>
 80031da:	89a3      	ldrh	r3, [r4, #12]
 80031dc:	0598      	lsls	r0, r3, #22
 80031de:	d402      	bmi.n	80031e6 <_puts_r+0x22>
 80031e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80031e2:	f000 f99e 	bl	8003522 <__retarget_lock_acquire_recursive>
 80031e6:	89a3      	ldrh	r3, [r4, #12]
 80031e8:	0719      	lsls	r1, r3, #28
 80031ea:	d502      	bpl.n	80031f2 <_puts_r+0x2e>
 80031ec:	6923      	ldr	r3, [r4, #16]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d135      	bne.n	800325e <_puts_r+0x9a>
 80031f2:	4621      	mov	r1, r4
 80031f4:	4628      	mov	r0, r5
 80031f6:	f000 f8c5 	bl	8003384 <__swsetup_r>
 80031fa:	b380      	cbz	r0, 800325e <_puts_r+0x9a>
 80031fc:	f04f 35ff 	mov.w	r5, #4294967295
 8003200:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003202:	07da      	lsls	r2, r3, #31
 8003204:	d405      	bmi.n	8003212 <_puts_r+0x4e>
 8003206:	89a3      	ldrh	r3, [r4, #12]
 8003208:	059b      	lsls	r3, r3, #22
 800320a:	d402      	bmi.n	8003212 <_puts_r+0x4e>
 800320c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800320e:	f000 f989 	bl	8003524 <__retarget_lock_release_recursive>
 8003212:	4628      	mov	r0, r5
 8003214:	bd70      	pop	{r4, r5, r6, pc}
 8003216:	2b00      	cmp	r3, #0
 8003218:	da04      	bge.n	8003224 <_puts_r+0x60>
 800321a:	69a2      	ldr	r2, [r4, #24]
 800321c:	429a      	cmp	r2, r3
 800321e:	dc17      	bgt.n	8003250 <_puts_r+0x8c>
 8003220:	290a      	cmp	r1, #10
 8003222:	d015      	beq.n	8003250 <_puts_r+0x8c>
 8003224:	6823      	ldr	r3, [r4, #0]
 8003226:	1c5a      	adds	r2, r3, #1
 8003228:	6022      	str	r2, [r4, #0]
 800322a:	7019      	strb	r1, [r3, #0]
 800322c:	68a3      	ldr	r3, [r4, #8]
 800322e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003232:	3b01      	subs	r3, #1
 8003234:	60a3      	str	r3, [r4, #8]
 8003236:	2900      	cmp	r1, #0
 8003238:	d1ed      	bne.n	8003216 <_puts_r+0x52>
 800323a:	2b00      	cmp	r3, #0
 800323c:	da11      	bge.n	8003262 <_puts_r+0x9e>
 800323e:	4622      	mov	r2, r4
 8003240:	210a      	movs	r1, #10
 8003242:	4628      	mov	r0, r5
 8003244:	f000 f85f 	bl	8003306 <__swbuf_r>
 8003248:	3001      	adds	r0, #1
 800324a:	d0d7      	beq.n	80031fc <_puts_r+0x38>
 800324c:	250a      	movs	r5, #10
 800324e:	e7d7      	b.n	8003200 <_puts_r+0x3c>
 8003250:	4622      	mov	r2, r4
 8003252:	4628      	mov	r0, r5
 8003254:	f000 f857 	bl	8003306 <__swbuf_r>
 8003258:	3001      	adds	r0, #1
 800325a:	d1e7      	bne.n	800322c <_puts_r+0x68>
 800325c:	e7ce      	b.n	80031fc <_puts_r+0x38>
 800325e:	3e01      	subs	r6, #1
 8003260:	e7e4      	b.n	800322c <_puts_r+0x68>
 8003262:	6823      	ldr	r3, [r4, #0]
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	6022      	str	r2, [r4, #0]
 8003268:	220a      	movs	r2, #10
 800326a:	701a      	strb	r2, [r3, #0]
 800326c:	e7ee      	b.n	800324c <_puts_r+0x88>
	...

08003270 <puts>:
 8003270:	4b02      	ldr	r3, [pc, #8]	@ (800327c <puts+0xc>)
 8003272:	4601      	mov	r1, r0
 8003274:	6818      	ldr	r0, [r3, #0]
 8003276:	f7ff bfa5 	b.w	80031c4 <_puts_r>
 800327a:	bf00      	nop
 800327c:	2000001c 	.word	0x2000001c

08003280 <__sread>:
 8003280:	b510      	push	{r4, lr}
 8003282:	460c      	mov	r4, r1
 8003284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003288:	f000 f8fc 	bl	8003484 <_read_r>
 800328c:	2800      	cmp	r0, #0
 800328e:	bfab      	itete	ge
 8003290:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003292:	89a3      	ldrhlt	r3, [r4, #12]
 8003294:	181b      	addge	r3, r3, r0
 8003296:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800329a:	bfac      	ite	ge
 800329c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800329e:	81a3      	strhlt	r3, [r4, #12]
 80032a0:	bd10      	pop	{r4, pc}

080032a2 <__swrite>:
 80032a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032a6:	461f      	mov	r7, r3
 80032a8:	898b      	ldrh	r3, [r1, #12]
 80032aa:	4605      	mov	r5, r0
 80032ac:	05db      	lsls	r3, r3, #23
 80032ae:	460c      	mov	r4, r1
 80032b0:	4616      	mov	r6, r2
 80032b2:	d505      	bpl.n	80032c0 <__swrite+0x1e>
 80032b4:	2302      	movs	r3, #2
 80032b6:	2200      	movs	r2, #0
 80032b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032bc:	f000 f8d0 	bl	8003460 <_lseek_r>
 80032c0:	89a3      	ldrh	r3, [r4, #12]
 80032c2:	4632      	mov	r2, r6
 80032c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80032c8:	81a3      	strh	r3, [r4, #12]
 80032ca:	4628      	mov	r0, r5
 80032cc:	463b      	mov	r3, r7
 80032ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032d6:	f000 b8e7 	b.w	80034a8 <_write_r>

080032da <__sseek>:
 80032da:	b510      	push	{r4, lr}
 80032dc:	460c      	mov	r4, r1
 80032de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032e2:	f000 f8bd 	bl	8003460 <_lseek_r>
 80032e6:	1c43      	adds	r3, r0, #1
 80032e8:	89a3      	ldrh	r3, [r4, #12]
 80032ea:	bf15      	itete	ne
 80032ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80032ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80032f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80032f6:	81a3      	strheq	r3, [r4, #12]
 80032f8:	bf18      	it	ne
 80032fa:	81a3      	strhne	r3, [r4, #12]
 80032fc:	bd10      	pop	{r4, pc}

080032fe <__sclose>:
 80032fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003302:	f000 b89d 	b.w	8003440 <_close_r>

08003306 <__swbuf_r>:
 8003306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003308:	460e      	mov	r6, r1
 800330a:	4614      	mov	r4, r2
 800330c:	4605      	mov	r5, r0
 800330e:	b118      	cbz	r0, 8003318 <__swbuf_r+0x12>
 8003310:	6a03      	ldr	r3, [r0, #32]
 8003312:	b90b      	cbnz	r3, 8003318 <__swbuf_r+0x12>
 8003314:	f7ff ff20 	bl	8003158 <__sinit>
 8003318:	69a3      	ldr	r3, [r4, #24]
 800331a:	60a3      	str	r3, [r4, #8]
 800331c:	89a3      	ldrh	r3, [r4, #12]
 800331e:	071a      	lsls	r2, r3, #28
 8003320:	d501      	bpl.n	8003326 <__swbuf_r+0x20>
 8003322:	6923      	ldr	r3, [r4, #16]
 8003324:	b943      	cbnz	r3, 8003338 <__swbuf_r+0x32>
 8003326:	4621      	mov	r1, r4
 8003328:	4628      	mov	r0, r5
 800332a:	f000 f82b 	bl	8003384 <__swsetup_r>
 800332e:	b118      	cbz	r0, 8003338 <__swbuf_r+0x32>
 8003330:	f04f 37ff 	mov.w	r7, #4294967295
 8003334:	4638      	mov	r0, r7
 8003336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003338:	6823      	ldr	r3, [r4, #0]
 800333a:	6922      	ldr	r2, [r4, #16]
 800333c:	b2f6      	uxtb	r6, r6
 800333e:	1a98      	subs	r0, r3, r2
 8003340:	6963      	ldr	r3, [r4, #20]
 8003342:	4637      	mov	r7, r6
 8003344:	4283      	cmp	r3, r0
 8003346:	dc05      	bgt.n	8003354 <__swbuf_r+0x4e>
 8003348:	4621      	mov	r1, r4
 800334a:	4628      	mov	r0, r5
 800334c:	f000 fa62 	bl	8003814 <_fflush_r>
 8003350:	2800      	cmp	r0, #0
 8003352:	d1ed      	bne.n	8003330 <__swbuf_r+0x2a>
 8003354:	68a3      	ldr	r3, [r4, #8]
 8003356:	3b01      	subs	r3, #1
 8003358:	60a3      	str	r3, [r4, #8]
 800335a:	6823      	ldr	r3, [r4, #0]
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	6022      	str	r2, [r4, #0]
 8003360:	701e      	strb	r6, [r3, #0]
 8003362:	6962      	ldr	r2, [r4, #20]
 8003364:	1c43      	adds	r3, r0, #1
 8003366:	429a      	cmp	r2, r3
 8003368:	d004      	beq.n	8003374 <__swbuf_r+0x6e>
 800336a:	89a3      	ldrh	r3, [r4, #12]
 800336c:	07db      	lsls	r3, r3, #31
 800336e:	d5e1      	bpl.n	8003334 <__swbuf_r+0x2e>
 8003370:	2e0a      	cmp	r6, #10
 8003372:	d1df      	bne.n	8003334 <__swbuf_r+0x2e>
 8003374:	4621      	mov	r1, r4
 8003376:	4628      	mov	r0, r5
 8003378:	f000 fa4c 	bl	8003814 <_fflush_r>
 800337c:	2800      	cmp	r0, #0
 800337e:	d0d9      	beq.n	8003334 <__swbuf_r+0x2e>
 8003380:	e7d6      	b.n	8003330 <__swbuf_r+0x2a>
	...

08003384 <__swsetup_r>:
 8003384:	b538      	push	{r3, r4, r5, lr}
 8003386:	4b29      	ldr	r3, [pc, #164]	@ (800342c <__swsetup_r+0xa8>)
 8003388:	4605      	mov	r5, r0
 800338a:	6818      	ldr	r0, [r3, #0]
 800338c:	460c      	mov	r4, r1
 800338e:	b118      	cbz	r0, 8003398 <__swsetup_r+0x14>
 8003390:	6a03      	ldr	r3, [r0, #32]
 8003392:	b90b      	cbnz	r3, 8003398 <__swsetup_r+0x14>
 8003394:	f7ff fee0 	bl	8003158 <__sinit>
 8003398:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800339c:	0719      	lsls	r1, r3, #28
 800339e:	d422      	bmi.n	80033e6 <__swsetup_r+0x62>
 80033a0:	06da      	lsls	r2, r3, #27
 80033a2:	d407      	bmi.n	80033b4 <__swsetup_r+0x30>
 80033a4:	2209      	movs	r2, #9
 80033a6:	602a      	str	r2, [r5, #0]
 80033a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033ac:	f04f 30ff 	mov.w	r0, #4294967295
 80033b0:	81a3      	strh	r3, [r4, #12]
 80033b2:	e033      	b.n	800341c <__swsetup_r+0x98>
 80033b4:	0758      	lsls	r0, r3, #29
 80033b6:	d512      	bpl.n	80033de <__swsetup_r+0x5a>
 80033b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80033ba:	b141      	cbz	r1, 80033ce <__swsetup_r+0x4a>
 80033bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80033c0:	4299      	cmp	r1, r3
 80033c2:	d002      	beq.n	80033ca <__swsetup_r+0x46>
 80033c4:	4628      	mov	r0, r5
 80033c6:	f000 f8af 	bl	8003528 <_free_r>
 80033ca:	2300      	movs	r3, #0
 80033cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80033ce:	89a3      	ldrh	r3, [r4, #12]
 80033d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80033d4:	81a3      	strh	r3, [r4, #12]
 80033d6:	2300      	movs	r3, #0
 80033d8:	6063      	str	r3, [r4, #4]
 80033da:	6923      	ldr	r3, [r4, #16]
 80033dc:	6023      	str	r3, [r4, #0]
 80033de:	89a3      	ldrh	r3, [r4, #12]
 80033e0:	f043 0308 	orr.w	r3, r3, #8
 80033e4:	81a3      	strh	r3, [r4, #12]
 80033e6:	6923      	ldr	r3, [r4, #16]
 80033e8:	b94b      	cbnz	r3, 80033fe <__swsetup_r+0x7a>
 80033ea:	89a3      	ldrh	r3, [r4, #12]
 80033ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80033f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033f4:	d003      	beq.n	80033fe <__swsetup_r+0x7a>
 80033f6:	4621      	mov	r1, r4
 80033f8:	4628      	mov	r0, r5
 80033fa:	f000 fa58 	bl	80038ae <__smakebuf_r>
 80033fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003402:	f013 0201 	ands.w	r2, r3, #1
 8003406:	d00a      	beq.n	800341e <__swsetup_r+0x9a>
 8003408:	2200      	movs	r2, #0
 800340a:	60a2      	str	r2, [r4, #8]
 800340c:	6962      	ldr	r2, [r4, #20]
 800340e:	4252      	negs	r2, r2
 8003410:	61a2      	str	r2, [r4, #24]
 8003412:	6922      	ldr	r2, [r4, #16]
 8003414:	b942      	cbnz	r2, 8003428 <__swsetup_r+0xa4>
 8003416:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800341a:	d1c5      	bne.n	80033a8 <__swsetup_r+0x24>
 800341c:	bd38      	pop	{r3, r4, r5, pc}
 800341e:	0799      	lsls	r1, r3, #30
 8003420:	bf58      	it	pl
 8003422:	6962      	ldrpl	r2, [r4, #20]
 8003424:	60a2      	str	r2, [r4, #8]
 8003426:	e7f4      	b.n	8003412 <__swsetup_r+0x8e>
 8003428:	2000      	movs	r0, #0
 800342a:	e7f7      	b.n	800341c <__swsetup_r+0x98>
 800342c:	2000001c 	.word	0x2000001c

08003430 <memset>:
 8003430:	4603      	mov	r3, r0
 8003432:	4402      	add	r2, r0
 8003434:	4293      	cmp	r3, r2
 8003436:	d100      	bne.n	800343a <memset+0xa>
 8003438:	4770      	bx	lr
 800343a:	f803 1b01 	strb.w	r1, [r3], #1
 800343e:	e7f9      	b.n	8003434 <memset+0x4>

08003440 <_close_r>:
 8003440:	b538      	push	{r3, r4, r5, lr}
 8003442:	2300      	movs	r3, #0
 8003444:	4d05      	ldr	r5, [pc, #20]	@ (800345c <_close_r+0x1c>)
 8003446:	4604      	mov	r4, r0
 8003448:	4608      	mov	r0, r1
 800344a:	602b      	str	r3, [r5, #0]
 800344c:	f7fd fdea 	bl	8001024 <_close>
 8003450:	1c43      	adds	r3, r0, #1
 8003452:	d102      	bne.n	800345a <_close_r+0x1a>
 8003454:	682b      	ldr	r3, [r5, #0]
 8003456:	b103      	cbz	r3, 800345a <_close_r+0x1a>
 8003458:	6023      	str	r3, [r4, #0]
 800345a:	bd38      	pop	{r3, r4, r5, pc}
 800345c:	2000032c 	.word	0x2000032c

08003460 <_lseek_r>:
 8003460:	b538      	push	{r3, r4, r5, lr}
 8003462:	4604      	mov	r4, r0
 8003464:	4608      	mov	r0, r1
 8003466:	4611      	mov	r1, r2
 8003468:	2200      	movs	r2, #0
 800346a:	4d05      	ldr	r5, [pc, #20]	@ (8003480 <_lseek_r+0x20>)
 800346c:	602a      	str	r2, [r5, #0]
 800346e:	461a      	mov	r2, r3
 8003470:	f7fd fdfc 	bl	800106c <_lseek>
 8003474:	1c43      	adds	r3, r0, #1
 8003476:	d102      	bne.n	800347e <_lseek_r+0x1e>
 8003478:	682b      	ldr	r3, [r5, #0]
 800347a:	b103      	cbz	r3, 800347e <_lseek_r+0x1e>
 800347c:	6023      	str	r3, [r4, #0]
 800347e:	bd38      	pop	{r3, r4, r5, pc}
 8003480:	2000032c 	.word	0x2000032c

08003484 <_read_r>:
 8003484:	b538      	push	{r3, r4, r5, lr}
 8003486:	4604      	mov	r4, r0
 8003488:	4608      	mov	r0, r1
 800348a:	4611      	mov	r1, r2
 800348c:	2200      	movs	r2, #0
 800348e:	4d05      	ldr	r5, [pc, #20]	@ (80034a4 <_read_r+0x20>)
 8003490:	602a      	str	r2, [r5, #0]
 8003492:	461a      	mov	r2, r3
 8003494:	f7fd fda9 	bl	8000fea <_read>
 8003498:	1c43      	adds	r3, r0, #1
 800349a:	d102      	bne.n	80034a2 <_read_r+0x1e>
 800349c:	682b      	ldr	r3, [r5, #0]
 800349e:	b103      	cbz	r3, 80034a2 <_read_r+0x1e>
 80034a0:	6023      	str	r3, [r4, #0]
 80034a2:	bd38      	pop	{r3, r4, r5, pc}
 80034a4:	2000032c 	.word	0x2000032c

080034a8 <_write_r>:
 80034a8:	b538      	push	{r3, r4, r5, lr}
 80034aa:	4604      	mov	r4, r0
 80034ac:	4608      	mov	r0, r1
 80034ae:	4611      	mov	r1, r2
 80034b0:	2200      	movs	r2, #0
 80034b2:	4d05      	ldr	r5, [pc, #20]	@ (80034c8 <_write_r+0x20>)
 80034b4:	602a      	str	r2, [r5, #0]
 80034b6:	461a      	mov	r2, r3
 80034b8:	f7fd faac 	bl	8000a14 <_write>
 80034bc:	1c43      	adds	r3, r0, #1
 80034be:	d102      	bne.n	80034c6 <_write_r+0x1e>
 80034c0:	682b      	ldr	r3, [r5, #0]
 80034c2:	b103      	cbz	r3, 80034c6 <_write_r+0x1e>
 80034c4:	6023      	str	r3, [r4, #0]
 80034c6:	bd38      	pop	{r3, r4, r5, pc}
 80034c8:	2000032c 	.word	0x2000032c

080034cc <__errno>:
 80034cc:	4b01      	ldr	r3, [pc, #4]	@ (80034d4 <__errno+0x8>)
 80034ce:	6818      	ldr	r0, [r3, #0]
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	2000001c 	.word	0x2000001c

080034d8 <__libc_init_array>:
 80034d8:	b570      	push	{r4, r5, r6, lr}
 80034da:	2600      	movs	r6, #0
 80034dc:	4d0c      	ldr	r5, [pc, #48]	@ (8003510 <__libc_init_array+0x38>)
 80034de:	4c0d      	ldr	r4, [pc, #52]	@ (8003514 <__libc_init_array+0x3c>)
 80034e0:	1b64      	subs	r4, r4, r5
 80034e2:	10a4      	asrs	r4, r4, #2
 80034e4:	42a6      	cmp	r6, r4
 80034e6:	d109      	bne.n	80034fc <__libc_init_array+0x24>
 80034e8:	f000 fa50 	bl	800398c <_init>
 80034ec:	2600      	movs	r6, #0
 80034ee:	4d0a      	ldr	r5, [pc, #40]	@ (8003518 <__libc_init_array+0x40>)
 80034f0:	4c0a      	ldr	r4, [pc, #40]	@ (800351c <__libc_init_array+0x44>)
 80034f2:	1b64      	subs	r4, r4, r5
 80034f4:	10a4      	asrs	r4, r4, #2
 80034f6:	42a6      	cmp	r6, r4
 80034f8:	d105      	bne.n	8003506 <__libc_init_array+0x2e>
 80034fa:	bd70      	pop	{r4, r5, r6, pc}
 80034fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003500:	4798      	blx	r3
 8003502:	3601      	adds	r6, #1
 8003504:	e7ee      	b.n	80034e4 <__libc_init_array+0xc>
 8003506:	f855 3b04 	ldr.w	r3, [r5], #4
 800350a:	4798      	blx	r3
 800350c:	3601      	adds	r6, #1
 800350e:	e7f2      	b.n	80034f6 <__libc_init_array+0x1e>
 8003510:	08003a2c 	.word	0x08003a2c
 8003514:	08003a2c 	.word	0x08003a2c
 8003518:	08003a2c 	.word	0x08003a2c
 800351c:	08003a30 	.word	0x08003a30

08003520 <__retarget_lock_init_recursive>:
 8003520:	4770      	bx	lr

08003522 <__retarget_lock_acquire_recursive>:
 8003522:	4770      	bx	lr

08003524 <__retarget_lock_release_recursive>:
 8003524:	4770      	bx	lr
	...

08003528 <_free_r>:
 8003528:	b538      	push	{r3, r4, r5, lr}
 800352a:	4605      	mov	r5, r0
 800352c:	2900      	cmp	r1, #0
 800352e:	d040      	beq.n	80035b2 <_free_r+0x8a>
 8003530:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003534:	1f0c      	subs	r4, r1, #4
 8003536:	2b00      	cmp	r3, #0
 8003538:	bfb8      	it	lt
 800353a:	18e4      	addlt	r4, r4, r3
 800353c:	f000 f8de 	bl	80036fc <__malloc_lock>
 8003540:	4a1c      	ldr	r2, [pc, #112]	@ (80035b4 <_free_r+0x8c>)
 8003542:	6813      	ldr	r3, [r2, #0]
 8003544:	b933      	cbnz	r3, 8003554 <_free_r+0x2c>
 8003546:	6063      	str	r3, [r4, #4]
 8003548:	6014      	str	r4, [r2, #0]
 800354a:	4628      	mov	r0, r5
 800354c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003550:	f000 b8da 	b.w	8003708 <__malloc_unlock>
 8003554:	42a3      	cmp	r3, r4
 8003556:	d908      	bls.n	800356a <_free_r+0x42>
 8003558:	6820      	ldr	r0, [r4, #0]
 800355a:	1821      	adds	r1, r4, r0
 800355c:	428b      	cmp	r3, r1
 800355e:	bf01      	itttt	eq
 8003560:	6819      	ldreq	r1, [r3, #0]
 8003562:	685b      	ldreq	r3, [r3, #4]
 8003564:	1809      	addeq	r1, r1, r0
 8003566:	6021      	streq	r1, [r4, #0]
 8003568:	e7ed      	b.n	8003546 <_free_r+0x1e>
 800356a:	461a      	mov	r2, r3
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	b10b      	cbz	r3, 8003574 <_free_r+0x4c>
 8003570:	42a3      	cmp	r3, r4
 8003572:	d9fa      	bls.n	800356a <_free_r+0x42>
 8003574:	6811      	ldr	r1, [r2, #0]
 8003576:	1850      	adds	r0, r2, r1
 8003578:	42a0      	cmp	r0, r4
 800357a:	d10b      	bne.n	8003594 <_free_r+0x6c>
 800357c:	6820      	ldr	r0, [r4, #0]
 800357e:	4401      	add	r1, r0
 8003580:	1850      	adds	r0, r2, r1
 8003582:	4283      	cmp	r3, r0
 8003584:	6011      	str	r1, [r2, #0]
 8003586:	d1e0      	bne.n	800354a <_free_r+0x22>
 8003588:	6818      	ldr	r0, [r3, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	4408      	add	r0, r1
 800358e:	6010      	str	r0, [r2, #0]
 8003590:	6053      	str	r3, [r2, #4]
 8003592:	e7da      	b.n	800354a <_free_r+0x22>
 8003594:	d902      	bls.n	800359c <_free_r+0x74>
 8003596:	230c      	movs	r3, #12
 8003598:	602b      	str	r3, [r5, #0]
 800359a:	e7d6      	b.n	800354a <_free_r+0x22>
 800359c:	6820      	ldr	r0, [r4, #0]
 800359e:	1821      	adds	r1, r4, r0
 80035a0:	428b      	cmp	r3, r1
 80035a2:	bf01      	itttt	eq
 80035a4:	6819      	ldreq	r1, [r3, #0]
 80035a6:	685b      	ldreq	r3, [r3, #4]
 80035a8:	1809      	addeq	r1, r1, r0
 80035aa:	6021      	streq	r1, [r4, #0]
 80035ac:	6063      	str	r3, [r4, #4]
 80035ae:	6054      	str	r4, [r2, #4]
 80035b0:	e7cb      	b.n	800354a <_free_r+0x22>
 80035b2:	bd38      	pop	{r3, r4, r5, pc}
 80035b4:	20000338 	.word	0x20000338

080035b8 <sbrk_aligned>:
 80035b8:	b570      	push	{r4, r5, r6, lr}
 80035ba:	4e0f      	ldr	r6, [pc, #60]	@ (80035f8 <sbrk_aligned+0x40>)
 80035bc:	460c      	mov	r4, r1
 80035be:	6831      	ldr	r1, [r6, #0]
 80035c0:	4605      	mov	r5, r0
 80035c2:	b911      	cbnz	r1, 80035ca <sbrk_aligned+0x12>
 80035c4:	f000 f9d2 	bl	800396c <_sbrk_r>
 80035c8:	6030      	str	r0, [r6, #0]
 80035ca:	4621      	mov	r1, r4
 80035cc:	4628      	mov	r0, r5
 80035ce:	f000 f9cd 	bl	800396c <_sbrk_r>
 80035d2:	1c43      	adds	r3, r0, #1
 80035d4:	d103      	bne.n	80035de <sbrk_aligned+0x26>
 80035d6:	f04f 34ff 	mov.w	r4, #4294967295
 80035da:	4620      	mov	r0, r4
 80035dc:	bd70      	pop	{r4, r5, r6, pc}
 80035de:	1cc4      	adds	r4, r0, #3
 80035e0:	f024 0403 	bic.w	r4, r4, #3
 80035e4:	42a0      	cmp	r0, r4
 80035e6:	d0f8      	beq.n	80035da <sbrk_aligned+0x22>
 80035e8:	1a21      	subs	r1, r4, r0
 80035ea:	4628      	mov	r0, r5
 80035ec:	f000 f9be 	bl	800396c <_sbrk_r>
 80035f0:	3001      	adds	r0, #1
 80035f2:	d1f2      	bne.n	80035da <sbrk_aligned+0x22>
 80035f4:	e7ef      	b.n	80035d6 <sbrk_aligned+0x1e>
 80035f6:	bf00      	nop
 80035f8:	20000334 	.word	0x20000334

080035fc <_malloc_r>:
 80035fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003600:	1ccd      	adds	r5, r1, #3
 8003602:	f025 0503 	bic.w	r5, r5, #3
 8003606:	3508      	adds	r5, #8
 8003608:	2d0c      	cmp	r5, #12
 800360a:	bf38      	it	cc
 800360c:	250c      	movcc	r5, #12
 800360e:	2d00      	cmp	r5, #0
 8003610:	4606      	mov	r6, r0
 8003612:	db01      	blt.n	8003618 <_malloc_r+0x1c>
 8003614:	42a9      	cmp	r1, r5
 8003616:	d904      	bls.n	8003622 <_malloc_r+0x26>
 8003618:	230c      	movs	r3, #12
 800361a:	6033      	str	r3, [r6, #0]
 800361c:	2000      	movs	r0, #0
 800361e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003622:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80036f8 <_malloc_r+0xfc>
 8003626:	f000 f869 	bl	80036fc <__malloc_lock>
 800362a:	f8d8 3000 	ldr.w	r3, [r8]
 800362e:	461c      	mov	r4, r3
 8003630:	bb44      	cbnz	r4, 8003684 <_malloc_r+0x88>
 8003632:	4629      	mov	r1, r5
 8003634:	4630      	mov	r0, r6
 8003636:	f7ff ffbf 	bl	80035b8 <sbrk_aligned>
 800363a:	1c43      	adds	r3, r0, #1
 800363c:	4604      	mov	r4, r0
 800363e:	d158      	bne.n	80036f2 <_malloc_r+0xf6>
 8003640:	f8d8 4000 	ldr.w	r4, [r8]
 8003644:	4627      	mov	r7, r4
 8003646:	2f00      	cmp	r7, #0
 8003648:	d143      	bne.n	80036d2 <_malloc_r+0xd6>
 800364a:	2c00      	cmp	r4, #0
 800364c:	d04b      	beq.n	80036e6 <_malloc_r+0xea>
 800364e:	6823      	ldr	r3, [r4, #0]
 8003650:	4639      	mov	r1, r7
 8003652:	4630      	mov	r0, r6
 8003654:	eb04 0903 	add.w	r9, r4, r3
 8003658:	f000 f988 	bl	800396c <_sbrk_r>
 800365c:	4581      	cmp	r9, r0
 800365e:	d142      	bne.n	80036e6 <_malloc_r+0xea>
 8003660:	6821      	ldr	r1, [r4, #0]
 8003662:	4630      	mov	r0, r6
 8003664:	1a6d      	subs	r5, r5, r1
 8003666:	4629      	mov	r1, r5
 8003668:	f7ff ffa6 	bl	80035b8 <sbrk_aligned>
 800366c:	3001      	adds	r0, #1
 800366e:	d03a      	beq.n	80036e6 <_malloc_r+0xea>
 8003670:	6823      	ldr	r3, [r4, #0]
 8003672:	442b      	add	r3, r5
 8003674:	6023      	str	r3, [r4, #0]
 8003676:	f8d8 3000 	ldr.w	r3, [r8]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	bb62      	cbnz	r2, 80036d8 <_malloc_r+0xdc>
 800367e:	f8c8 7000 	str.w	r7, [r8]
 8003682:	e00f      	b.n	80036a4 <_malloc_r+0xa8>
 8003684:	6822      	ldr	r2, [r4, #0]
 8003686:	1b52      	subs	r2, r2, r5
 8003688:	d420      	bmi.n	80036cc <_malloc_r+0xd0>
 800368a:	2a0b      	cmp	r2, #11
 800368c:	d917      	bls.n	80036be <_malloc_r+0xc2>
 800368e:	1961      	adds	r1, r4, r5
 8003690:	42a3      	cmp	r3, r4
 8003692:	6025      	str	r5, [r4, #0]
 8003694:	bf18      	it	ne
 8003696:	6059      	strne	r1, [r3, #4]
 8003698:	6863      	ldr	r3, [r4, #4]
 800369a:	bf08      	it	eq
 800369c:	f8c8 1000 	streq.w	r1, [r8]
 80036a0:	5162      	str	r2, [r4, r5]
 80036a2:	604b      	str	r3, [r1, #4]
 80036a4:	4630      	mov	r0, r6
 80036a6:	f000 f82f 	bl	8003708 <__malloc_unlock>
 80036aa:	f104 000b 	add.w	r0, r4, #11
 80036ae:	1d23      	adds	r3, r4, #4
 80036b0:	f020 0007 	bic.w	r0, r0, #7
 80036b4:	1ac2      	subs	r2, r0, r3
 80036b6:	bf1c      	itt	ne
 80036b8:	1a1b      	subne	r3, r3, r0
 80036ba:	50a3      	strne	r3, [r4, r2]
 80036bc:	e7af      	b.n	800361e <_malloc_r+0x22>
 80036be:	6862      	ldr	r2, [r4, #4]
 80036c0:	42a3      	cmp	r3, r4
 80036c2:	bf0c      	ite	eq
 80036c4:	f8c8 2000 	streq.w	r2, [r8]
 80036c8:	605a      	strne	r2, [r3, #4]
 80036ca:	e7eb      	b.n	80036a4 <_malloc_r+0xa8>
 80036cc:	4623      	mov	r3, r4
 80036ce:	6864      	ldr	r4, [r4, #4]
 80036d0:	e7ae      	b.n	8003630 <_malloc_r+0x34>
 80036d2:	463c      	mov	r4, r7
 80036d4:	687f      	ldr	r7, [r7, #4]
 80036d6:	e7b6      	b.n	8003646 <_malloc_r+0x4a>
 80036d8:	461a      	mov	r2, r3
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	42a3      	cmp	r3, r4
 80036de:	d1fb      	bne.n	80036d8 <_malloc_r+0xdc>
 80036e0:	2300      	movs	r3, #0
 80036e2:	6053      	str	r3, [r2, #4]
 80036e4:	e7de      	b.n	80036a4 <_malloc_r+0xa8>
 80036e6:	230c      	movs	r3, #12
 80036e8:	4630      	mov	r0, r6
 80036ea:	6033      	str	r3, [r6, #0]
 80036ec:	f000 f80c 	bl	8003708 <__malloc_unlock>
 80036f0:	e794      	b.n	800361c <_malloc_r+0x20>
 80036f2:	6005      	str	r5, [r0, #0]
 80036f4:	e7d6      	b.n	80036a4 <_malloc_r+0xa8>
 80036f6:	bf00      	nop
 80036f8:	20000338 	.word	0x20000338

080036fc <__malloc_lock>:
 80036fc:	4801      	ldr	r0, [pc, #4]	@ (8003704 <__malloc_lock+0x8>)
 80036fe:	f7ff bf10 	b.w	8003522 <__retarget_lock_acquire_recursive>
 8003702:	bf00      	nop
 8003704:	20000330 	.word	0x20000330

08003708 <__malloc_unlock>:
 8003708:	4801      	ldr	r0, [pc, #4]	@ (8003710 <__malloc_unlock+0x8>)
 800370a:	f7ff bf0b 	b.w	8003524 <__retarget_lock_release_recursive>
 800370e:	bf00      	nop
 8003710:	20000330 	.word	0x20000330

08003714 <__sflush_r>:
 8003714:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371a:	0716      	lsls	r6, r2, #28
 800371c:	4605      	mov	r5, r0
 800371e:	460c      	mov	r4, r1
 8003720:	d454      	bmi.n	80037cc <__sflush_r+0xb8>
 8003722:	684b      	ldr	r3, [r1, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	dc02      	bgt.n	800372e <__sflush_r+0x1a>
 8003728:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800372a:	2b00      	cmp	r3, #0
 800372c:	dd48      	ble.n	80037c0 <__sflush_r+0xac>
 800372e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003730:	2e00      	cmp	r6, #0
 8003732:	d045      	beq.n	80037c0 <__sflush_r+0xac>
 8003734:	2300      	movs	r3, #0
 8003736:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800373a:	682f      	ldr	r7, [r5, #0]
 800373c:	6a21      	ldr	r1, [r4, #32]
 800373e:	602b      	str	r3, [r5, #0]
 8003740:	d030      	beq.n	80037a4 <__sflush_r+0x90>
 8003742:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003744:	89a3      	ldrh	r3, [r4, #12]
 8003746:	0759      	lsls	r1, r3, #29
 8003748:	d505      	bpl.n	8003756 <__sflush_r+0x42>
 800374a:	6863      	ldr	r3, [r4, #4]
 800374c:	1ad2      	subs	r2, r2, r3
 800374e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003750:	b10b      	cbz	r3, 8003756 <__sflush_r+0x42>
 8003752:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003754:	1ad2      	subs	r2, r2, r3
 8003756:	2300      	movs	r3, #0
 8003758:	4628      	mov	r0, r5
 800375a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800375c:	6a21      	ldr	r1, [r4, #32]
 800375e:	47b0      	blx	r6
 8003760:	1c43      	adds	r3, r0, #1
 8003762:	89a3      	ldrh	r3, [r4, #12]
 8003764:	d106      	bne.n	8003774 <__sflush_r+0x60>
 8003766:	6829      	ldr	r1, [r5, #0]
 8003768:	291d      	cmp	r1, #29
 800376a:	d82b      	bhi.n	80037c4 <__sflush_r+0xb0>
 800376c:	4a28      	ldr	r2, [pc, #160]	@ (8003810 <__sflush_r+0xfc>)
 800376e:	410a      	asrs	r2, r1
 8003770:	07d6      	lsls	r6, r2, #31
 8003772:	d427      	bmi.n	80037c4 <__sflush_r+0xb0>
 8003774:	2200      	movs	r2, #0
 8003776:	6062      	str	r2, [r4, #4]
 8003778:	6922      	ldr	r2, [r4, #16]
 800377a:	04d9      	lsls	r1, r3, #19
 800377c:	6022      	str	r2, [r4, #0]
 800377e:	d504      	bpl.n	800378a <__sflush_r+0x76>
 8003780:	1c42      	adds	r2, r0, #1
 8003782:	d101      	bne.n	8003788 <__sflush_r+0x74>
 8003784:	682b      	ldr	r3, [r5, #0]
 8003786:	b903      	cbnz	r3, 800378a <__sflush_r+0x76>
 8003788:	6560      	str	r0, [r4, #84]	@ 0x54
 800378a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800378c:	602f      	str	r7, [r5, #0]
 800378e:	b1b9      	cbz	r1, 80037c0 <__sflush_r+0xac>
 8003790:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003794:	4299      	cmp	r1, r3
 8003796:	d002      	beq.n	800379e <__sflush_r+0x8a>
 8003798:	4628      	mov	r0, r5
 800379a:	f7ff fec5 	bl	8003528 <_free_r>
 800379e:	2300      	movs	r3, #0
 80037a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80037a2:	e00d      	b.n	80037c0 <__sflush_r+0xac>
 80037a4:	2301      	movs	r3, #1
 80037a6:	4628      	mov	r0, r5
 80037a8:	47b0      	blx	r6
 80037aa:	4602      	mov	r2, r0
 80037ac:	1c50      	adds	r0, r2, #1
 80037ae:	d1c9      	bne.n	8003744 <__sflush_r+0x30>
 80037b0:	682b      	ldr	r3, [r5, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0c6      	beq.n	8003744 <__sflush_r+0x30>
 80037b6:	2b1d      	cmp	r3, #29
 80037b8:	d001      	beq.n	80037be <__sflush_r+0xaa>
 80037ba:	2b16      	cmp	r3, #22
 80037bc:	d11d      	bne.n	80037fa <__sflush_r+0xe6>
 80037be:	602f      	str	r7, [r5, #0]
 80037c0:	2000      	movs	r0, #0
 80037c2:	e021      	b.n	8003808 <__sflush_r+0xf4>
 80037c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037c8:	b21b      	sxth	r3, r3
 80037ca:	e01a      	b.n	8003802 <__sflush_r+0xee>
 80037cc:	690f      	ldr	r7, [r1, #16]
 80037ce:	2f00      	cmp	r7, #0
 80037d0:	d0f6      	beq.n	80037c0 <__sflush_r+0xac>
 80037d2:	0793      	lsls	r3, r2, #30
 80037d4:	bf18      	it	ne
 80037d6:	2300      	movne	r3, #0
 80037d8:	680e      	ldr	r6, [r1, #0]
 80037da:	bf08      	it	eq
 80037dc:	694b      	ldreq	r3, [r1, #20]
 80037de:	1bf6      	subs	r6, r6, r7
 80037e0:	600f      	str	r7, [r1, #0]
 80037e2:	608b      	str	r3, [r1, #8]
 80037e4:	2e00      	cmp	r6, #0
 80037e6:	ddeb      	ble.n	80037c0 <__sflush_r+0xac>
 80037e8:	4633      	mov	r3, r6
 80037ea:	463a      	mov	r2, r7
 80037ec:	4628      	mov	r0, r5
 80037ee:	6a21      	ldr	r1, [r4, #32]
 80037f0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80037f4:	47e0      	blx	ip
 80037f6:	2800      	cmp	r0, #0
 80037f8:	dc07      	bgt.n	800380a <__sflush_r+0xf6>
 80037fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003802:	f04f 30ff 	mov.w	r0, #4294967295
 8003806:	81a3      	strh	r3, [r4, #12]
 8003808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800380a:	4407      	add	r7, r0
 800380c:	1a36      	subs	r6, r6, r0
 800380e:	e7e9      	b.n	80037e4 <__sflush_r+0xd0>
 8003810:	dfbffffe 	.word	0xdfbffffe

08003814 <_fflush_r>:
 8003814:	b538      	push	{r3, r4, r5, lr}
 8003816:	690b      	ldr	r3, [r1, #16]
 8003818:	4605      	mov	r5, r0
 800381a:	460c      	mov	r4, r1
 800381c:	b913      	cbnz	r3, 8003824 <_fflush_r+0x10>
 800381e:	2500      	movs	r5, #0
 8003820:	4628      	mov	r0, r5
 8003822:	bd38      	pop	{r3, r4, r5, pc}
 8003824:	b118      	cbz	r0, 800382e <_fflush_r+0x1a>
 8003826:	6a03      	ldr	r3, [r0, #32]
 8003828:	b90b      	cbnz	r3, 800382e <_fflush_r+0x1a>
 800382a:	f7ff fc95 	bl	8003158 <__sinit>
 800382e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0f3      	beq.n	800381e <_fflush_r+0xa>
 8003836:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003838:	07d0      	lsls	r0, r2, #31
 800383a:	d404      	bmi.n	8003846 <_fflush_r+0x32>
 800383c:	0599      	lsls	r1, r3, #22
 800383e:	d402      	bmi.n	8003846 <_fflush_r+0x32>
 8003840:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003842:	f7ff fe6e 	bl	8003522 <__retarget_lock_acquire_recursive>
 8003846:	4628      	mov	r0, r5
 8003848:	4621      	mov	r1, r4
 800384a:	f7ff ff63 	bl	8003714 <__sflush_r>
 800384e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003850:	4605      	mov	r5, r0
 8003852:	07da      	lsls	r2, r3, #31
 8003854:	d4e4      	bmi.n	8003820 <_fflush_r+0xc>
 8003856:	89a3      	ldrh	r3, [r4, #12]
 8003858:	059b      	lsls	r3, r3, #22
 800385a:	d4e1      	bmi.n	8003820 <_fflush_r+0xc>
 800385c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800385e:	f7ff fe61 	bl	8003524 <__retarget_lock_release_recursive>
 8003862:	e7dd      	b.n	8003820 <_fflush_r+0xc>

08003864 <__swhatbuf_r>:
 8003864:	b570      	push	{r4, r5, r6, lr}
 8003866:	460c      	mov	r4, r1
 8003868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800386c:	4615      	mov	r5, r2
 800386e:	2900      	cmp	r1, #0
 8003870:	461e      	mov	r6, r3
 8003872:	b096      	sub	sp, #88	@ 0x58
 8003874:	da0c      	bge.n	8003890 <__swhatbuf_r+0x2c>
 8003876:	89a3      	ldrh	r3, [r4, #12]
 8003878:	2100      	movs	r1, #0
 800387a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800387e:	bf14      	ite	ne
 8003880:	2340      	movne	r3, #64	@ 0x40
 8003882:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003886:	2000      	movs	r0, #0
 8003888:	6031      	str	r1, [r6, #0]
 800388a:	602b      	str	r3, [r5, #0]
 800388c:	b016      	add	sp, #88	@ 0x58
 800388e:	bd70      	pop	{r4, r5, r6, pc}
 8003890:	466a      	mov	r2, sp
 8003892:	f000 f849 	bl	8003928 <_fstat_r>
 8003896:	2800      	cmp	r0, #0
 8003898:	dbed      	blt.n	8003876 <__swhatbuf_r+0x12>
 800389a:	9901      	ldr	r1, [sp, #4]
 800389c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80038a0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80038a4:	4259      	negs	r1, r3
 80038a6:	4159      	adcs	r1, r3
 80038a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038ac:	e7eb      	b.n	8003886 <__swhatbuf_r+0x22>

080038ae <__smakebuf_r>:
 80038ae:	898b      	ldrh	r3, [r1, #12]
 80038b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038b2:	079d      	lsls	r5, r3, #30
 80038b4:	4606      	mov	r6, r0
 80038b6:	460c      	mov	r4, r1
 80038b8:	d507      	bpl.n	80038ca <__smakebuf_r+0x1c>
 80038ba:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80038be:	6023      	str	r3, [r4, #0]
 80038c0:	6123      	str	r3, [r4, #16]
 80038c2:	2301      	movs	r3, #1
 80038c4:	6163      	str	r3, [r4, #20]
 80038c6:	b003      	add	sp, #12
 80038c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038ca:	466a      	mov	r2, sp
 80038cc:	ab01      	add	r3, sp, #4
 80038ce:	f7ff ffc9 	bl	8003864 <__swhatbuf_r>
 80038d2:	9f00      	ldr	r7, [sp, #0]
 80038d4:	4605      	mov	r5, r0
 80038d6:	4639      	mov	r1, r7
 80038d8:	4630      	mov	r0, r6
 80038da:	f7ff fe8f 	bl	80035fc <_malloc_r>
 80038de:	b948      	cbnz	r0, 80038f4 <__smakebuf_r+0x46>
 80038e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038e4:	059a      	lsls	r2, r3, #22
 80038e6:	d4ee      	bmi.n	80038c6 <__smakebuf_r+0x18>
 80038e8:	f023 0303 	bic.w	r3, r3, #3
 80038ec:	f043 0302 	orr.w	r3, r3, #2
 80038f0:	81a3      	strh	r3, [r4, #12]
 80038f2:	e7e2      	b.n	80038ba <__smakebuf_r+0xc>
 80038f4:	89a3      	ldrh	r3, [r4, #12]
 80038f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80038fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038fe:	81a3      	strh	r3, [r4, #12]
 8003900:	9b01      	ldr	r3, [sp, #4]
 8003902:	6020      	str	r0, [r4, #0]
 8003904:	b15b      	cbz	r3, 800391e <__smakebuf_r+0x70>
 8003906:	4630      	mov	r0, r6
 8003908:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800390c:	f000 f81e 	bl	800394c <_isatty_r>
 8003910:	b128      	cbz	r0, 800391e <__smakebuf_r+0x70>
 8003912:	89a3      	ldrh	r3, [r4, #12]
 8003914:	f023 0303 	bic.w	r3, r3, #3
 8003918:	f043 0301 	orr.w	r3, r3, #1
 800391c:	81a3      	strh	r3, [r4, #12]
 800391e:	89a3      	ldrh	r3, [r4, #12]
 8003920:	431d      	orrs	r5, r3
 8003922:	81a5      	strh	r5, [r4, #12]
 8003924:	e7cf      	b.n	80038c6 <__smakebuf_r+0x18>
	...

08003928 <_fstat_r>:
 8003928:	b538      	push	{r3, r4, r5, lr}
 800392a:	2300      	movs	r3, #0
 800392c:	4d06      	ldr	r5, [pc, #24]	@ (8003948 <_fstat_r+0x20>)
 800392e:	4604      	mov	r4, r0
 8003930:	4608      	mov	r0, r1
 8003932:	4611      	mov	r1, r2
 8003934:	602b      	str	r3, [r5, #0]
 8003936:	f7fd fb80 	bl	800103a <_fstat>
 800393a:	1c43      	adds	r3, r0, #1
 800393c:	d102      	bne.n	8003944 <_fstat_r+0x1c>
 800393e:	682b      	ldr	r3, [r5, #0]
 8003940:	b103      	cbz	r3, 8003944 <_fstat_r+0x1c>
 8003942:	6023      	str	r3, [r4, #0]
 8003944:	bd38      	pop	{r3, r4, r5, pc}
 8003946:	bf00      	nop
 8003948:	2000032c 	.word	0x2000032c

0800394c <_isatty_r>:
 800394c:	b538      	push	{r3, r4, r5, lr}
 800394e:	2300      	movs	r3, #0
 8003950:	4d05      	ldr	r5, [pc, #20]	@ (8003968 <_isatty_r+0x1c>)
 8003952:	4604      	mov	r4, r0
 8003954:	4608      	mov	r0, r1
 8003956:	602b      	str	r3, [r5, #0]
 8003958:	f7fd fb7e 	bl	8001058 <_isatty>
 800395c:	1c43      	adds	r3, r0, #1
 800395e:	d102      	bne.n	8003966 <_isatty_r+0x1a>
 8003960:	682b      	ldr	r3, [r5, #0]
 8003962:	b103      	cbz	r3, 8003966 <_isatty_r+0x1a>
 8003964:	6023      	str	r3, [r4, #0]
 8003966:	bd38      	pop	{r3, r4, r5, pc}
 8003968:	2000032c 	.word	0x2000032c

0800396c <_sbrk_r>:
 800396c:	b538      	push	{r3, r4, r5, lr}
 800396e:	2300      	movs	r3, #0
 8003970:	4d05      	ldr	r5, [pc, #20]	@ (8003988 <_sbrk_r+0x1c>)
 8003972:	4604      	mov	r4, r0
 8003974:	4608      	mov	r0, r1
 8003976:	602b      	str	r3, [r5, #0]
 8003978:	f7fd fb84 	bl	8001084 <_sbrk>
 800397c:	1c43      	adds	r3, r0, #1
 800397e:	d102      	bne.n	8003986 <_sbrk_r+0x1a>
 8003980:	682b      	ldr	r3, [r5, #0]
 8003982:	b103      	cbz	r3, 8003986 <_sbrk_r+0x1a>
 8003984:	6023      	str	r3, [r4, #0]
 8003986:	bd38      	pop	{r3, r4, r5, pc}
 8003988:	2000032c 	.word	0x2000032c

0800398c <_init>:
 800398c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398e:	bf00      	nop
 8003990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003992:	bc08      	pop	{r3}
 8003994:	469e      	mov	lr, r3
 8003996:	4770      	bx	lr

08003998 <_fini>:
 8003998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399a:	bf00      	nop
 800399c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800399e:	bc08      	pop	{r3}
 80039a0:	469e      	mov	lr, r3
 80039a2:	4770      	bx	lr
